Class {
	#name : #RustParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Rust'
}

{ #category : #generated }
RustParser class >> ambiguousTransitions [
^#(
#[ 0 14 0 37] 
#[ 0 14 1 93] 
#[ 0 30 0 34] 
#[ 0 46 3 157] 
#[ 0 50 3 165] 
#[ 0 174 4 5] 
#[ 0 182 1 125] 
#[ 0 194 1 125] 
#[ 0 198 1 125] 
#[ 0 206 1 125] 
#[ 0 14 5 121] 
#[ 0 70 0 246] 
#[ 0 250 3 237] 
#[ 0 74 0 254] 
#[ 0 37 0 170] 
#[ 0 41 0 170] 
#[ 0 170 1 49] 
#[ 0 170 2 77] 
#[ 0 170 2 81] 
#[ 0 170 2 85] 
#[ 0 170 2 89] 
#[ 0 93 0 170] 
#[ 0 105 0 170] 
#[ 0 170 2 93] 
#[ 0 129 0 170] 
#[ 0 133 0 170] 
#[ 1 18 1 22] 
#[ 1 102 4 5] 
#[ 1 106 6 93] 
#[ 1 114 6 109] 
#[ 1 142 4 5] 
#[ 0 14 2 81] 
#[ 0 14 2 89] 
#[ 0 14 0 129] 
#[ 0 14 0 133] 
#[ 0 14 3 37] 
#[ 2 10 2 14] 
#[ 2 22 7 189] 
#[ 2 30 2 34] 
#[ 2 38 7 205] 
#[ 2 78 4 5] 
#[ 1 125 2 178] 
#[ 1 125 2 186] 
#[ 0 178 3 78] 
#[ 0 14 9 89] 
#[ 0 14 2 129] 
#[ 1 14 3 118] 
#[ 1 22 3 122] 
#[ 1 125 3 126] 
#[ 3 178 4 5] 
#[ 2 30 2 34 11 49] 
#[ 3 226 7 205] 
#[ 2 14 3 238] 
#[ 4 46 7 205] 
#[ 4 50 7 205] 
#[ 3 22 4 158] 
#[ 4 202 13 169] 
#[ 4 210 14 5] 
#[ 0 178 5 54] 
#[ 0 14 14 113] 
#[ 3 230 15 81] 
#[ 4 22 15 85] 
#[ 6 6 7 205] 
#[ 6 66 6 237] 
#[ 3 25 6 66] 
#[ 2 18 6 106] 
#[ 1 102 6 110] 
#[ 0 178 3 78 4 190] 
#[ 7 26 13 169] 
#[ 7 74 14 113] 
#[ 0 14 7 98] 
#[ 2 18 20 109] 
#[ 6 10 20 181] 
#[ 10 174 23 85] 
#[ 2 30 4 22] 
#[ 2 30 2 34 4 22] 
#[ 1 186 2 198] 
#[ 0 54 12 58] 
#[ 0 54 25 225] 
#[ 1 202 2 238] 
#[ 1 114 7 185] 
#[ 1 114 2 22] 
#[ 1 114 2 22 25 245] 
#[ 7 70 10 130] 
#[ 12 110 26 45] 
#[ 3 218 4 154] 
#[ 0 54 13 218] 
#[ 0 54 14 158] 
#[ 0 54 14 162] 
#[ 5 166 6 82] 
#[ 1 22 14 222] 
#[ 8 30 11 102] 
#[ 0 54 15 46] 
#[ 11 146 12 246] 
#[ 11 154 12 250] 
#[ 13 18 14 58]
	).
]

{ #category : #'generated-accessing' }
RustParser class >> cacheId [
	^'2024-04-15T12:48:07.671486-05:00'
]

{ #category : #generated }
RustParser class >> definitionComment [
"/*
Copyright (c) 2010 The Rust Project Developers
Copyright (c) 2020-2021 Student Main

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

%unicode;

%glr;
%id <lt> <gt> <amp> <rawString> <FLOAT_LITERAL> <INTEGER_LITERAL> <lparen> <lbracket>;
%right ""box"" ""break"" ""continue"" ""return"";
%right ""="" ""+="" ""-="" ""*="" ""/="" ""%="" ""&="" ""|="" ""^="" ""<<="" "">>="" ;
%nonassoc "".."" ""..="";
%left ""||"";
%left ""&&"";
%nonassoc <lt> ""<="" <gt> "">="" ""=="" ""!="" ;
%left <bar>;
%left ""^"";
%left <amp>;
%left ""<<"" "">>"" "">>>"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""%"";
%left ""as"";
### unary %right ""-"" ""*"" ""!"" ""&"" ;
%left ""?"";
%left ""."";
%left <lparen> <lbracket>;
%prefix Rust;
%suffix Node;
%root Program;
%hierarchy Expression (
	ArrayExpression
	AssignmentExpression
	AsyncBlockExpression
	AttributedExpression
	AwaitExpression
	BinaryExpression
	BlockExpression
	BorrowExpression
	BoxExpression
	BreakExpression
	CallExpression
	ClosureExpression
	ContinueExpression
	ErrorPropogationExpression
	FieldExpression
	ForIteratorLoopExpression
	GroupedExpression
	IfExpression
	IfLetExpression
	IndexExpression
	LiteralExpression
	LoopExpression
	MacroInvocation
	MatchExpression
	MethodCallExpression
	PathExpression
	RangeExpression
	ReturnExpression
	StructExprStruct
	StructExprTuple
	TupleExpression
	TupleIndexExpression
	TypeCastExpression
	UnaryExpression
	UnsafeBlockExpression
	WhileLetLoopExpression
	WhileLoopExpression
);
%hierarchy Statement (
	EmptyStatement
	ExpressionStatement
	ItemStatement
	LetStatement
	MacroInvocationStatement
);
%hierarchy Type (
	ArrayType
	FunctionType
	ImplTraitType
	InferredType
	NeverType
	ParenthesizedType
	QualifiedPathInType
	RawPointerType
	ReferenceType
	SliceType
	TraitObjectType
	TupleType
	TypePath
);
%start crate item statement expression blockExpression;

<bar> : \|;
<lparen> : \(;
<lbracket> : \[;
/*parser grammar RustParser
   ;*/

/*
Copyright (c) 2010 The Rust Project Developers
Copyright (c) 2020-2021 Student Main

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*lexer grammar RustLexer
   ;*/

/* TODO: options
{
   superClass = RustLexerBase;
} */

# https://doc.rust-lang.org/reference/keywords.html strict
# 2018+
# reserved
# reserved 2018+
# weak
# rule itself allow any identifier, but keyword has been matched before
<NON_KEYWORD_IDENTIFIER>: <isLetter>(_ | <isAlphaNumeric>)* | _ (_ | <isAlphaNumeric>)+;
<RAW_IDENTIFIER>: r\# <NON_KEYWORD_IDENTIFIER>;
# comments https://doc.rust-lang.org/reference/comments.html
<comment>
	: \/\/[^\r\n]*
	|  (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;

shebang <SHEBANG>: \xfeff? \#\! [^\r\n\[] [^\r\n]*;

#ISOLATED_CR
# : '\r' {_input.LA(1)!='\n'}// not followed with \n ;

# whitespace https://doc.rust-lang.org/reference/whitespace.html
<whitespace>: \s+;

# tokens char and string
<CHAR_LITERAL>
   : \'
   (
      [^\'\\\n\r\t]
      | <QUOTE_ESCAPE>
      | <ASCII_ESCAPE>
      | <UNICODE_ESCAPE>
   ) \'
   ;

<STRING_LITERAL>
   : \""
   (
      [^\""\\]
      | <QUOTE_ESCAPE>
      | <ASCII_ESCAPE>
      | <UNICODE_ESCAPE>
      | <ESC_NEWLINE>
   )* \""
   ;

<rawStringStart>: b?r \#+ \"";

<simpleRawString>: b?r \"" [^\""]* \"";	#### fix

<BYTE_LITERAL>: b\' (. | <QUOTE_ESCAPE> | <BYTE_ESCAPE>) \';

<BYTE_STRING_LITERAL>: b\"" ([^\""] | <QUOTE_ESCAPE> | <BYTE_ESCAPE>)* \"";

<ASCII_ESCAPE>: \\x <OCT_DIGIT> <HEX_DIGIT> | <COMMON_ESCAPE>;

<BYTE_ESCAPE>: \\x <HEX_DIGIT> <HEX_DIGIT> | <COMMON_ESCAPE>;

<COMMON_ESCAPE>: \\ [nrt\\0];

<UNICODE_ESCAPE>
   : \\u\{ <HEX_DIGIT> <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? <HEX_DIGIT>? \}
   ;

<QUOTE_ESCAPE>: \\ [\'\""];

<ESC_NEWLINE>: \\ \n;

# number

<INTEGER_LITERAL>
   :
   (
      <DEC_LITERAL>
      | <BIN_LITERAL>
      | <OCT_LITERAL>
      | <HEX_LITERAL>
   ) <INTEGER_SUFFIX>?
   ;

<DEC_LITERAL>: <DEC_DIGIT> (<DEC_DIGIT> | _)*;

<HEX_LITERAL>: 0x _* <HEX_DIGIT> (<HEX_DIGIT> | _)*;

<OCT_LITERAL>: 0o _* <OCT_DIGIT> (<OCT_DIGIT> | _)*;

<BIN_LITERAL>: 0b _* [01] [01_]*;
<potentialFloat>
	: <DEC_LITERAL> \.
	;

<FLOAT_LITERAL>
   : <DEC_LITERAL> <FLOAT_EXPONENT> <FLOAT_SUFFIX>?
   | <DEC_LITERAL> <FLOAT_SUFFIX>
   | <DEC_LITERAL> \. <DEC_LITERAL> <FLOAT_EXPONENT>? <FLOAT_SUFFIX>?
   ;

<INTEGER_SUFFIX>
   : u8
   | u16
   | u32
   | u64
   | u128
   | usize
   | i8
   | i16
   | i32
   | i64
   | i128
   | isize
   ;

<FLOAT_SUFFIX>: f32 | f64;

<FLOAT_EXPONENT>: [eE] [\+\-]? _* <DEC_LITERAL>;

<OCT_DIGIT>: [0-7];

<DEC_DIGIT>: [0-9];

<HEX_DIGIT>: [0-9a-fA-F];

# LIFETIME_TOKEN: '\'' IDENTIFIER_OR_KEYWORD | '\'_';

<LIFETIME_OR_LABEL>: \' <NON_KEYWORD_IDENTIFIER>;

#SHL: '<<'; SHR: '>>'; removed to avoid confusion in type parameter

<lt>
	: <
	;
<gt>
	: \>
	;
<amp>
	: \&
	;
<patternToken>
	: (\`  [^\`]* \`)+
	;
# entry point
# 4
crate
   : <SHEBANG> 'shebang'? innerAttribute 'attr'* item+? {{}}
   ;

# 3
macroInvocation ###
   : macroInvocationWithoutBlock
   | macroInvocationWithBlock
   ;
macroInvocationWithBlock ###
	: simplePath 'name' ""!"" 'bang' ""{"" 'left' tokenTree* ""}"" 'right' {{MacroInvocation}}
	;
macroInvocationWithoutBlock ###
	: simplePath 'name' ""!"" 'bang' ""("" 'left' tokenTree* "")"" 'right' {{MacroInvocation}}
	| simplePath 'name' ""!"" 'bang' ""["" 'left' tokenTree* ""]"" 'right' {{MacroInvocation}}
	;
delimTokenTree
   : ""("" 'left' tokenTree* "")"" 'right' {{MacroTokenTree}}
   | ""["" 'left' tokenTree* ""]"" 'right' {{MacroTokenTree}}
   | ""{"" 'left' tokenTree* ""}"" 'right' {{MacroTokenTree}}
   ;
tokenTree
   : tokenTreeToken 'token'
   | delimTokenTree 'token'
   ;
tokenTreeToken
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | macroRepOp 'value' {{MacroToken}}
   | ""$"" 'value' {{MacroToken}}
   ;

macroInvocationSemi ###
   : macroInvocationWithoutBlock 'macroInvocation' "";"" 'semicolon' {{MacroInvocationStatement}}
   | macroInvocationWithBlock 'macroInvocation' {{MacroInvocationStatement}}
   ;

# 3.1
macroRulesDefinition
   : ""macro_rules"" 'macroRulesToken' ""!"" 'bang' identifier 'name' macroRulesDef {{}}
   ;
macroRulesDef
   : ""("" 'left' macroRules "")"" 'right' "";"" 'semicolon'
   | ""["" 'left' macroRules ""]"" 'right' "";"" 'semicolon'
   | ""{"" 'left' macroRules ""}"" 'right'
   ;
macroRules
   : macroRule 'rule' ("";"" 'semicolon' macroRule 'rule')* "";"" 'semicolon'?
   ;
macroRule
   : macroMatcher ""=>"" 'arrow' macroTranscriber 'tokens' {{}}
   ;
macroMatcher
   : ""("" 'left' macroMatch 'match'* "")"" 'right'
   | ""["" 'left' macroMatch 'match'* ""]"" 'right'
   | ""{"" 'left' macroMatch 'match'* ""}"" 'right'
   ;
macroMatch
   : macroMatchToken 'value' {{}}
   | macroMatcher {{}}
   | ""$"" 'dollar' (identifier 'name' | ""self"" 'name') "":"" 'colon' macroFragSpec 'fragment' {{}}
   | ""$"" 'dollar' ""("" 'leftParen' macroMatch 'match'+ "")"" 'rightParen' macroRepSep 'token'? macroRepOp 'op' {{}}
   ;
macroMatchToken
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | macroRepOp 'value' {{MacroToken}}
   ;
macroFragSpec
   : identifier # do validate here is wasting token
   ;
macroRepSep
   : macroIdentifierLikeToken 'value' {{MacroToken}}
   | macroLiteralToken
   | macroPunctuationToken 'value' {{MacroToken}}
   | ""$"" 'value' {{MacroToken}}
   ;
macroRepOp
   : ""*""
   | ""+""
   | ""?""
   ;
macroTranscriber
   : delimTokenTree
   ;

#configurationPredicate
# : configurationOption | configurationAll | configurationAny | configurationNot ; configurationOption: identifier (
# '=' (STRING_LITERAL | RAW_STRING_LITERAL))?; configurationAll: 'all' '(' configurationPredicateList? ')';
# configurationAny: 'any' '(' configurationPredicateList? ')'; configurationNot: 'not' '(' configurationPredicate ')';

#configurationPredicateList
# : configurationPredicate (',' configurationPredicate)* ','? ; cfgAttribute: 'cfg' '(' configurationPredicate ')';
# cfgAttrAttribute: 'cfg_attr' '(' configurationPredicate ',' cfgAttrs? ')'; cfgAttrs: attr (',' attr)* ','?;

# 6
item
   : outerAttribute 'attr'+? (visItem 'item' | macroItem 'item')
   ;
visItem
	: visibility 'visibility'? module {{Module}}
	| visibility 'visibility'? externCrate {{ExternCrate}}
	| visibility 'visibility'? useDeclaration {{UseDeclaration}}
	| visibility 'visibility'? function {{Function}}
	| visibility 'visibility'? typeAlias {{TypeAlias}}
	| visibility 'visibility'? struct {{Struct}}
	| visibility 'visibility'? enumeration {{Enum}}
	| visibility 'visibility'? union {{Union}}
	| visibility 'visibility'? constantItem {{Constant}}
	| visibility 'visibility'? staticItem {{Static}}
	| visibility 'visibility'? trait {{Trait}}
	| visibility 'visibility'? traitAlias {{TraitAlias}}
	| visibility 'visibility'? implementation {{Implementation}}
	| visibility 'visibility'? externBlock {{ExternBlock}}
	;
macroItem
   : macroInvocationSemi
   | macroRulesDefinition
   ;

# 6.1
module
   : ""unsafe"" 'unsafeToken'? ""mod"" 'modToken' identifier 'name' ("";"" 'semicolon' | ""{"" 'leftBrace' innerAttribute 'attr'* item+? ""}"" 'rightBrace') 
   ;

# 6.2
externCrate
   : ""extern"" 'externToken' ""crate"" 'crateToken' crateRef 'crate' asClause? "";"" 'semicolon'
   ;
crateRef
   : identifier
   | ""self""
   ;
asClause
   : ""as"" 'asToken' (identifier 'name' | ""_"" 'name')
   ;

# 6.3
useDeclaration
   : ""use"" 'useToken' useTree 'use' "";"" 'semicolon'
   ;
useTree
   : (simplePath 'basePath'? ""::"" 'colonColon')? (""*"" 'star' | ""{"" 'leftBrace' ( useTree 'use' ("","" 'comma' useTree 'use')* "","" 'comma'?)? ""}"" 'rightBrace') {{}}
   | simplePath 'path' (""as"" 'asToken' (identifier 'name' | ""_"" 'name'))? {{}}
   ;

# 6.4
function
   : functionQualifiers ""fn"" 'fnToken' identifier 'name' genericParams? ""("" 'leftParen' functionParameters? "")"" 'rightParen' functionReturnType? whereClause 'where'?
      (blockExpression 'block' | "";"" 'semicolon')
   ;
functionQualifiers
   : ""default"" 'defaultToken'? ""const"" 'constToken'? ""async"" 'asyncToken'? ""unsafe"" 'unsafeToken'? (""extern"" 'externToken' abi 'abi'?)? ### added default
   ;
abi
   : <STRING_LITERAL>
   | <rawString>
   | <simpleRawString>
   ;
functionParameters
   : selfParam "","" 'comma'?
   | (selfParam "","" 'comma')? functionParam ("","" 'comma' functionParam)* "","" 'comma'?
   ;
selfParam
   : outerAttribute 'attr'* (shorthandSelf | typedSelf)
   ;
shorthandSelf
   : (<amp> 'amp' lifetime 'lifetime'?)? ""mut"" 'mutToken'? ""self"" 'selfToken'
   ;
typedSelf
   : ""mut"" 'mutToken'? ""self"" 'selfToken' "":"" 'colon' type 'type'
   ;
functionParam
   : outerAttribute 'attr'* (functionParamPattern | ""..."" 'ellipsis' | type 'type')
   ;
functionParamPattern
   : pattern "":"" 'colon' (type 'type' | ""..."" 'ellipsis')
   ;
functionReturnType
   : ""->"" 'arrow' type 'type'
   ;

# 6.5
typeAlias
   : ""type"" 'typeToken' identifier 'name' genericParams? ("":"" 'colon' typeParamBounds)? whereClause 'where'? (""="" 'equalsToken' type 'type')? "";"" 'semicolon'
   ;

# 6.6
struct
   : structStruct
   | tupleStruct
   ;
structStruct
   : ""struct"" 'structToken' identifier 'name' genericParams? whereClause 'where'? (""{"" 'left' structFields? ""}"" 'right' | "";"" 'semicolon')
   ;
tupleStruct
   : ""struct"" 'structToken' identifier 'name' genericParams? ""("" 'left' tupleFields? "")"" 'right' whereClause 'where'? "";"" 'semicolon'
   ;
structFields
   : structField 'field' ("","" 'comma' structField 'field')* "","" 'comma'?
   ;
structField
   : outerAttribute 'attr'* visibility 'visibility'? identifier 'name' "":"" 'colon' type 'type' {{}}
   ;
tupleFields
   : tupleField 'field' ("","" 'comma' tupleField 'field')* "","" 'comma'?
   ;
tupleField
   : outerAttribute 'attr'* visibility 'visibility'? type 'type' {{}}
   ;

# 6.7
enumeration
   : ""enum"" 'enumToken' identifier 'name' genericParams? whereClause 'where'? ""{"" 'leftBrace' enumItems? ""}"" 'rightBrace'
   ;
enumItems
   : enumItem 'item' ("","" 'comma' enumItem 'item')* "","" 'comma'?
   ;
enumItem
   : outerAttribute 'attr'* visibility 'visibility'? identifier 'name'
   (
      enumItemTuple
      | enumItemStruct
      | enumItemDiscriminant
   )? {{}}
   ;
enumItemTuple
   : ""("" 'leftParen' tupleFields? "")"" 'rightParen'
   ;
enumItemStruct
   : ""{"" 'leftBrace' structFields? ""}"" 'rightBrace'
   ;
enumItemDiscriminant
   : ""="" 'equalsToken' expression 'value'
   ;

# 6.8
union
   : ""union"" 'unionToken' identifier 'name' genericParams? whereClause 'where'? ""{"" 'leftBrace' structFields ""}"" 'rightBrace'
   ;

# 6.9
constantItem
   : ""const"" 'constToken' (identifier 'name' | ""_"" 'name') "":"" 'colon' type 'type' (""="" 'equalsToken' expression 'value')? "";"" 'semicolon'
   ;

# 6.10
staticItem
   : ""static"" 'staticToken' ""mut"" 'mutToken'? identifier 'name' "":"" 'colon' type 'type' (""="" 'equalsToken' expression 'value')? "";"" 'semicolon'
   ;

# 6.11
trait
   : ""unsafe"" 'unsafeToken'? ""auto"" 'autoToken'? ""trait"" 'traitToken' identifier 'name' genericParams? ("":"" 'colon' typeParamBounds?)? whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'
   ;
traitAlias 
	: ""unsafe"" 'unsafeToken'? ""auto"" 'autoToken'? ""trait"" 'traitToken' identifier 'name' genericParams? ""="" 'equalsToken' typeParamBounds? ("":"" 'colon' typeParamBounds?)? whereClause 'where'? "";"" 'semicolon'
	;

# 6.12
implementation
   : inherentImpl
   | traitImpl
   ;
inherentImpl
   : ""impl"" 'implToken' genericParams? type 'type' whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'
   ;
traitImpl
   : ""unsafe"" 'unsafeToken'? ""impl"" 'implToken' genericParams? ""const"" 'constToken'? ""!"" 'bang'? typePath 'type' ""for"" 'forToken' type 'type' whereClause 'where'? ""{"" 'leftBrace' innerAttribute 'attr'* associatedItem 'item'+? ""}"" 'rightBrace'	### added const
   ;

# 6.13
externBlock
   : ""unsafe"" 'unsafeToken'? ""extern"" 'externToken' abi 'abi'? ""{"" 'leftBrace' innerAttribute 'attr'* externalItem 'item'+? ""}"" 'rightBrace'
   ;
externalItem
   : outerAttribute 'attr'+? macroInvocationSemi 'macro' {{AttributedMacroInvocation}}
   | outerAttribute 'attr'+? visibility 'visibility'? staticItem {{Static}}
   | outerAttribute 'attr'+? visibility 'visibility'? function {{Function}}
   ;

# 6.14
genericParams
   : <lt> 'lt' ((genericParam 'param' "","" 'comma')+? genericParam 'param' "","" 'comma'? )?<gt> 'gt'
   ;
genericParam
   : outerAttribute 'attr'*
   (
      lifetimeParam 'param'
      | typeParam 'param'
      | constParam 'param'
   ) {{}}
   ;
lifetimeParam
   : <LIFETIME_OR_LABEL> 'lifetime' ("":"" 'colon' lifetimeBounds)? {{}}	### remove outerAttribute?
   ;
typeParam
   : identifier 'name' ("":"" 'colon' typeParamBounds?)? (""="" 'equalsToken' type 'type')? {{}}	### remove outerAttribute?
   ;
constParam
   : ""const"" 'constToken' identifier 'name' "":"" 'colon' type 'type' {{}}
   ;

whereClause
   : ""where"" 'whereToken' (whereClauseItem 'clause' "","" 'comma')* whereClauseItem 'clause'? {{}}
   ;
whereClauseItem
   : lifetimeWhereClauseItem
   | typeBoundWhereClauseItem
   ;
lifetimeWhereClauseItem
   : lifetime 'lifetime' "":"" 'colon' lifetimeBounds {{}}
   ;
typeBoundWhereClauseItem
   : forLifetimes? type 'type' "":"" 'colon' typeParamBounds? {{}}
   ;
forLifetimes
   : ""for"" 'forToken' genericParams
   ;

# 6.15
associatedItem
   : outerAttribute 'attr'+? macroInvocationSemi 'macro' {{AttributedMacroInvocation}}
   | outerAttribute 'attr'+? visibility 'visibility'? typeAlias {{TypeAlias}}
   | outerAttribute 'attr'+? visibility 'visibility'? constantItem {{Constant}}
   | outerAttribute 'attr'+? visibility 'visibility'? function {{Function}}
   ;

# 7
innerAttribute
   : ""#"" 'hashToken' ""!"" 'bang' ""["" 'leftBracket' attr ""]"" 'rightBracket' {{Attribute}}
   ;
outerAttribute
   : ""#"" 'hashToken' ""["" 'leftBracket' attr ""]"" 'rightBracket' {{Attribute}}
   ;
attr
   : simplePath 'path' attrInput?
   ;
attrInput
   : delimTokenTree 'value'
   | ""="" 'equalsToken' literalExpression 'value'
   ; # w/o suffix

#metaItem
# : simplePath ( '=' literalExpression //w | '(' metaSeq ')' )? ; metaSeq: metaItemInner (',' metaItemInner)* ','?;
# metaItemInner: metaItem | literalExpression; // w

#metaWord: identifier; metaNameValueStr: identifier '=' ( STRING_LITERAL | RAW_STRING_LITERAL); metaListPaths:
# identifier '(' ( simplePath (',' simplePath)* ','?)? ')'; metaListIdents: identifier '(' ( identifier (','
# identifier)* ','?)? ')'; metaListNameValueStr : identifier '(' (metaNameValueStr ( ',' metaNameValueStr)* ','?)? ')'
# ;

# 8
statement
   : "";"" 'semicolon' {{EmptyStatement}}
   | item {{ItemStatement}}
   | letStatement
   | expressionStatement {{ExpressionStatement}}
   | macroInvocationSemi
   ;

letStatement
   : outerAttribute 'attr'* ""let"" 'letToken' pattern ("":"" 'colon' type 'type')? (""="" 'equalsToken' expression 'value')? "";"" 'semicolon' {{}}
   ;

expressionStatement
   : expressionWithoutBlock 'expression' "";"" 'semicolon'
   | expressionWithBlock 'expression'
   ;

# 8.2
expression
   : expressionWithoutBlock
   | expressionWithBlock                                # ExpressionWithBlock_
   ;
expressionWithoutBlock
	: outerAttribute 'attr' expressionWithoutBlock 'expression' {{AttributedExpression}}                         # AttributedExpression # technical, remove left recursive
   | literalExpression                                  # LiteralExpression_
   | pathExpression                                     # PathExpression_
   | expression 'expression' ""."" 'period' pathExprSegment <lparen> 'leftParen' callParams? "")"" 'rightParen' {{MethodCallExpression}} # MethodCallExpression   # 8.2.10
   | expression 'expression' ""."" 'period' identifier 'name' {{FieldExpression}}                         # FieldExpression  # 8.2.11
   | expression 'expression' ""."" 'period' tupleIndex 'index' {{TupleIndexExpression}}                          # TupleIndexingExpression   # 8.2.7
   | expression 'expression' ""."" 'period' ""await"" 'awaitToken' {{AwaitExpression}}                             # AwaitExpression  # 8.2.18
   | expression 'expression' <lparen> 'leftParen' callParams? "")"" 'rightParen' {{CallExpression}}                     # CallExpression   # 8.2.9
   | expression 'expression' <lbracket> 'leftBracket' expression 'index' ""]"" 'rightBracket' {{IndexExpression}}                      # IndexExpression  # 8.2.6
   | expression 'expression' ""?"" 'question' {{ErrorPropogationExpression}}                                 # ErrorPropagationExpression   # 8.2.4
   | (""&"" 'amp' | ""&&"" 'amp') ""mut"" 'mutToken'? expression 'expression' {{BorrowExpression}}                    # BorrowExpression # 8.2.4
   | ""*"" 'operator' expression 'value' {{UnaryExpression}}                                     # DereferenceExpression  # 8.2.4
   | (""-"" 'operator' | ""!"" 'operator') expression 'value' {{UnaryExpression}}                             # NegationExpression  # 8.2.4
   | expression 'expression' ""as"" 'asToken' typeNoBounds 'type' {{TypeCastExpression}}                # TypeCastExpression  # 8.2.4
   | expression 'left' (""*"" 'operator' | ""/"" 'operator' | ""%"" 'operator') expression 'right'  {{BinaryExpression}}            # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' (""+"" 'operator' | ""-"" 'operator') expression 'right' {{BinaryExpression}}                  # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' (""<<"" 'operator' |  "">>"" 'operator' | "">>>"" 'operator') expression 'right' {{BinaryExpression}}                  # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' <amp> 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' ""^"" 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' <bar> 'operator' expression 'right' {{BinaryExpression}}                          # ArithmeticOrLogicalExpression   # 8.2.4
   | expression 'left' ( ""=="" 'operator' | ""!="" 'operator' | <gt> 'operator' | <lt> 'operator' | "">="" 'operator' | ""<="" 'operator' ) expression  'right' {{BinaryExpression}}         # ComparisonExpression   # 8.2.4
   | expression 'left' ""&&"" 'operator' expression 'right' {{BinaryExpression}}                        # LazyBooleanExpression  # 8.2.4
   | expression 'left' ""||"" 'operator' expression 'right' {{BinaryExpression}}                         # LazyBooleanExpression  # 8.2.4
   | expression 'from' "".."" 'operator' expression 'to'? {{RangeExpression}}                        # RangeExpression  # 8.2.14
   | "".."" 'operator' expression 'to'? {{RangeExpression}}                                  # RangeExpression  # 8.2.14
   | ""..="" 'operator' expression 'to' {{RangeExpression}}                                   # RangeExpression  # 8.2.14
   | expression 'from' ""..="" 'operator' expression 'to' {{RangeExpression}}                        # RangeExpression  # 8.2.14
   | expression 'lhs' ""="" 'operator' expression 'rhs' {{AssignmentExpression}}                          # AssignmentExpression   # 8.2.4
   | expression 'lhs' ( ""+="" 'operator' | ""-="" 'operator' | ""*="" 'operator' | ""/="" 'operator' | ""%="" 'operator' | ""&="" 'operator' | ""|="" 'operator' | ""^="" 'operator' | ""<<="" 'operator' | "">>="" 'operator' ) expression 'rhs' {{AssignmentExpression}}       # CompoundAssignmentExpression # 8.2.4
   | ""continue"" 'continueToken' <LIFETIME_OR_LABEL> 'label'? expression 'value'? {{ContinueExpression}}          # ContinueExpression  # 8.2.13
   | ""break"" 'breakToken' <LIFETIME_OR_LABEL> 'label'? expression 'value'? {{BreakExpression}}            # BreakExpression  # 8.2.13
   | ""return"" 'returnToken' expression 'value'? {{ReturnExpression}}                               # ReturnExpression # 8.2.17
   | ""("" 'leftParen' innerAttribute 'attr'* expression 'expression' "")"" 'rightParen' {{GroupedExpression}}                # GroupedExpression   # 8.2.5
   | ""["" 'leftBracket' innerAttribute 'attr'* arrayElements? ""]"" 'rightBracket' {{ArrayExpression}}            # ArrayExpression  # 8.2.6
   | ""("" 'leftParen' innerAttribute 'attr'* tupleElements? "")"" 'rightParen' {{TupleExpression}}            # TupleExpression  # 8.2.7
   | structExpression                                   # StructExpression_   # 8.2.8
### handled by structExpression   | enumerationVariantExpression                       # EnumerationVariantExpression_
   | closureExpression                                  # ClosureExpression_  # 8.2.12
   | macroInvocation                                    # MacroInvocationAsExpression
   | ""box"" 'boxToken' expression 'value' {{BoxExpression}} ###
	;

expressionWithBlock
   : outerAttribute 'attr' expressionWithBlock 'expression' {{AttributedExpression}} # technical
   | blockExpression
   | asyncBlockExpression
   | unsafeBlockExpression
   | loopExpression
   | ifExpression
   | ifLetExpression
   | matchExpression
   ;

# 8.2.1
literalExpression
   : <CHAR_LITERAL> 'value' {{}}
   | <STRING_LITERAL> 'value' {{}}
   | <rawString> 'value' {{}}
   | <simpleRawString> 'value' {{}}
   | <BYTE_LITERAL> 'value' {{}}
   | <BYTE_STRING_LITERAL> 'value' {{}}
   | LiteralInteger
   | LiteralFloat 
   | ""true"" 'value' {{}}
   | ""false"" 'value' {{}}
   ;
LiteralFloat 
	: <FLOAT_LITERAL> 'value' {{LiteralExpression}}
	;
LiteralInteger 
	: <INTEGER_LITERAL> 'value'  {{LiteralExpression}}
	;

# 8.2.2
pathExpression
   : pathInExpression
   | qualifiedPathInExpression
   ;

# 8.2.3
blockExpression
   : ""{"" 'leftBrace' innerAttribute 'attr'* statements? ""}"" 'rightBrace' {{}}
   ;
statements
   : statement 'statement'+ expressionWithoutBlock 'statement'?
   | expressionWithoutBlock 'statement'
   ;

asyncBlockExpression
   : ""async"" 'asyncToken' ""move"" 'moveToken'? blockExpression 'expression' {{}}
   ;
unsafeBlockExpression
   : ""unsafe"" 'unsafeToken' blockExpression 'expression' {{}}
   ;

# 8.2.6
arrayElements
   : expression 'element' ("","" 'separator' expression 'element')* "","" 'separator'?
   | expression 'element' "";"" 'separator' expression 'element'
   ;

# 8.2.7
tupleElements
   : (expression 'element' "","" 'comma')+ expression 'element'?
   ;
tupleIndex
   : <INTEGER_LITERAL>
   ;

# 8.2.8
structExpression
   : structExprStruct
   | structExprTuple
   ### defined in pathExpression -- | structExprUnit
   ;
structExprStruct
   : pathInExpression 'path' ""{"" 'leftBrace' innerAttribute 'attr'* (structExprFields | structBase)? ""}"" 'rightBrace' {{}}
   ;
structExprFields
   : structExprField 'field' ("","" 'comma' structExprField 'field')* ("","" 'comma' structBase | "","" 'comma'?)
   ;
# outerAttribute here is not in doc
structExprField
   : outerAttribute 'attr'* (identifier 'name' | (identifier 'name' | tupleIndex 'name') "":""  'colon' expression 'value') {{}}
   ;
structBase
   : "".."" 'dotDot' expression 'from'
   ;
structExprTuple
   : pathInExpression 'path' ""("" 'leftParen' (expression 'arg' ("","" 'comma' expression 'arg')* "","" 'comma'?)? "")"" 'rightParen' {{}} ###
   ;
#structExprUnit
#   : pathInExpression
#   ;

#enumerationVariantExpression
#   : enumExprStruct
   ### same as structExprTuple | enumExprTuple
   ### defined in pathExpression -- | enumExprFieldless
#   ;
#enumExprStruct
#   : pathInExpression 'path' ""{"" 'leftBrace' enumExprFields? ""}"" 'rightBrace' {{}}
#   ;
#enumExprFields
#   : enumExprField 'field' ("","" 'comma' enumExprField 'field')* "","" 'comma'?
#   ;
#enumExprField
#   : identifier 'name' {{}}
#   | (identifier 'name' | tupleIndex 'name') "":"" 'colon' expression 'value' {{}}
#   ;
#enumExprFieldless
#   : pathInExpression
#   ;

# 8.2.9
callParams
   : expression 'arg' ("","" 'comma' expression 'arg')* "","" 'comma'?
   ;

# 8.2.12
closureExpression
   : ""move"" 'moveToken'? (""||"" 'bar' | ""|"" 'bar' closureParameters? ""|"" 'bar')
   (
      expression 'expression'
      | ""->"" 'arrow' typeNoBounds 'type' blockExpression 'expression'
   ) {{}}
   ;
closureParameters
   : closureParam 'parameter' ("","" 'comma' closureParam 'parameter')* "","" 'comma'?
   ;
closureParam
   : outerAttribute 'attr'* pattern ("":"" 'colon' type 'type')? {{}}
   ;

# 8.2.13
loopExpression
   : loopLabel? infiniteLoopExpression {{}}
   | loopLabel? predicateLoopExpression {{WhileLoopExpression}} 
   | loopLabel? predicatePatternLoopExpression {{WhileLetLoopExpression}}
   | loopLabel? iteratorLoopExpression {{ForIteratorLoopExpression}}
   ;
infiniteLoopExpression
   : ""loop"" 'loopToken' blockExpression 'block'
   ;
predicateLoopExpression
   : ""while"" 'whileToken' expression 'condition' /*except structExpression*/ blockExpression 'block'
   ;
predicatePatternLoopExpression
   : ""while"" 'whileToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'value' blockExpression 'block'
   ;
iteratorLoopExpression
   : ""for"" 'forToken' pattern ""in"" 'inToken' expression 'value' blockExpression 'block'
   ;
loopLabel
   : <LIFETIME_OR_LABEL> 'label' "":"" 'colon'
   ;

# 8.2.15
ifExpression
   : ""if"" 'ifToken' expression 'conditional' blockExpression 'thenValue'
   (
      ""else"" 'elseToken' (blockExpression 'elseValue' | ifExpression 'elseValue' | ifLetExpression 'elseValue')
   )? {{}}
   ;
ifLetExpression
	: ""if"" 'ifToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue' blockExpression 'thenValue'
	(
		""else"" 'elseToken' (blockExpression 'elseValue' | ifExpression 'elseValue' | ifLetExpression 'elseValue')
	)? {{}}
	| ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue' ""else"" 'elseToken' blockExpression 'elseValue' {{}}	### added
   ;

# 8.2.16
matchExpression
   : ""match"" 'matchToken' expression 'value' ""{"" 'leftBrace' innerAttribute 'attr'* matchArms? ""}"" 'rightBrace' {{}}
   ;
matchArms
   : (matchArm 'arm' ""=>"" 'arrow' matchArmExpression)* matchArm 'arm' ""=>"" 'arrow' ( expressionWithoutBlock 'armValue' | expressionWithBlock 'armValue') "","" 'comma'?
   ;
matchArmExpression
   : expressionWithoutBlock 'armValue' "","" 'comma'
   | expressionWithBlock 'armValue' "","" 'comma'?
   ;
matchArm
   : outerAttribute 'attr'* matchArmPatterns matchArmGuard? {{}}
   ;
matchArmPatterns
   : pattern ### was: ""|""? pattern (""|"" pattern)*
   ;
matchArmGuard
   : ""if"" 'ifToken' expression 'condition'
   | ""if"" 'ifToken' ""let"" 'letToken' matchArmPatterns ""="" 'equalsToken' expression 'matchValue'	### added
   ;

# 9
pattern
   : ""|"" 'bar'? patternNoTopAlt 'pattern' (""|"" 'bar' patternNoTopAlt 'pattern')* 
   ;
patternNoTopAlt 
	: patternWithoutRange
	| rangePattern
	;
patternWithoutRange
   : literalPattern
   | identifierPattern
   | wildcardPattern
   | restPattern
   | obsoleteRangePattern
   | referencePattern
   | structPattern
   | tupleStructPattern
   | tuplePattern
   | groupedPattern
   | slicePattern
   | pathPattern
   | macroInvocation
   | ""box"" 'boxToken' patternWithoutRange 'pattern' {{BoxPattern}}
   ;

literalPattern
   : ""true"" 'value' {{LiteralExpression}}
   | ""false"" 'value' {{LiteralExpression}}
   | <CHAR_LITERAL> 'value' {{LiteralExpression}}
   | <BYTE_LITERAL> 'value' {{LiteralExpression}}
   | <STRING_LITERAL> 'value' {{LiteralExpression}}
   | <rawString> 'value' {{LiteralExpression}}
   | <simpleRawString> 'value' {{LiteralExpression}}
   | <BYTE_STRING_LITERAL> 'value' {{LiteralExpression}}
   | LiteralInteger
   | ""-"" 'operator' LiteralInteger 'value' {{UnaryExpression}}
   | LiteralFloat
   | ""-"" 'operator' LiteralFloat 'value' {{UnaryExpression}}
   ;

identifierPattern
   : ""ref"" 'refToken'? ""mut"" 'mutToken'? identifier 'name' (""@"" 'atToken' pattern)? {{}}
   ;
wildcardPattern
   : ""_"" 'underscore' {{}}
   ;
restPattern
   : "".."" 'operator' {{}}
   ;
rangePattern
   : rangePatternBound 'from' ""..="" 'operator' rangePatternBound 'to' {{}}
   | rangePatternBound 'from' "".."" 'operator' {{}}	### added
   ;
obsoleteRangePattern
   : rangePatternBound 'from' ""..."" 'operator' rangePatternBound 'to' {{RangePattern}}
   ;
rangePatternBound
   : <CHAR_LITERAL> 'value' {{LiteralExpression}}
   | <BYTE_LITERAL> 'value' {{LiteralExpression}}
   | LiteralInteger
   | ""-"" 'operator' LiteralInteger 'value' {{UnaryExpression}}
   | LiteralFloat
   | ""-"" 'operator' LiteralFloat 'value' {{UnaryExpression}}
   | pathInExpression
   | qualifiedPathInExpression
   ;
referencePattern
   : (<amp> 'amp' | ""&&"" 'amp') ""mut"" 'mutToken'? patternWithoutRange 'pattern' {{}}
   ;
structPattern
   : pathInExpression 'path' ""{"" 'leftBrace' structPatternElements? ""}"" 'rightBrace' {{}}
   ;
structPatternElements
   : structPatternFields ("","" 'comma' structPatternEtCetera 'field'?)?
   | structPatternEtCetera 'field'
   ;
structPatternFields
   : structPatternField 'field' ("","" 'comma' structPatternField 'field')*
   ;
structPatternField
   : outerAttribute 'attr'*
   (
      tupleIndex 'name' "":"" 'colon' pattern
      | identifier 'name' "":"" 'colon' pattern
      | ""ref"" 'refToken'? ""mut"" 'mutToken'? identifier 'name'
   ) {{}}
   ;
structPatternEtCetera
   : outerAttribute 'attr'* "".."" 'dotDot' {{}}
   ;
tupleStructPattern
   : pathInExpression 'path' ""("" 'leftParen' tupleStructItems? "")"" 'rightParen' {{}}
   ;
tupleStructItems
   : pattern ("","" 'comma' pattern)+? "","" 'comma'?
   ;
tuplePattern
   : ""("" 'leftParen' tuplePatternItems? "")"" 'rightParen' {{}}
   ;
tuplePatternItems
   : pattern "","" 'comma'
   | restPattern 'restPattern'
   | pattern ("","" 'comma' pattern)+ "","" 'comma'?
   ;
groupedPattern
   : ""("" 'leftParen' pattern "")"" 'rightParen' {{}}
   ;
slicePattern
   : ""["" 'leftBracket' slicePatternItems? ""]"" 'rightBracket' {{}}
   ;
slicePatternItems
   : pattern ("","" 'comma' pattern)+? "","" 'comma'?
   ;
pathPattern
   : pathInExpression
   | qualifiedPathInExpression
   ;

# 10.1
type
   : typeNoBoundsWithoutImpl	###
   | implTraitType
   | traitObjectType
   ;
typeNoBounds
   : typeNoBoundsWithoutImpl	###
   | implTraitTypeOneBound
   ;
typeNoBoundsWithoutImpl	###
   : parenthesizedType
   | traitObjectTypeOneBound
   | typePath
   | tupleType
   | neverType
   | rawPointerType
   | referenceType
   | arrayType
   | sliceType
   | inferredType
   | qualifiedPathInType
   | bareFunctionType
   | macroInvocation
   ;
parenthesizedType
   : ""("" 'leftParen' type 'type' "")"" 'rightParen' {{}}
   ;

# 10.1.4
neverType
   : ""!"" 'bang' {{}}
   ;

# 10.1.5
tupleType
   : ""("" 'leftParen' ((type 'type' "","" 'comma')+ type 'type'?)? "")"" 'rightParen' {{}}
   ;

# 10.1.6
arrayType
   : ""["" 'leftBracket' type 'type' "";"" 'semicolon' expression 'length' ""]"" 'rightBracket' {{ArrayType}}
   ;

# 10.1.7
sliceType
   : ""["" 'leftBracket' type 'type' ""]"" 'rightBracket' {{SliceType}}
   ;

# 10.1.13
referenceType
   : <amp> 'amp' lifetime 'lifetime'? ""mut"" 'mutToken'? typeNoBounds 'type' {{}}
   ;
rawPointerType
   : ""*"" 'star' (""mut"" 'mutToken' | ""const"" 'constToken') typeNoBounds 'type' {{}}
   ;

# 10.1.14
bareFunctionType
   : forLifetimes? functionTypeQualifiers ""fn"" 'fnToken' ""("" 'leftParen' functionParametersMaybeNamedVariadic? "")"" 'rightParen' bareFunctionReturnType? {{FunctionType}}
   ;
functionTypeQualifiers
   : ""unsafe"" 'unsafeToken'? (""extern"" 'externToken' abi 'abi'?)?
   ;
bareFunctionReturnType
   : ""->"" 'arrow' typeNoBounds 'type'
   ;
functionParametersMaybeNamedVariadic
   : maybeNamedFunctionParameters
   | maybeNamedFunctionParametersVariadic
   ;
maybeNamedFunctionParameters
   : maybeNamedParam ("","" 'comma' maybeNamedParam)* "","" 'comma'?
   ;
maybeNamedParam
   : outerAttribute 'attr'* ((identifier 'name' | ""_"" 'name') "":"" 'colon')? type 'type'
   ;
maybeNamedFunctionParametersVariadic
   : maybeNamedParam ("","" 'comma' maybeNamedParam)* "","" 'comma' outerAttribute 'attr'* ""..."" 'ellipsis'
   ;

# 10.1.15
traitObjectType
   : ""dyn"" 'dynToken'? typeParamBounds {{}}
   ;
traitObjectTypeOneBound
   : ""dyn"" 'dynToken'? traitBound 'typeBound' {{TraitObjectType}}
   ;
implTraitType
   : ""impl"" 'implToken' typeParamBounds {{}}
   ;
implTraitTypeOneBound
   : ""impl"" 'implToken' traitBound 'typeBound' {{ImplTraitType}}
   ;

# 10.1.18
inferredType
   : ""_"" 'underscore' {{}}
   ;

# 10.6
typeParamBounds
   : typeParamBound 'typeBound' (""+"" 'plus' typeParamBound 'typeBound')* ""+"" 'plus'?
   ;
typeParamBound
   : lifetime 'lifetime' {{Lifetime}}
   | traitBound
   ;
traitBound
   : ""?"" 'question'? forLifetimes? typePath 'type' {{}}
   | ""("" 'leftParen' ""?"" 'question'? forLifetimes? typePath 'type' "")"" 'rightParen' {{}}
   ;
lifetimeBounds
   : (lifetime 'lifetimeBound' ""+"" 'plus' )* lifetime 'lifetimeBound'?
   ;
lifetime
   : <LIFETIME_OR_LABEL>
   | ""'static""
   | ""'_""
   ;

# 12.4
simplePath
   : ""::"" 'separator' ? simplePathSegment (""::"" 'separator' simplePathSegment)+? {{Path}}
   ;
simplePathSegment
   : identifier 'name'
   | ""super"" 'name'
   | ""self"" 'name'
   | ""crate"" 'name'
   | ""$crate"" 'name'
   ;

pathInExpression
   : ""::"" 'separator'? pathExprSegment (""::"" 'separator' pathExprSegment)+? {{PathExpression}}
   ;
pathExprSegment
   : pathIdentSegment (""::"" 'separator' genericArgs 'genericArgs')?
   ;
pathIdentSegment
   : simplePathSegment
   | ""Self"" 'name'
   ;

#TODO: let x : T<_>=something;
genericArgs
   : <lt> 'lt' <gt> 'gt' {{}}
   ### handled below by genericArg ###| <lt> 'lt' genericArgsLifetimes ("","" 'comma' genericArgsTypes)? ("","" 'comma' genericArgsBindings)? "","" 'comma'? <gt> 'gt'
   ### handled below by genericArg ###| <lt> 'lt' genericArgsTypes ("","" 'comma' genericArgsBindings)? "","" 'comma'? <gt> 'gt'
   | <lt> 'lt' genericArg 'genericArg' ("","" 'comma' genericArg 'genericArg')* "","" 'comma'? <gt> 'gt' {{}}
   ;
genericArg
   : lifetime 'lifetime' {{Lifetime}}
   | type
   | genericArgsConst
   | genericArgsBinding
   ;
genericArgsConst
   : blockExpression
   | ""-"" 'operator' literalExpression 'value' {{UnaryExpression}}
   | literalExpression
   | simplePathSegment {{PathExpression}}
   ;
#genericArgsLifetimes
#   : lifetime ("","" 'comma' lifetime)*
#   ;
#genericArgsTypes
#   : type 'type' ("","" 'comma' type 'type')*
#   ;
#genericArgsBindings
#   : genericArgsBinding 'binding' ("","" 'comma' genericArgsBinding 'binding')*
#   ;
genericArgsBinding
   : identifier 'name' ""="" 'equalsToken' type 'type' {{GenericArgBinding}}
   ;

qualifiedPathInExpression
   : qualifiedPathType (""::"" 'separator' pathExprSegment)+ {{PathExpression}}
   ;
qualifiedPathType
   : <lt> 'lt' type 'type' (""as"" 'asToken' typePath 'typePath')? <gt> 'gt'
   ;
qualifiedPathInType
   : qualifiedPathType (""::"" 'separator' typePathSegment)+ {{}}
   ;

typePath
   : ""::"" 'separator'? typePathSegment (""::"" 'separator' typePathSegment)+? {{}}
   ;
typePathSegment
   : pathIdentSegment ""::"" 'separator'? (genericArgs 'genericArgs' | typePathFn)?
   ;
typePathFn
   : ""("" 'leftParen' typePathInputs? "")"" 'rightParen' (""->"" 'arrow' type 'type')?
   ;
typePathInputs
   : type 'type' ("","" 'comma' type 'type')* "","" 'comma'?
   ;

# 12.6
visibility
   : ""pub"" 'pubToken' (""("" 'leftParen' (""crate"" 'crateToken' | ""self"" 'selfToken' | ""super"" 'superToken' | ""in"" 'inToken' simplePath 'path') "")"" 'rightParen')? {{}}
   | ""crate"" 'crateToken' {{}} ### added
   ;

# technical
identifier
   : <NON_KEYWORD_IDENTIFIER>
   | <RAW_IDENTIFIER>
   | ""macro_rules""
   | ""auto""	###
   ;
keyword
   : ""as""
   | ""break""
   | ""const""
   | ""continue""
   | ""crate""
   | ""else""
   | ""enum""
   | ""extern""
   ### part of macroLiteralToken -- | ""false""
   | ""fn""
   | ""for""
   | ""if""
   | ""impl""
   | ""in""
   | ""let""
   | ""loop""
   | ""match""
   | ""mod""
   | ""move""
   | ""mut""
   | ""pub""
   | ""ref""
   | ""return""
   | ""self""
   | ""Self""
   | ""static""
   | ""struct""
   | ""super""
   | ""trait""
   ### part of macroLiteralToken -- | ""true""
   | ""type""
   | ""unsafe""
   | ""use""
   | ""where""
   | ""while""

   # 2018+
   | ""async""
   | ""await""
   | ""dyn""
   # reserved
   | ""abstract""
   | ""become""
   | ""box""
   | ""do""
   | ""final""
   | ""macro""
   | ""override""
   | ""priv""
   | ""typeof""
   | ""unsized""
   | ""virtual""
   | ""yield""
   | ""try""
   | ""union""
   | ""'static""
   ;
macroIdentifierLikeToken
   : keyword
   | identifier
   | ""'_""
   | ""$crate""
   | <LIFETIME_OR_LABEL>
   ;
macroLiteralToken
   : literalExpression
   ;
# macroDelimiterToken: '{' | '}' | '[' | ']' | '(' | ')';
macroPunctuationToken
   : ""-""
   #| '+' | '*'
   | ""/""
   | ""%""
   | ""^""
   | ""!""
   | <amp>
   | ""|""
   | ""&&""
   | ""||""
   # already covered by '<' and '>' in macro | shl | shr
   | ""<<""	###
   | "">>""	###
   | "">>>""###
   | ""+=""
   | ""-=""
   | ""*=""
   | ""/=""
   | ""%=""
   | ""^=""
   | ""&=""
   | ""|=""
   | ""<<=""
   | "">>=""
   | ""=""
   | ""==""
   | ""!=""
   | <gt>
   | <lt>
   | "">=""
   | ""<=""
   | ""@""
   | ""_""
   | "".""
   | ""..""
   | ""...""
   | ""..=""
   | "",""
   | "";""
   | "":"" 'colon'
   | ""::""
   | ""->""
   | ""=>""
   | ""#""
   #| '$' | '?'
   ;

# LA can be removed, legal rust code still pass but the cost is `let c = a < < b` will pass... i hope antlr5 can add
# some new syntax? dsl? for these stuff so i needn't write it in (at least) 5 language"
]

{ #category : #'file types' }
RustParser class >> fileExtension [
	^ '.rs'
]

{ #category : #generated }
RustParser class >> reduceTable [
^#(
	#(133 0 #reduceActionForinnerAttribute__attr__1: 6917121 false) 
	#(174 0 #reduceActionFor__extern___externToken__abi__abi____1: 12184577 false) 
	#(180 0 #reduceActionForinnerAttribute__attr__1: 12475393 false) 
	#(132 1 #reduceActionForcrate1: 6884353 false) 
	#(364 1 #liftFirstValue: 37309445 false) 
	#(388 1 #liftFirstValue: 39774212 false) 
	#(387 1 #reduceActionForvisibility6: 39533574 false) 
	#(364 1 #liftFirstValue: 37309444 false) 
	#(173 1 #reduceActionFor__extern___externToken__abi__abi___1: 12184577 false) 
	#(339 0 #reduceActionForfunctionTypeQualifiers1: 35637249 false) 
	#(388 1 #liftFirstValue: 39774211 false) 
	#(387 1 #reduceActionForvisibility1: 39533569 false) 
	#(364 1 #liftFirstValue: 37309443 false) 
	#(364 1 #liftFirstValue: 37309442 false) 
	#(388 1 #liftFirstValue: 39774209 false) 
	#(388 1 #liftFirstValue: 39774210 false) 
	#(142 1 #reduceActionFormacroInvocationSemi2: 7880706 false) 
	#(161 1 #liftFirstValue: 11011073 false) 
	#(161 1 #liftFirstValue: 11011074 false) 
	#(158 1 #reduceActionForitem1: 10180609 false) 
	#(158 1 #reduceActionForitem1: 10180610 false) 
	#(160 1 #reduceActionForvisItem1: 10257409 false) 
	#(160 1 #reduceActionForvisItem3: 10257411 false) 
	#(160 1 #reduceActionForvisItem5: 10257413 false) 
	#(160 1 #reduceActionForvisItem7: 10257415 false) 
	#(174 1 #reduceActionFor__extern___externToken__abi__abi____2: 12184578 false) 
	#(172 1 #reduceActionForfunctionQualifiers1: 12063745 false) 
	#(160 1 #reduceActionForvisItem9: 10257417 false) 
	#(160 1 #reduceActionForvisItem11: 10257419 false) 
	#(187 1 #reduceActionFor__extern___externToken__abi__abi____2: 13153281 false) 
	#(187 1 #reduceActionForstruct2: 13153282 false) 
	#(160 1 #reduceActionForvisItem13: 10257421 false) 
	#(160 1 #reduceActionForvisItem15: 10257423 false) 
	#(160 1 #reduceActionForvisItem17: 10257425 false) 
	#(160 1 #reduceActionForvisItem19: 10257427 false) 
	#(160 1 #reduceActionForvisItem21: 10257429 false) 
	#(160 1 #reduceActionForvisItem23: 10257431 false) 
	#(160 1 #reduceActionForvisItem25: 10257433 false) 
	#(217 1 #reduceActionForimplementation1: 15513601 false) 
	#(217 1 #reduceActionForimplementation2: 15513602 false) 
	#(160 1 #reduceActionForvisItem27: 10257435 false) 
	#(159 1 #reduceActionForouterAttribute__attr__1: 10190849 false) 
	#(361 1 #reduceActionForsimplePath1: 37200897 false) 
	#(364 1 #liftFirstValue: 37309441 false) 
	#(246 1 #reduceActionForexpressionWithoutBlock42: 19385386 false) 
	#(242 1 #reduceActionForstatement1: 18785281 false) 
	#(369 1 #liftFirstValue: 37650434 false) 
	#(246 1 #reduceActionForexpressionWithoutBlock61: 19385405 false) 
	#(246 1 #reduceActionForexpressionWithoutBlock57: 19385401 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347082 false) 
	#(246 1 #reduceActionForexpressionWithoutBlock65: 19385409 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347081 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347073 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347074 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347076 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347077 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347078 false) 
	#(250 1 #reduceActionForliteralExpression10: 25742337 false) 
	#(249 1 #reduceActionForliteralExpression10: 25674753 false) 
	#(246 1 #liftFirstValue: 19385418 false) 
	#(135 1 #liftFirstValue: 6963202 false) 
	#(135 1 #liftFirstValue: 6963201 false) 
	#(242 1 #liftFirstValue: 18785285 false) 
	#(242 1 #reduceActionForstatement2: 18785282 false) 
	#(242 1 #liftFirstValue: 18785283 false) 
	#(242 1 #reduceActionForstatement4: 18785284 false) 
	#(245 1 #liftFirstValue: 19259393 false) 
	#(244 1 #reduceActionFor__extern___externToken__abi__abi___1: 19129346 false) 
	#(245 1 #liftFirstValue: 19259394 false) 
	#(246 1 #liftFirstValue: 19385346 false) 
	#(248 1 #liftFirstValue: 25347080 false) 
	#(248 1 #liftFirstValue: 25347079 false) 
	#(246 1 #liftFirstValue: 19385347 false) 
	#(247 1 #liftFirstValue: 25055234 false) 
	#(247 1 #liftFirstValue: 25055235 false) 
	#(247 1 #liftFirstValue: 25055236 false) 
	#(246 1 #liftFirstValue: 19385416 false) 
	#(264 1 #liftFirstValue: 26653697 false) 
	#(264 1 #liftFirstValue: 26653698 false) 
	#(246 1 #liftFirstValue: 19385417 false) 
	#(247 1 #liftFirstValue: 25055237 false) 
	#(280 1 #reduceActionForloopExpression1: 28599297 false) 
	#(280 1 #reduceActionForloopExpression3: 28599299 false) 
	#(280 1 #reduceActionForloopExpression5: 28599301 false) 
	#(280 1 #reduceActionForloopExpression7: 28599303 false) 
	#(247 1 #liftFirstValue: 25055238 false) 
	#(247 1 #liftFirstValue: 25055239 false) 
	#(247 1 #liftFirstValue: 25055240 false) 
	#(369 1 #liftFirstValue: 37650433 false) 
	#(251 1 #liftFirstValue: 25824257 false) 
	#(365 1 #reduceActionForpathInExpression1: 37439489 false) 
	#(368 1 #reduceActionForpathExprSegment1: 37559297 false) 
	#(251 1 #liftFirstValue: 25824258 false) 
	#(248 1 #reduceActionForliteralExpression10: 25347075 false) 
	#(132 2 #reduceActionForcrate3: 6884355 false) 
	#(132 2 #reduceActionForcrate2: 6884354 false) 
	#(134 1 #reduceActionForitem_1: 6940673 false) 
	#(133 2 #reduceActionForinnerAttribute__attr__2: 6917122 false) 
	#(361 2 #reduceActionForsimplePath3: 37200899 false) 
	#(172 2 #reduceActionForfunctionQualifiers3: 12063747 false) 
	#(172 2 #reduceActionForfunctionQualifiers5: 12063749 false) 
	#(172 2 #reduceActionForfunctionQualifiers9: 12063753 false) 
	#(175 1 #liftFirstValue: 12246017 false) 
	#(175 1 #liftFirstValue: 12246019 false) 
	#(173 2 #reduceActionFor__extern___externToken__abi__abi___2: 12184578 false) 
	#(175 1 #liftFirstValue: 12246018 false) 
	#(330 1 #reduceActionForneverType1: 34833409 false) 
	#(360 1 #liftFirstValue: 37127171 false) 
	#(360 1 #liftFirstValue: 37127170 false) 
	#(351 1 #reduceActionForinferredType1: 36630529 false) 
	#(339 1 #reduceActionForpathExprSegment1: 35637250 false) 
	#(339 1 #reduceActionForfunctionTypeQualifiers4: 35637252 false) 
	#(360 1 #liftFirstValue: 37127169 false) 
	#(328 1 #liftFirstValue: 34452493 false) 
	#(326 1 #liftFirstValue: 34287617 false) 
	#(328 1 #liftFirstValue: 34452481 false) 
	#(328 1 #liftFirstValue: 34452485 false) 
	#(328 1 #liftFirstValue: 34452484 false) 
	#(328 1 #liftFirstValue: 34452488 false) 
	#(328 1 #liftFirstValue: 34452489 false) 
	#(328 1 #liftFirstValue: 34452487 false) 
	#(328 1 #liftFirstValue: 34452486 false) 
	#(328 1 #liftFirstValue: 34452492 false) 
	#(326 1 #liftFirstValue: 34287619 false) 
	#(328 1 #liftFirstValue: 34452482 false) 
	#(326 1 #liftFirstValue: 34287618 false) 
	#(328 1 #liftFirstValue: 34452490 false) 
	#(347 1 #reduceActionFortraitObjectType1: 36295681 false) 
	#(354 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 36733953 false) 
	#(348 1 #reduceActionFortraitObjectTypeOneBound1: 36362241 false) 
	#(355 1 #liftFirstValue: 36793346 false) 
	#(355 1 #reduceActionFortypeParamBound1: 36793345 false) 
	#(382 1 #reduceActionFortypePathSegment1: 39240705 false) 
	#(328 1 #liftFirstValue: 34452491 false) 
	#(356 1 #reduceActionFortraitBound1: 36869121 false) 
	#(328 1 #liftFirstValue: 34452483 false) 
	#(381 1 #reduceActionFortypePath1: 39143425 false) 
	#(211 0 #nil 15171585 false) 
	#(172 2 #reduceActionForfunctionQualifiers2: 12063746 false) 
	#(167 1 #reduceActionForuseTree1: 11560961 false) 
	#(167 1 #reduceActionForuseTree10: 11560970 false) 
	#(142 2 #reduceActionFormacroInvocationSemi1: 7880705 false) 
	#(158 2 #reduceActionForitem3: 10180611 false) 
	#(158 2 #reduceActionForitem3: 10180612 false) 
	#(159 2 #reduceActionForinnerAttribute__attr__2: 10190850 false) 
	#(363 1 #reduceActionFor_______separator__simplePathSegment__1: 37255169 false) 
	#(361 2 #reduceActionForsimplePath2: 37200898 false) 
	#(160 2 #reduceActionForvisItem2: 10257410 false) 
	#(160 2 #reduceActionForvisItem4: 10257412 false) 
	#(160 2 #reduceActionForvisItem6: 10257414 false) 
	#(160 2 #reduceActionForvisItem8: 10257416 false) 
	#(160 2 #reduceActionForvisItem10: 10257418 false) 
	#(160 2 #reduceActionForvisItem12: 10257420 false) 
	#(160 2 #reduceActionForvisItem14: 10257422 false) 
	#(160 2 #reduceActionForvisItem16: 10257424 false) 
	#(160 2 #reduceActionForvisItem18: 10257426 false) 
	#(160 2 #reduceActionForvisItem20: 10257428 false) 
	#(160 2 #reduceActionForvisItem22: 10257430 false) 
	#(160 2 #reduceActionForvisItem24: 10257432 false) 
	#(160 2 #reduceActionForvisItem26: 10257434 false) 
	#(160 2 #reduceActionForvisItem28: 10257436 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock19: 19385363 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock13: 19385357 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock13: 19385359 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock19: 19385361 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock19: 19385362 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock43: 19385387 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock43: 19385388 false) 
	#(365 2 #reduceActionForpathInExpression3: 37439491 false) 
	#(255 2 #reduceActionForasyncBlockExpression1: 26133505 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock75: 19385419 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock63: 19385407 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock62: 19385406 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock59: 19385403 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock58: 19385402 false) 
	#(304 1 #reduceActionForrestPattern1: 32153601 false) 
	#(303 1 #reduceActionForwildcardPattern1: 32104449 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398914 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398913 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398915 false) 
	#(307 1 #reduceActionForliteralExpression10: 32471041 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398917 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398919 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398916 false) 
	#(307 1 #reduceActionForliteralExpression10: 32471042 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398920 false) 
	#(300 1 #liftFirstValue: 31031309 false) 
	#(301 1 #liftFirstValue: 31398923 false) 
	#(307 1 #liftFirstValue: 32471045 false) 
	#(301 1 #liftFirstValue: 31398921 false) 
	#(307 1 #liftFirstValue: 32471043 false) 
	#(298 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 30924801 false) 
	#(299 1 #liftFirstValue: 30970881 false) 
	#(300 1 #liftFirstValue: 31031297 false) 
	#(300 1 #liftFirstValue: 31031298 false) 
	#(300 1 #liftFirstValue: 31031299 false) 
	#(300 1 #liftFirstValue: 31031300 false) 
	#(299 1 #liftFirstValue: 30970882 false) 
	#(300 1 #liftFirstValue: 31031301 false) 
	#(300 1 #liftFirstValue: 31031302 false) 
	#(300 1 #liftFirstValue: 31031303 false) 
	#(300 1 #liftFirstValue: 31031304 false) 
	#(300 1 #liftFirstValue: 31031305 false) 
	#(300 1 #liftFirstValue: 31031306 false) 
	#(300 1 #liftFirstValue: 31031307 false) 
	#(300 1 #liftFirstValue: 31031308 false) 
	#(325 1 #liftFirstValue: 34207745 false) 
	#(307 1 #liftFirstValue: 32471047 false) 
	#(325 1 #liftFirstValue: 34207746 false) 
	#(307 1 #liftFirstValue: 32471048 false) 
	#(302 1 #reduceActionForidentifierPattern1: 31989761 false) 
	#(301 1 #reduceActionForliteralExpression10: 31398918 false) 
	#(294 1 #reduceActionFor__extern___externToken__abi__abi____2: 30622721 false) 
	#(281 2 #reduceActionFor__extern___externToken__abi__abi___2: 28877825 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock66: 19385410 false) 
	#(256 2 #reduceActionForunsafeBlockExpression1: 26242049 false) 
	#(278 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 28441601 false) 
	#(275 2 #reduceActionForclosureExpression1: 28170241 false) 
	#(285 2 #reduceActionFor__extern___externToken__abi__abi___2: 29368321 false) 
	#(180 2 #reduceActionForinnerAttribute__attr__2: 12475394 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock1: 19385345 false) 
	#(247 2 #reduceActionForexpressionWithoutBlock1: 25055233 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock40: 19385384 false) 
	#(246 2 #reduceActionForexpressionWithoutBlock12: 19385356 false) 
	#(244 2 #reduceActionFor__extern___externToken__abi__abi___2: 19129345 false) 
	#(280 2 #reduceActionForloopExpression2: 28599298 false) 
	#(280 2 #reduceActionForloopExpression4: 28599300 false) 
	#(280 2 #reduceActionForloopExpression6: 28599302 false) 
	#(280 2 #reduceActionForloopExpression8: 28599304 false) 
	#(367 1 #reduceActionFor_______separator__pathExprSegment__1: 37496833 false) 
	#(365 2 #reduceActionForpathInExpression2: 37439490 false) 
	#(376 2 #reduceActionForqualifiedPathInExpression1: 38839297 false) 
	#(132 3 #reduceActionForcrate4: 6884356 false) 
	#(134 2 #reduceActionForitem_2: 6940674 false) 
	#(240 1 #reduceActionForpathExprSegment1: 18092033 false) 
	#(361 3 #reduceActionForsimplePath4: 37200900 false) 
	#(172 3 #reduceActionForfunctionQualifiers4: 12063748 false) 
	#(172 3 #reduceActionForfunctionQualifiers7: 12063751 false) 
	#(172 3 #reduceActionForfunctionQualifiers6: 12063750 false) 
	#(172 3 #reduceActionForfunctionQualifiers11: 12063755 false) 
	#(172 3 #reduceActionForfunctionQualifiers13: 12063757 false) 
	#(172 3 #reduceActionForfunctionQualifiers10: 12063754 false) 
	#(232 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 17119233 false) 
	#(164 1 #liftFirstValue: 11368450 false) 
	#(164 1 #liftFirstValue: 11368449 false) 
	#(331 2 #reduceActionFortupleType1: 34880513 false) 
	#(333 1 #reduceActionFor_______separator__simplePathSegment__1: 34913281 false) 
	#(381 2 #reduceActionFortypePath3: 39143427 false) 
	#(356 2 #reduceActionFortraitBound3: 36869123 false) 
	#(347 2 #reduceActionFortraitObjectType2: 36295682 false) 
	#(348 2 #reduceActionFortraitObjectTypeOneBound2: 36362242 false) 
	#(339 2 #reduceActionForfunctionTypeQualifiers3: 35637251 false) 
	#(236 2 #reduceActionForforLifetimes1: 17464321 false) 
	#(349 2 #reduceActionForimplTraitType1: 36459521 false) 
	#(339 2 #reduceActionForfunctionTypeQualifiers5: 35637253 false) 
	#(223 2 #reduceActionForgenericParams1: 16463873 false) 
	#(225 1 #reduceActionFor_______separator__simplePathSegment__1: 16494593 false) 
	#(336 2 #reduceActionForreferenceType1: 35222529 false) 
	#(327 1 #liftFirstValue: 34372609 false) 
	#(327 1 #liftFirstValue: 34372610 false) 
	#(356 2 #reduceActionFortraitBound2: 36869122 false) 
	#(352 2 #reduceActionFortypeParamBounds1: 36684801 false) 
	#(382 2 #reduceActionFortypePathSegment4: 39240708 false) 
	#(382 2 #reduceActionFortypePathSegment2: 39240706 false) 
	#(382 2 #reduceActionFortypePathSegment3: 39240707 false) 
	#(380 1 #reduceActionFor_______separator__typePathSegment__1: 39095297 false) 
	#(378 2 #reduceActionForqualifiedPathInType1: 39051265 false) 
	#(381 2 #reduceActionFortypePath2: 39143426 false) 
	#(162 3 #reduceActionFormodule1: 11085825 false) 
	#(188 3 #reduceActionForstructStruct3: 13201411 false) 
	#(210 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 15152129 false) 
	#(216 0 #reduceActionFor______colon__typeParamBounds___1: 15431681 false) 
	#(211 1 #liftFirstValue: 15171586 false) 
	#(186 3 #reduceActionFortypeAlias1: 12968961 false) 
	#(167 2 #reduceActionForuseTree4: 11560964 false) 
	#(167 2 #reduceActionForuseTree2: 11560962 false) 
	#(169 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 11666433 false) 
	#(166 3 #reduceActionForuseDeclaration1: 11487233 false) 
	#(137 0 #reduceActionForinnerAttribute__attr__1: 7127041 false) 
	#(362 2 #reduceActionFor__extern___externToken__abi__abi___2: 37255169 false) 
	#(363 2 #reduceActionFor_______separator__simplePathSegment__2: 37255170 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock14: 19385358 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock14: 19385360 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock70: 19385414 false) 
	#(262 1 #reduceActionFor_______separator__simplePathSegment__1: 26540033 false) 
	#(260 1 #reduceActionFor__extern___externToken__abi__abi____2: 26520577 false) 
	#(365 3 #reduceActionForpathInExpression4: 37439492 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock68: 19385412 false) 
	#(259 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 26383361 false) 
	#(255 3 #reduceActionForasyncBlockExpression2: 26133506 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock64: 19385408 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock60: 19385404 false) 
	#(308 2 #reduceActionForreferencePattern3: 32817155 false) 
	#(320 2 #reduceActionFortuplePattern1: 33761281 false) 
	#(321 1 #reduceActionFortuplePatternItems2: 33843202 false) 
	#(301 2 #reduceActionForexpressionWithoutBlock19: 31398924 false) 
	#(307 2 #reduceActionForexpressionWithoutBlock19: 32471046 false) 
	#(301 2 #reduceActionForexpressionWithoutBlock19: 31398922 false) 
	#(307 2 #reduceActionForexpressionWithoutBlock19: 32471044 false) 
	#(323 2 #reduceActionForslicePattern1: 34046977 false) 
	#(324 1 #reduceActionForslicePatternItems1: 34132993 false) 
	#(300 2 #reduceActionForpatternWithoutRange14: 31031310 false) 
	#(302 2 #reduceActionForidentifierPattern3: 31989763 false) 
	#(302 2 #reduceActionForidentifierPattern5: 31989765 false) 
	#(308 2 #reduceActionForreferencePattern3: 32817153 false) 
	#(296 2 #reduceActionFortypeParamBounds1: 30873601 false) 
	#(305 2 #reduceActionForrangePattern2: 32197634 false) 
	#(286 3 #reduceActionForifExpression1: 29440001 false) 
	#(275 3 #reduceActionForclosureExpression7: 28170247 false) 
	#(282 3 #reduceActionForuseDeclaration1: 28955649 false) 
	#(252 3 #reduceActionForblockExpression1: 25908225 false) 
	#(254 1 #reduceActionForouterAttribute__attr__1: 26025985 false) 
	#(253 1 #reduceActionForouterAttribute__attr__1: 26009603 false) 
	#(253 1 #reduceActionFor__extern___externToken__abi__abi____2: 26009601 false) 
	#(275 3 #reduceActionForclosureExpression3: 28170243 false) 
	#(279 2 #reduceActionForclosureParam1: 28500993 false) 
	#(276 2 #reduceActionFortypeParamBounds1: 28392449 false) 
	#(377 3 #reduceActionForqualifiedPathType1: 38950913 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385377 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385367 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385395 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385382 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385396 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385365 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385393 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385368 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385391 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385369 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385392 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock8: 19385352 false) 
	#(263 1 #liftFirstValue: 26604545 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock7: 19385351 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock6: 19385350 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock41: 19385385 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock41: 19385389 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385366 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385394 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385370 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385399 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385381 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385390 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385376 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385380 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385371 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385400 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385372 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385374 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385398 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock20: 19385364 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock51: 19385397 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385383 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385375 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock9: 19385353 false) 
	#(273 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 27379713 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385379 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385378 false) 
	#(246 3 #reduceActionForexpressionWithoutBlock33: 19385373 false) 
	#(271 3 #reduceActionForstructExprTuple1: 27298817 false) 
	#(366 2 #reduceActionFor_______separator__pathExprSegment_1: 37496833 false) 
	#(367 2 #reduceActionFor_______separator__pathExprSegment__2: 37496834 false) 
	#(368 3 #reduceActionForuseDeclaration1: 37559298 false) 
	#(239 4 #reduceActionForouterAttribute1: 17992705 false) 
	#(241 1 #reduceActionFor__extern___externToken__abi__abi___1: 18137089 false) 
	#(240 2 #reduceActionForattr2: 18092034 false) 
	#(172 4 #reduceActionForfunctionQualifiers8: 12063752 false) 
	#(172 4 #reduceActionForfunctionQualifiers12: 12063756 false) 
	#(172 4 #reduceActionForfunctionQualifiers15: 12063759 false) 
	#(172 4 #reduceActionForfunctionQualifiers14: 12063758 false) 
	#(230 2 #reduceActionForwhereClause1: 17080321 false) 
	#(198 4 #reduceActionForenumeration1: 13915137 false) 
	#(201 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 14089217 false) 
	#(163 4 #reduceActionForexternCrate1: 11256833 false) 
	#(220 4 #reduceActionForexternBlock1: 16030721 false) 
	#(222 1 #reduceActionForexternalItem1: 16192513 false) 
	#(222 1 #reduceActionForvisItem7: 16192519 false) 
	#(222 1 #reduceActionForvisItem19: 16192515 false) 
	#(221 1 #reduceActionForouterAttribute__attr__1: 16147457 false) 
	#(329 3 #reduceActionForparenthesizedType1: 34743297 false) 
	#(332 2 #reduceActionFor__extern___externToken__abi__abi___2: 34913281 false) 
	#(331 3 #reduceActionFortupleType2: 34880514 false) 
	#(333 2 #reduceActionFor_______separator__simplePathSegment__2: 34913282 false) 
	#(356 3 #reduceActionFortraitBound5: 36869125 false) 
	#(337 3 #reduceActionForrawPointerType2: 35324930 false) 
	#(337 3 #reduceActionForrawPointerType1: 35324929 false) 
	#(381 3 #reduceActionFortypePath4: 39143428 false) 
	#(356 3 #reduceActionFortraitBound4: 36869124 false) 
	#(335 3 #reduceActionForsliceType1: 35126273 false) 
	#(339 3 #reduceActionForfunctionTypeQualifiers6: 35637254 false) 
	#(227 1 #reduceActionForlifetimeParam1: 16730113 false) 
	#(226 2 #reduceActionForgenericParam1: 16584705 false) 
	#(226 2 #reduceActionForgenericParam1: 16584706 false) 
	#(226 2 #reduceActionForgenericParam1: 16584707 false) 
	#(228 1 #reduceActionFortypeParam1: 16849921 false) 
	#(225 2 #reduceActionFor_______separator__simplePathSegment__2: 16494594 false) 
	#(224 2 #reduceActionFor__extern___externToken__abi__abi___2: 16494593 false) 
	#(223 3 #reduceActionForgenericParams2: 16463874 false) 
	#(350 2 #reduceActionForimplTraitTypeOneBound1: 36525057 false) 
	#(336 3 #reduceActionForreferenceType2: 35222530 false) 
	#(336 3 #reduceActionForreferenceType3: 35222531 false) 
	#(352 3 #reduceActionFortypeParamBounds2: 36684802 false) 
	#(354 2 #reduceActionFor_______separator__simplePathSegment__2: 36733954 false) 
	#(383 2 #reduceActionFortypePathFn1: 39346177 false) 
	#(386 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 39479297 false) 
	#(382 3 #reduceActionFortypePathSegment5: 39240709 false) 
	#(382 3 #reduceActionFortypePathSegment6: 39240710 false) 
	#(370 2 #reduceActionForgenericArgs1: 37748737 false) 
	#(374 1 #liftFirstValue: 38310915 false) 
	#(374 1 #liftFirstValue: 38310913 false) 
	#(373 1 #liftFirstValue: 38198274 false) 
	#(373 1 #reduceActionFortypeParamBound1: 38198273 false) 
	#(374 1 #reduceActionForgenericArgsConst4: 38310916 false) 
	#(372 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 38124545 false) 
	#(373 1 #liftFirstValue: 38198275 false) 
	#(373 1 #liftFirstValue: 38198276 false) 
	#(379 2 #reduceActionFor_______separator__typePathSegment_1: 39095297 false) 
	#(380 2 #reduceActionFor_______separator__typePathSegment__2: 39095298 false) 
	#(143 4 #reduceActionFormacroRulesDefinition1: 8094721 false) 
	#(387 4 #reduceActionForvisibility2: 39533570 false) 
	#(387 4 #reduceActionForvisibility3: 39533571 false) 
	#(387 4 #reduceActionForvisibility4: 39533572 false) 
	#(196 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 13766657 false) 
	#(188 4 #reduceActionForstructStruct1: 13201409 false) 
	#(192 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 13555713 false) 
	#(188 4 #reduceActionForstructStruct9: 13201417 false) 
	#(188 4 #reduceActionForstructStruct6: 13201414 false) 
	#(210 1 #reduceActionFor__extern___externToken__abi__abi____2: 15152130 false) 
	#(215 1 #reduceActionFor______colon__typeParamBounds__1: 15431681 false) 
	#(216 1 #reduceActionFor__extern___externToken__abi__abi____2: 15431682 false) 
	#(186 4 #reduceActionFortypeAlias9: 12968969 false) 
	#(186 4 #reduceActionFortypeAlias3: 12968963 false) 
	#(162 4 #reduceActionFormodule4: 11085828 false) 
	#(167 3 #reduceActionForuseTree5: 11560965 false) 
	#(170 0 #nil 11696129 false) 
	#(167 3 #reduceActionForuseTree7: 11560967 false) 
	#(167 3 #reduceActionForuseTree12: 11560972 false) 
	#(167 3 #reduceActionForuseTree12: 11560971 false) 
	#(246 4 #reduceActionForexpressionWithoutBlock67: 19385411 false) 
	#(261 2 #reduceActionFor__extern___externToken__abi__abi___2: 26540033 false) 
	#(246 4 #reduceActionForexpressionWithoutBlock71: 19385415 false) 
	#(260 2 #reduceActionFortupleElements2: 26520578 false) 
	#(262 2 #reduceActionFor_______separator__simplePathSegment__2: 26540034 false) 
	#(257 2 #reduceActionFortypeParamBounds1: 26342401 false) 
	#(246 4 #reduceActionForexpressionWithoutBlock69: 19385413 false) 
	#(308 3 #reduceActionForreferencePattern4: 32817156 false) 
	#(322 3 #reduceActionForgroupedPattern1: 33974273 false) 
	#(321 2 #reduceActionFortuplePatternItems1: 33843201 false) 
	#(319 1 #reduceActionFor______comma__pattern__1: 33718273 false) 
	#(321 2 #reduceActionFortuplePatternItems3: 33843203 false) 
	#(320 3 #reduceActionFortuplePattern2: 33761282 false) 
	#(324 2 #reduceActionForslicePatternItems2: 34132994 false) 
	#(324 2 #reduceActionForslicePatternItems3: 34132995 false) 
	#(323 3 #reduceActionForslicePattern2: 34046978 false) 
	#(302 3 #reduceActionForidentifierPattern7: 31989767 false) 
	#(296 3 #reduceActionForpattern2: 30873602 false) 
	#(308 3 #reduceActionForreferencePattern4: 32817154 false) 
	#(298 2 #reduceActionFor_______separator__simplePathSegment__2: 30924802 false) 
	#(306 3 #reduceActionForobsoleteRangePattern1: 32355329 false) 
	#(305 3 #reduceActionForobsoleteRangePattern1: 32197633 false) 
	#(316 3 #reduceActionFortupleStructPattern1: 33575937 false) 
	#(317 1 #reduceActionForslicePatternItems1: 33687553 false) 
	#(309 3 #reduceActionForstructPattern1: 32926721 false) 
	#(310 1 #reduceActionFor__extern___externToken__abi__abi____2: 33038337 false) 
	#(313 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 33227777 false) 
	#(310 1 #reduceActionForstructPatternElements4: 33038340 false) 
	#(302 3 #reduceActionForidentifierPattern2: 31989762 false) 
	#(291 0 #reduceActionFor_matchArm__arm________arrow__matchArmExpression__1: 30244865 false) 
	#(275 4 #reduceActionForclosureExpression9: 28170249 false) 
	#(252 4 #reduceActionForblockExpression2: 25908226 false) 
	#(254 2 #reduceActionForinnerAttribute__attr__2: 26025986 false) 
	#(253 2 #reduceActionForinnerAttribute__attr__2: 26009602 false) 
	#(275 4 #reduceActionForclosureExpression5: 28170245 false) 
	#(276 3 #reduceActionFortypeParamBounds2: 28392450 false) 
	#(278 2 #reduceActionFor_______separator__simplePathSegment__2: 28441602 false) 
	#(275 4 #reduceActionForclosureExpression2: 28170242 false) 
	#(243 4 #reduceActionForletStatement1: 18965505 false) 
	#(274 2 #reduceActionFortypeParamBounds1: 28075009 false) 
	#(246 4 #reduceActionForexpressionWithoutBlock10: 19385354 false) 
	#(246 4 #reduceActionForexpressionWithoutBlock11: 19385355 false) 
	#(265 4 #reduceActionForstructExprStruct1: 26774529 false) 
	#(268 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 26970113 false) 
	#(241 2 #reduceActionForattrInput2: 18137090 false) 
	#(207 5 #reduceActionForconstantItem3: 14686211 false) 
	#(207 5 #reduceActionForconstantItem3: 14686209 false) 
	#(172 5 #reduceActionForfunctionQualifiers16: 12063760 false) 
	#(232 2 #reduceActionFor_______separator__simplePathSegment__2: 17119234 false) 
	#(230 3 #reduceActionForwhereClause2: 17080322 false) 
	#(233 1 #liftFirstValue: 17197057 false) 
	#(233 1 #liftFirstValue: 17197058 false) 
	#(202 2 #reduceActionForenumItem1: 14139393 false) 
	#(198 5 #reduceActionForenumeration2: 13915138 false) 
	#(199 2 #reduceActionFortypeParamBounds1: 14057473 false) 
	#(198 5 #reduceActionForenumeration5: 13915141 false) 
	#(198 5 #reduceActionForenumeration3: 13915139 false) 
	#(165 2 #reduceActionFor__extern___externToken__abi__abi___2: 11411458 false) 
	#(165 2 #reduceActionFor__extern___externToken__abi__abi___2: 11411457 false) 
	#(163 5 #reduceActionForexternCrate2: 11256834 false) 
	#(222 2 #reduceActionForexternalItem2: 16192514 false) 
	#(222 2 #reduceActionForexternalItem9: 16192521 false) 
	#(222 2 #reduceActionForexternalItem5: 16192517 false) 
	#(220 5 #reduceActionForexternBlock2: 16030722 false) 
	#(221 2 #reduceActionForinnerAttribute__attr__2: 16147458 false) 
	#(222 2 #reduceActionForvisItem8: 16192520 false) 
	#(222 2 #reduceActionForvisItem20: 16192516 false) 
	#(220 5 #reduceActionForexternBlock3: 16030723 false) 
	#(356 4 #reduceActionFortraitBound7: 36869127 false) 
	#(356 4 #reduceActionFortraitBound6: 36869126 false) 
	#(331 4 #reduceActionFortupleType3: 34880515 false) 
	#(359 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 37054465 false) 
	#(228 2 #reduceActionFortypeParam3: 16849923 false) 
	#(223 4 #reduceActionForgenericParams4: 16463876 false) 
	#(223 4 #reduceActionForgenericParams3: 16463875 false) 
	#(336 4 #reduceActionForreferenceType4: 35222532 false) 
	#(218 5 #reduceActionForinherentImpl1: 15567873 false) 
	#(237 1 #reduceActionForexternalItem1: 17527809 false) 
	#(237 1 #reduceActionForvisItem7: 17527819 false) 
	#(237 1 #reduceActionForvisItem9: 17527811 false) 
	#(237 1 #reduceActionForvisItem17: 17527815 false) 
	#(212 1 #reduceActionForouterAttribute__attr__1: 15233025 false) 
	#(338 4 #reduceActionForbareFunctionType1: 35441665 false) 
	#(341 1 #reduceActionForfunctionParametersMaybeNamedVariadic1: 35801089 false) 
	#(344 0 #reduceActionFor______comma__maybeNamedParam__1: 35973121 false) 
	#(341 1 #reduceActionFor__extern___externToken__abi__abi____2: 35801090 false) 
	#(353 2 #reduceActionFor__extern___externToken__abi__abi___2: 36733953 false) 
	#(384 2 #reduceActionFortypeParamBounds1: 39446529 false) 
	#(383 3 #reduceActionFortypePathFn3: 39346179 false) 
	#(374 2 #reduceActionForexpressionWithoutBlock19: 38310914 false) 
	#(150 0 #reduceActionForinnerAttribute__attr__1: 8582145 false) 
	#(147 0 #reduceActionFor______plus__typeParamBound__typeBound___1: 8414209 false) 
	#(162 5 #reduceActionFormodule2: 11085826 false) 
	#(387 5 #reduceActionForvisibility5: 39533573 false) 
	#(208 5 #reduceActionForstaticItem1: 14855169 false) 
	#(189 5 #reduceActionFortupleStruct1: 13362177 false) 
	#(197 2 #reduceActionFortupleField1: 13819905 false) 
	#(194 2 #reduceActionFortypeParamBounds1: 13729793 false) 
	#(188 5 #reduceActionForstructStruct2: 13201410 false) 
	#(190 2 #reduceActionFortypeParamBounds1: 13516801 false) 
	#(188 5 #reduceActionForstructStruct7: 13201415 false) 
	#(188 5 #reduceActionForstructStruct12: 13201420 false) 
	#(188 5 #reduceActionForstructStruct4: 13201412 false) 
	#(215 2 #reduceActionFor______colon__typeParamBounds__2: 15431682 false) 
	#(213 0 #reduceActionForinnerAttribute__attr__1: 15233025 false) 
	#(186 5 #reduceActionFortypeAlias5: 12968965 false) 
	#(186 5 #reduceActionFortypeAlias2: 12968962 false) 
	#(186 5 #reduceActionFortypeAlias11: 12968971 false) 
	#(206 5 #reduceActionForunion1: 14538753 false) 
	#(220 5 #reduceActionForexternBlock5: 16030725 false) 
	#(170 1 #liftFirstValue: 11696130 false) 
	#(169 2 #reduceActionFor_______separator__simplePathSegment__2: 11666434 false) 
	#(167 4 #reduceActionForuseTree8: 11560968 false) 
	#(176 1 #reduceActionForfunctionParameters1: 12318721 false) 
	#(178 0 #reduceActionFor______comma__functionParam__1: 12411905 false) 
	#(392 1 #liftFirstValue: 40886277 false) 
	#(392 1 #liftFirstValue: 40886297 false) 
	#(392 1 #liftFirstValue: 40886314 false) 
	#(141 1 #reduceActionFortokenTreeToken5: 7657477 false) 
	#(390 1 #liftFirstValue: 40669188 false) 
	#(392 1 #liftFirstValue: 40886275 false) 
	#(392 1 #liftFirstValue: 40886289 false) 
	#(392 1 #liftFirstValue: 40886280 false) 
	#(392 1 #liftFirstValue: 40886291 false) 
	#(390 1 #liftFirstValue: 40669187 false) 
	#(389 1 #liftFirstValue: 39879731 false) 
	#(138 5 #reduceActionFormacroInvocationWithoutBlock1: 7174145 false) 
	#(156 1 #liftFirstValue: 9449473 false) 
	#(392 1 #liftFirstValue: 40886287 false) 
	#(156 1 #liftFirstValue: 9449474 false) 
	#(392 1 #liftFirstValue: 40886285 false) 
	#(392 1 #liftFirstValue: 40886308 false) 
	#(392 1 #liftFirstValue: 40886273 false) 
	#(392 1 #liftFirstValue: 40886286 false) 
	#(392 1 #liftFirstValue: 40886312 false) 
	#(392 1 #liftFirstValue: 40886304 false) 
	#(392 1 #liftFirstValue: 40886305 false) 
	#(392 1 #liftFirstValue: 40886306 false) 
	#(392 1 #liftFirstValue: 40886307 false) 
	#(392 1 #liftFirstValue: 40886274 false) 
	#(392 1 #liftFirstValue: 40886288 false) 
	#(392 1 #liftFirstValue: 40886310 false) 
	#(392 1 #liftFirstValue: 40886311 false) 
	#(392 1 #liftFirstValue: 40886309 false) 
	#(392 1 #liftFirstValue: 40886282 false) 
	#(392 1 #liftFirstValue: 40886293 false) 
	#(392 1 #liftFirstValue: 40886301 false) 
	#(392 1 #liftFirstValue: 40886295 false) 
	#(392 1 #liftFirstValue: 40886296 false) 
	#(392 1 #liftFirstValue: 40886313 false) 
	#(392 1 #liftFirstValue: 40886300 false) 
	#(392 1 #liftFirstValue: 40886283 false) 
	#(392 1 #liftFirstValue: 40886294 false) 
	#(392 1 #liftFirstValue: 40886284 false) 
	#(156 1 #liftFirstValue: 9449475 false) 
	#(392 1 #liftFirstValue: 40886302 false) 
	#(389 1 #liftFirstValue: 39879704 false) 
	#(392 1 #liftFirstValue: 40886276 false) 
	#(392 1 #liftFirstValue: 40886290 false) 
	#(392 1 #liftFirstValue: 40886303 false) 
	#(389 1 #liftFirstValue: 39879717 false) 
	#(389 1 #liftFirstValue: 39879681 false) 
	#(389 1 #liftFirstValue: 39879714 false) 
	#(389 1 #liftFirstValue: 39879715 false) 
	#(389 1 #liftFirstValue: 39879718 false) 
	#(389 1 #liftFirstValue: 39879719 false) 
	#(389 1 #liftFirstValue: 39879682 false) 
	#(389 1 #liftFirstValue: 39879683 false) 
	#(389 1 #liftFirstValue: 39879684 false) 
	#(389 1 #liftFirstValue: 39879685 false) 
	#(389 1 #liftFirstValue: 39879720 false) 
	#(389 1 #liftFirstValue: 39879716 false) 
	#(389 1 #liftFirstValue: 39879686 false) 
	#(389 1 #liftFirstValue: 39879687 false) 
	#(389 1 #liftFirstValue: 39879688 false) 
	#(389 1 #liftFirstValue: 39879721 false) 
	#(389 1 #liftFirstValue: 39879689 false) 
	#(389 1 #liftFirstValue: 39879690 false) 
	#(389 1 #liftFirstValue: 39879691 false) 
	#(389 1 #liftFirstValue: 39879692 false) 
	#(389 1 #liftFirstValue: 39879693 false) 
	#(389 1 #liftFirstValue: 39879694 false) 
	#(389 1 #liftFirstValue: 39879695 false) 
	#(389 1 #liftFirstValue: 39879722 false) 
	#(389 1 #liftFirstValue: 39879696 false) 
	#(389 1 #liftFirstValue: 39879697 false) 
	#(389 1 #liftFirstValue: 39879698 false) 
	#(389 1 #liftFirstValue: 39879699 false) 
	#(389 1 #liftFirstValue: 39879723 false) 
	#(389 1 #liftFirstValue: 39879724 false) 
	#(389 1 #liftFirstValue: 39879700 false) 
	#(389 1 #liftFirstValue: 39879701 false) 
	#(389 1 #liftFirstValue: 39879702 false) 
	#(389 1 #liftFirstValue: 39879703 false) 
	#(389 1 #liftFirstValue: 39879705 false) 
	#(389 1 #liftFirstValue: 39879706 false) 
	#(389 1 #liftFirstValue: 39879707 false) 
	#(389 1 #liftFirstValue: 39879708 false) 
	#(389 1 #liftFirstValue: 39879729 false) 
	#(389 1 #liftFirstValue: 39879709 false) 
	#(389 1 #liftFirstValue: 39879725 false) 
	#(389 1 #liftFirstValue: 39879730 false) 
	#(389 1 #liftFirstValue: 39879710 false) 
	#(389 1 #liftFirstValue: 39879726 false) 
	#(389 1 #liftFirstValue: 39879711 false) 
	#(389 1 #liftFirstValue: 39879727 false) 
	#(389 1 #liftFirstValue: 39879712 false) 
	#(389 1 #liftFirstValue: 39879713 false) 
	#(389 1 #liftFirstValue: 39879728 false) 
	#(392 1 #liftFirstValue: 40886279 false) 
	#(392 1 #liftFirstValue: 40886292 false) 
	#(392 1 #liftFirstValue: 40886281 false) 
	#(390 1 #liftFirstValue: 40669189 false) 
	#(392 1 #liftFirstValue: 40886299 false) 
	#(392 1 #liftFirstValue: 40886298 false) 
	#(392 1 #liftFirstValue: 40886278 false) 
	#(140 1 #liftFirstValue: 7584770 false) 
	#(137 2 #reduceActionForinnerAttribute__attr__2: 7127042 false) 
	#(140 1 #liftFirstValue: 7584769 false) 
	#(141 1 #reduceActionFortokenTreeToken5: 7657476 false) 
	#(391 1 #liftFirstValue: 40779777 false) 
	#(390 1 #liftFirstValue: 40669186 false) 
	#(390 1 #liftFirstValue: 40669185 false) 
	#(141 1 #reduceActionFortokenTreeToken5: 7657473 false) 
	#(141 1 #liftFirstValue: 7657474 false) 
	#(141 1 #reduceActionFortokenTreeToken5: 7657475 false) 
	#(138 5 #reduceActionFormacroInvocationWithoutBlock1: 7174146 false) 
	#(136 5 #reduceActionFormacroInvocationWithoutBlock1: 7053313 false) 
	#(257 3 #reduceActionForarrayElements3: 26342403 false) 
	#(257 3 #reduceActionFortypeParamBounds2: 26342402 false) 
	#(259 2 #reduceActionFor_______separator__simplePathSegment__2: 26383362 false) 
	#(318 2 #reduceActionFor______colon__typeParamBounds__2: 33718273 false) 
	#(321 3 #reduceActionFortuplePatternItems4: 33843204 false) 
	#(319 2 #reduceActionFor______comma__pattern__2: 33718274 false) 
	#(324 3 #reduceActionForslicePatternItems4: 34132996 false) 
	#(302 4 #reduceActionForidentifierPattern4: 31989764 false) 
	#(302 4 #reduceActionForidentifierPattern6: 31989766 false) 
	#(284 5 #reduceActionForiteratorLoopExpression1: 29249537 false) 
	#(297 2 #reduceActionFor__extern___externToken__abi__abi___2: 30924801 false) 
	#(317 2 #reduceActionForslicePatternItems2: 33687554 false) 
	#(317 2 #reduceActionForslicePatternItems3: 33687555 false) 
	#(316 4 #reduceActionFortupleStructPattern2: 33575938 false) 
	#(315 2 #reduceActionForstructPatternEtCetera1: 33500161 false) 
	#(314 2 #reduceActionForstructPatternField3: 33275907 false) 
	#(309 4 #reduceActionForstructPattern2: 32926722 false) 
	#(310 2 #reduceActionForstructPatternElements2: 33038338 false) 
	#(311 2 #reduceActionFortypeParamBounds1: 33174529 false) 
	#(286 5 #reduceActionForifExpression2: 29440002 false) 
	#(286 5 #reduceActionForifExpression2: 29440003 false) 
	#(286 5 #reduceActionForifExpression2: 29440004 false) 
	#(288 5 #reduceActionFormatchExpression1: 30088193 false) 
	#(275 5 #reduceActionForclosureExpression11: 28170251 false) 
	#(275 5 #reduceActionForclosureExpression8: 28170248 false) 
	#(275 5 #reduceActionForclosureExpression4: 28170244 false) 
	#(279 4 #reduceActionForclosureParam2: 28500994 false) 
	#(277 2 #reduceActionFor__extern___externToken__abi__abi___2: 28441601 false) 
	#(377 5 #reduceActionForqualifiedPathType2: 38950914 false) 
	#(246 5 #reduceActionForexpressionWithoutBlock4: 19385348 false) 
	#(274 3 #reduceActionFortypeParamBounds2: 28075010 false) 
	#(273 2 #reduceActionFor_______separator__simplePathSegment__2: 27379714 false) 
	#(271 5 #reduceActionForstructExprTuple2: 27298818 false) 
	#(270 2 #reduceActionFor__extern___externToken__abi__abi___2: 27244545 false) 
	#(269 2 #reduceActionForstructExprField1: 27092993 false) 
	#(265 5 #reduceActionForstructExprStruct2: 26774530 false) 
	#(266 2 #reduceActionForstructExprFields2: 26923010 false) 
	#(265 5 #reduceActionForstructExprStruct3: 26774531 false) 
	#(238 5 #reduceActionForinnerAttribute1: 17882113 false) 
	#(139 3 #reduceActionFordelimTokenTree1: 7386113 false) 
	#(139 3 #reduceActionFordelimTokenTree1: 7386114 false) 
	#(139 3 #reduceActionFordelimTokenTree1: 7386115 false) 
	#(231 2 #reduceActionFor__extern___externToken__abi__abi___2: 17119233 false) 
	#(235 2 #reduceActionFortypeBoundWhereClauseItem1: 17367041 false) 
	#(202 3 #reduceActionForenumItem5: 14139397 false) 
	#(202 3 #reduceActionForenumItem2: 14139394 false) 
	#(202 3 #reduceActionForenumItem3: 14139395 false) 
	#(202 3 #reduceActionForenumItem4: 14139396 false) 
	#(199 3 #reduceActionFortypeParamBounds2: 14057474 false) 
	#(201 2 #reduceActionFor_______separator__simplePathSegment__2: 14089218 false) 
	#(198 6 #reduceActionForenumeration6: 13915142 false) 
	#(198 6 #reduceActionForenumeration7: 13915143 false) 
	#(198 6 #reduceActionForenumeration4: 13915140 false) 
	#(222 3 #reduceActionForexternalItem10: 16192522 false) 
	#(222 3 #reduceActionForexternalItem6: 16192518 false) 
	#(220 6 #reduceActionForexternBlock4: 16030724 false) 
	#(356 5 #reduceActionFortraitBound8: 36869128 false) 
	#(334 5 #reduceActionForarrayType1: 34994177 false) 
	#(227 3 #reduceActionForlifetimeParam2: 16730114 false) 
	#(357 1 #reduceActionFor__extern___externToken__abi__abi____2: 37033985 false) 
	#(228 3 #reduceActionFortypeParam5: 16849925 false) 
	#(228 3 #reduceActionFortypeParam2: 16849922 false) 
	#(223 5 #reduceActionForgenericParams5: 16463877 false) 
	#(218 6 #reduceActionForinherentImpl5: 15567877 false) 
	#(338 5 #reduceActionForbareFunctionType5: 35441669 false) 
	#(237 2 #reduceActionForexternalItem2: 17527810 false) 
	#(237 2 #reduceActionForexternalItem9: 17527821 false) 
	#(237 2 #reduceActionForassociatedItem5: 17527813 false) 
	#(237 2 #reduceActionForassociatedItem9: 17527817 false) 
	#(218 6 #reduceActionForinherentImpl2: 15567874 false) 
	#(212 2 #reduceActionForinnerAttribute__attr__2: 15233026 false) 
	#(237 2 #reduceActionForvisItem8: 17527820 false) 
	#(237 2 #reduceActionForvisItem10: 17527812 false) 
	#(237 2 #reduceActionForvisItem18: 17527816 false) 
	#(218 6 #reduceActionForinherentImpl3: 15567875 false) 
	#(338 5 #reduceActionForbareFunctionType2: 35441666 false) 
	#(345 2 #reduceActionFormaybeNamedParam1: 36023297 false) 
	#(338 5 #reduceActionForbareFunctionType3: 35441667 false) 
	#(342 2 #reduceActionFormaybeNamedFunctionParameters1: 35921921 false) 
	#(383 4 #reduceActionFortypePathFn2: 39346178 false) 
	#(384 3 #reduceActionFortypeParamBounds2: 39446530 false) 
	#(386 2 #reduceActionFor_______separator__simplePathSegment__2: 39479298 false) 
	#(370 4 #reduceActionForgenericArgs2: 37748738 false) 
	#(372 2 #reduceActionFor_______separator__simplePathSegment__2: 38124546 false) 
	#(375 3 #reduceActionForgenericArgsBinding1: 38736897 false) 
	#(145 2 #reduceActionFortypeParamBounds1: 8380417 false) 
	#(144 3 #reduceActionFormacroRulesDef3: 8208387 false) 
	#(162 6 #reduceActionFormodule3: 11085827 false) 
	#(208 6 #reduceActionForstaticItem3: 14855171 false) 
	#(189 6 #reduceActionFortupleStruct2: 13362178 false) 
	#(197 3 #reduceActionFortupleField2: 13819906 false) 
	#(189 6 #reduceActionFortupleStruct3: 13362179 false) 
	#(194 3 #reduceActionFortypeParamBounds2: 13729794 false) 
	#(196 2 #reduceActionFor_______separator__simplePathSegment__2: 13766658 false) 
	#(190 3 #reduceActionFortypeParamBounds2: 13516802 false) 
	#(192 2 #reduceActionFor_______separator__simplePathSegment__2: 13555714 false) 
	#(189 6 #reduceActionFortupleStruct5: 13362181 false) 
	#(188 6 #reduceActionForstructStruct8: 13201416 false) 
	#(188 6 #reduceActionForstructStruct10: 13201418 false) 
	#(188 6 #reduceActionForstructStruct5: 13201413 false) 
	#(214 6 #reduceActionFortraitAlias1: 15280129 false) 
	#(213 1 #reduceActionFor__extern___externToken__abi__abi____2: 15233026 false) 
	#(186 6 #reduceActionFortypeAlias7: 12968967 false) 
	#(186 6 #reduceActionFortypeAlias13: 12968973 false) 
	#(186 6 #reduceActionFortypeAlias10: 12968970 false) 
	#(186 6 #reduceActionFortypeAlias4: 12968964 false) 
	#(206 6 #reduceActionForunion3: 14538755 false) 
	#(206 6 #reduceActionForunion2: 14538754 false) 
	#(220 6 #reduceActionForexternBlock6: 16030726 false) 
	#(220 6 #reduceActionForexternBlock7: 16030727 false) 
	#(162 6 #reduceActionFormodule5: 11085829 false) 
	#(168 2 #reduceActionFor__extern___externToken__abi__abi___2: 11666433 false) 
	#(167 5 #reduceActionForuseTree3: 11560963 false) 
	#(171 6 #reduceActionForfunction2: 11828226 false) 
	#(171 6 #reduceActionForfunction1: 11828225 false) 
	#(176 2 #reduceActionForfunctionParameters2: 12318722 false) 
	#(183 2 #reduceActionForfunctionParam2: 12715010 false) 
	#(181 1 #reduceActionForshorthandSelf1: 12532737 false) 
	#(179 2 #reduceActionForselfParam1: 12460033 false) 
	#(179 2 #reduceActionForselfParam2: 12460034 false) 
	#(183 2 #reduceActionForfunctionParam1: 12715009 false) 
	#(183 2 #reduceActionForfunctionParam3: 12715011 false) 
	#(176 2 #reduceActionForfunctionParameters3: 12318723 false) 
	#(258 2 #reduceActionFor__extern___externToken__abi__abi___2: 26383361 false) 
	#(302 5 #reduceActionForidentifierPattern8: 31989768 false) 
	#(317 3 #reduceActionForslicePatternItems4: 33687556 false) 
	#(314 3 #reduceActionForstructPatternField4: 33275908 false) 
	#(314 3 #reduceActionForstructPatternField5: 33275909 false) 
	#(310 3 #reduceActionForstructPatternElements3: 33038339 false) 
	#(313 2 #reduceActionFor_______separator__simplePathSegment__2: 33227778 false) 
	#(287 6 #reduceActionForifLetExpression1: 29664257 false) 
	#(287 6 #reduceActionForifLetExpression5: 29664261 false) 
	#(288 6 #reduceActionFormatchExpression2: 30088194 false) 
	#(291 2 #reduceActionFor_matchArm__arm________arrow__matchArmExpression__2: 30244866 false) 
	#(275 6 #reduceActionForclosureExpression10: 28170250 false) 
	#(283 6 #reduceActionForpredicatePatternLoopExpression1: 29088769 false) 
	#(275 6 #reduceActionForclosureExpression6: 28170246 false) 
	#(243 6 #reduceActionForletStatement3: 18965507 false) 
	#(243 6 #reduceActionForletStatement2: 18965506 false) 
	#(246 6 #reduceActionForexpressionWithoutBlock5: 19385349 false) 
	#(272 2 #reduceActionFor__extern___externToken__abi__abi___2: 27379713 false) 
	#(271 6 #reduceActionForstructExprTuple3: 27298819 false) 
	#(266 3 #reduceActionForstructExprFields3: 26923011 false) 
	#(268 2 #reduceActionFor_______separator__simplePathSegment__2: 26970114 false) 
	#(214 7 #reduceActionFortraitAlias5: 15280133 false) 
	#(207 7 #reduceActionForconstantItem4: 14686212 false) 
	#(207 7 #reduceActionForconstantItem4: 14686210 false) 
	#(235 3 #reduceActionFortypeBoundWhereClauseItem3: 17367043 false) 
	#(235 3 #reduceActionFortypeBoundWhereClauseItem2: 17367042 false) 
	#(234 3 #reduceActionForlifetimeWhereClauseItem1: 17278977 false) 
	#(202 4 #reduceActionForenumItem6: 14139398 false) 
	#(202 4 #reduceActionForenumItem7: 14139399 false) 
	#(202 4 #reduceActionForenumItem8: 14139400 false) 
	#(203 2 #reduceActionForgenericParams1: 14316545 false) 
	#(205 2 #reduceActionFor__extern___externToken__abi__abi___2: 14461953 false) 
	#(204 2 #reduceActionForgenericParams1: 14388225 false) 
	#(200 2 #reduceActionFor__extern___externToken__abi__abi___2: 14089217 false) 
	#(198 7 #reduceActionForenumeration8: 13915144 false) 
	#(229 4 #reduceActionForconstParam1: 16988161 false) 
	#(359 2 #reduceActionFor_______separator__simplePathSegment__2: 37054466 false) 
	#(357 2 #reduceActionFortupleElements2: 37033986 false) 
	#(228 4 #reduceActionFortypeParam4: 16849924 false) 
	#(218 7 #reduceActionForinherentImpl6: 15567878 false) 
	#(218 7 #reduceActionForinherentImpl7: 15567879 false) 
	#(338 6 #reduceActionForbareFunctionType6: 35441670 false) 
	#(338 6 #reduceActionForbareFunctionType7: 35441671 false) 
	#(237 3 #reduceActionForexternalItem10: 17527822 false) 
	#(237 3 #reduceActionForassociatedItem6: 17527814 false) 
	#(237 3 #reduceActionForassociatedItem10: 17527818 false) 
	#(218 7 #reduceActionForinherentImpl4: 15567876 false) 
	#(340 2 #reduceActionFor__extern___externToken__abi__abi___2: 35733505 false) 
	#(338 6 #reduceActionForbareFunctionType4: 35441668 false) 
	#(342 3 #reduceActionFormaybeNamedFunctionParameters2: 35921922 false) 
	#(344 2 #reduceActionFor______comma__maybeNamedParam__2: 35973122 false) 
	#(385 2 #reduceActionFor__extern___externToken__abi__abi___2: 39479297 false) 
	#(383 5 #reduceActionFortypePathFn4: 39346180 false) 
	#(370 5 #reduceActionForgenericArgs3: 37748739 false) 
	#(371 2 #reduceActionFor__extern___externToken__abi__abi___2: 38124545 false) 
	#(149 3 #reduceActionFormacroMatcher1: 8552449 false) 
	#(151 1 #reduceActionFormacroMatch2: 8718338 false) 
	#(150 2 #reduceActionForinnerAttribute__attr__2: 8582146 false) 
	#(151 1 #reduceActionFormacroMatch1: 8718337 false) 
	#(153 1 #reduceActionFortokenTreeToken5: 9007108 false) 
	#(153 1 #reduceActionFortokenTreeToken5: 9007105 false) 
	#(153 1 #liftFirstValue: 9007106 false) 
	#(153 1 #reduceActionFortokenTreeToken5: 9007107 false) 
	#(149 3 #reduceActionFormacroMatcher1: 8552450 false) 
	#(149 3 #reduceActionFormacroMatcher1: 8552451 false) 
	#(144 4 #reduceActionFormacroRulesDef1: 8208385 false) 
	#(145 3 #reduceActionFortypeParamBounds2: 8380418 false) 
	#(147 2 #reduceActionFor_______separator__simplePathSegment__2: 8414210 false) 
	#(157 1 #liftFirstValue: 9493505 false) 
	#(148 3 #reduceActionFormacroRule1: 8473601 false) 
	#(144 4 #reduceActionFormacroRulesDef1: 8208386 false) 
	#(208 7 #reduceActionForstaticItem2: 14855170 false) 
	#(189 7 #reduceActionFortupleStruct4: 13362180 false) 
	#(195 2 #reduceActionFor__extern___externToken__abi__abi___2: 13766657 false) 
	#(193 4 #reduceActionForstructField1: 13609985 false) 
	#(191 2 #reduceActionFor__extern___externToken__abi__abi___2: 13555713 false) 
	#(189 7 #reduceActionFortupleStruct6: 13362182 false) 
	#(189 7 #reduceActionFortupleStruct7: 13362183 false) 
	#(188 7 #reduceActionForstructStruct11: 13201419 false) 
	#(214 7 #reduceActionFortraitAlias2: 15280130 false) 
	#(209 7 #reduceActionFortrait1: 15027201 false) 
	#(214 7 #reduceActionFortraitAlias3: 15280131 false) 
	#(186 7 #reduceActionFortypeAlias6: 12968966 false) 
	#(186 7 #reduceActionFortypeAlias15: 12968975 false) 
	#(186 7 #reduceActionFortypeAlias12: 12968972 false) 
	#(206 7 #reduceActionForunion4: 14538756 false) 
	#(220 7 #reduceActionForexternBlock8: 16030728 false) 
	#(162 7 #reduceActionFormodule6: 11085830 false) 
	#(214 7 #reduceActionFortraitAlias9: 15280137 false) 
	#(167 6 #reduceActionForuseTree6: 11560966 false) 
	#(185 2 #reduceActionFor__extern___externToken__abi__abi___2: 12906497 false) 
	#(171 7 #reduceActionForfunction6: 11828230 false) 
	#(171 7 #reduceActionForfunction5: 11828229 false) 
	#(171 7 #reduceActionForfunction4: 11828228 false) 
	#(171 7 #reduceActionForfunction3: 11828227 false) 
	#(171 7 #reduceActionForfunction10: 11828234 false) 
	#(171 7 #reduceActionForfunction9: 11828233 false) 
	#(181 2 #reduceActionForshorthandSelf2: 12532738 false) 
	#(181 2 #reduceActionForshorthandSelf3: 12532739 false) 
	#(176 3 #reduceActionForfunctionParameters4: 12318724 false) 
	#(178 2 #reduceActionFor______comma__functionParam__2: 12411906 false) 
	#(171 7 #reduceActionForfunction18: 11828242 false) 
	#(171 7 #reduceActionForfunction17: 11828241 false) 
	#(314 4 #reduceActionForstructPatternField6: 33275910 false) 
	#(314 4 #reduceActionForstructPatternField1: 33275905 false) 
	#(314 4 #reduceActionForstructPatternField1: 33275906 false) 
	#(312 2 #reduceActionFor__extern___externToken__abi__abi___2: 33227777 false) 
	#(293 2 #reduceActionFormatchArm1: 30541825 false) 
	#(275 7 #reduceActionForclosureExpression12: 28170252 false) 
	#(269 4 #reduceActionForstructExprField3: 27092995 false) 
	#(269 4 #reduceActionForstructExprField3: 27092994 false) 
	#(267 2 #reduceActionFor__extern___externToken__abi__abi___2: 26970113 false) 
	#(266 4 #reduceActionForstructExprFields1: 26923009 false) 
	#(214 8 #reduceActionFortraitAlias6: 15280134 false) 
	#(209 8 #reduceActionFortrait5: 15027205 false) 
	#(214 8 #reduceActionFortraitAlias7: 15280135 false) 
	#(235 4 #reduceActionFortypeBoundWhereClauseItem4: 17367044 false) 
	#(203 3 #reduceActionForenumItemTuple2: 14316546 false) 
	#(204 3 #reduceActionForenumItemTuple2: 14388226 false) 
	#(358 2 #reduceActionFor__extern___externToken__abi__abi___2: 37054465 false) 
	#(228 5 #reduceActionFortypeParam6: 16849926 false) 
	#(218 8 #reduceActionForinherentImpl8: 15567880 false) 
	#(338 7 #reduceActionForbareFunctionType8: 35441672 false) 
	#(345 4 #reduceActionFormaybeNamedParam3: 36023299 false) 
	#(345 4 #reduceActionFormaybeNamedParam3: 36023298 false) 
	#(343 2 #reduceActionFor______comma__maybeNamedParam_1: 35973121 false) 
	#(146 2 #reduceActionFor__extern___externToken__abi__abi___2: 8414209 false) 
	#(208 8 #reduceActionForstaticItem4: 14855172 false) 
	#(193 5 #reduceActionForstructField2: 13609986 false) 
	#(189 8 #reduceActionFortupleStruct8: 13362184 false) 
	#(214 8 #reduceActionFortraitAlias4: 15280132 false) 
	#(209 8 #reduceActionFortrait3: 15027203 false) 
	#(186 8 #reduceActionFortypeAlias8: 12968968 false) 
	#(186 8 #reduceActionFortypeAlias14: 12968974 false) 
	#(214 8 #reduceActionFortraitAlias13: 15280141 false) 
	#(214 8 #reduceActionFortraitAlias10: 15280138 false) 
	#(209 8 #reduceActionFortrait9: 15027209 false) 
	#(214 8 #reduceActionFortraitAlias11: 15280139 false) 
	#(167 7 #reduceActionForuseTree9: 11560969 false) 
	#(171 8 #reduceActionForfunction8: 11828232 false) 
	#(171 8 #reduceActionForfunction7: 11828231 false) 
	#(171 8 #reduceActionForfunction14: 11828238 false) 
	#(171 8 #reduceActionForfunction13: 11828237 false) 
	#(171 8 #reduceActionForfunction12: 11828236 false) 
	#(171 8 #reduceActionForfunction11: 11828235 false) 
	#(176 4 #reduceActionForfunctionParameters5: 12318725 false) 
	#(182 3 #reduceActionFortypedSelf1: 12632065 false) 
	#(181 3 #reduceActionForshorthandSelf4: 12532740 false) 
	#(181 3 #reduceActionForshorthandSelf5: 12532741 false) 
	#(184 3 #reduceActionForfunctionParamPattern2: 12820482 false) 
	#(184 3 #reduceActionForfunctionParamPattern1: 12820481 false) 
	#(177 2 #reduceActionFor______comma__functionParam_1: 12411905 false) 
	#(171 8 #reduceActionForfunction22: 11828246 false) 
	#(171 8 #reduceActionForfunction21: 11828245 false) 
	#(171 8 #reduceActionForfunction20: 11828244 false) 
	#(171 8 #reduceActionForfunction19: 11828243 false) 
	#(171 8 #reduceActionForfunction26: 11828250 false) 
	#(171 8 #reduceActionForfunction25: 11828249 false) 
	#(287 8 #reduceActionForifLetExpression2: 29664258 false) 
	#(287 8 #reduceActionForifLetExpression2: 29664259 false) 
	#(287 8 #reduceActionForifLetExpression2: 29664260 false) 
	#(293 3 #reduceActionFormatchArm2: 30541826 false) 
	#(289 4 #reduceActionFormatchArms1: 30229505 false) 
	#(292 1 #reduceActionFor__extern___externToken__abi__abi___1: 30414850 false) 
	#(289 4 #reduceActionFormatchArms1: 30229507 false) 
	#(290 3 #reduceActionFor_matchArm__arm________arrow__matchArmExpression_1: 30244865 false) 
	#(243 8 #reduceActionForletStatement4: 18965508 false) 
	#(214 9 #reduceActionFortraitAlias8: 15280136 false) 
	#(209 9 #reduceActionFortrait7: 15027207 false) 
	#(346 5 #reduceActionFormaybeNamedFunctionParametersVariadic1: 36134913 false) 
	#(219 9 #reduceActionFortraitImpl1: 15741953 false) 
	#(152 1 #reduceActionForouterAttribute__attr__1: 8921089 false) 
	#(209 9 #reduceActionFortrait2: 15027202 false) 
	#(186 9 #reduceActionFortypeAlias16: 12968976 false) 
	#(214 9 #reduceActionFortraitAlias14: 15280142 false) 
	#(209 9 #reduceActionFortrait13: 15027213 false) 
	#(214 9 #reduceActionFortraitAlias15: 15280143 false) 
	#(214 9 #reduceActionFortraitAlias12: 15280140 false) 
	#(209 9 #reduceActionFortrait11: 15027211 false) 
	#(171 9 #reduceActionForfunction16: 11828240 false) 
	#(171 9 #reduceActionForfunction15: 11828239 false) 
	#(176 5 #reduceActionForfunctionParameters6: 12318726 false) 
	#(182 4 #reduceActionFortypedSelf2: 12632066 false) 
	#(181 4 #reduceActionForshorthandSelf6: 12532742 false) 
	#(171 9 #reduceActionForfunction24: 11828248 false) 
	#(171 9 #reduceActionForfunction23: 11828247 false) 
	#(171 9 #reduceActionForfunction30: 11828254 false) 
	#(171 9 #reduceActionForfunction29: 11828253 false) 
	#(171 9 #reduceActionForfunction28: 11828252 false) 
	#(171 9 #reduceActionForfunction27: 11828251 false) 
	#(295 2 #reduceActionFormatchArmGuard1: 30696449 false) 
	#(292 2 #reduceActionFor__extern___externToken__abi__abi___2: 30414849 false) 
	#(289 5 #reduceActionFormatchArms2: 30229506 false) 
	#(292 2 #reduceActionFor__extern___externToken__abi__abi___2: 30414851 false) 
	#(289 5 #reduceActionFormatchArms2: 30229508 false) 
	#(209 10 #reduceActionFortrait6: 15027206 false) 
	#(219 10 #reduceActionFortraitImpl2: 15741954 false) 
	#(219 10 #reduceActionFortraitImpl3: 15741955 false) 
	#(219 10 #reduceActionFortraitImpl5: 15741957 false) 
	#(152 2 #reduceActionForinnerAttribute__attr__2: 8921090 false) 
	#(151 4 #reduceActionFormacroMatch4: 8718340 false) 
	#(154 1 #liftFirstValue: 9197569 false) 
	#(151 4 #reduceActionFormacroMatch4: 8718339 false) 
	#(209 10 #reduceActionFortrait4: 15027204 false) 
	#(214 10 #reduceActionFortraitAlias16: 15280144 false) 
	#(209 10 #reduceActionFortrait15: 15027215 false) 
	#(219 10 #reduceActionFortraitImpl9: 15741961 false) 
	#(209 10 #reduceActionFortrait10: 15027210 false) 
	#(171 10 #reduceActionForfunction32: 11828256 false) 
	#(171 10 #reduceActionForfunction31: 11828255 false) 
	#(209 11 #reduceActionFortrait8: 15027208 false) 
	#(219 11 #reduceActionFortraitImpl4: 15741956 false) 
	#(219 11 #reduceActionFortraitImpl6: 15741958 false) 
	#(219 11 #reduceActionFortraitImpl7: 15741959 false) 
	#(155 1 #reduceActionFortokenTreeToken5: 9270276 false) 
	#(151 5 #reduceActionFormacroMatch5: 8718341 false) 
	#(155 1 #reduceActionFortokenTreeToken5: 9270273 false) 
	#(155 1 #liftFirstValue: 9270274 false) 
	#(155 1 #reduceActionFortokenTreeToken5: 9270275 false) 
	#(209 11 #reduceActionFortrait14: 15027214 false) 
	#(219 11 #reduceActionFortraitImpl10: 15741962 false) 
	#(219 11 #reduceActionFortraitImpl11: 15741963 false) 
	#(219 11 #reduceActionFortraitImpl13: 15741965 false) 
	#(209 11 #reduceActionFortrait12: 15027212 false) 
	#(219 12 #reduceActionFortraitImpl8: 15741960 false) 
	#(151 6 #reduceActionFormacroMatch6: 8718342 false) 
	#(209 12 #reduceActionFortrait16: 15027216 false) 
	#(219 12 #reduceActionFortraitImpl12: 15741964 false) 
	#(219 12 #reduceActionFortraitImpl14: 15741966 false) 
	#(219 12 #reduceActionFortraitImpl15: 15741967 false) 
	#(295 5 #reduceActionFormatchArmGuard2: 30696450 false) 
	#(219 13 #reduceActionFortraitImpl16: 15741968 false)
	).
]

{ #category : #generated }
RustParser class >> scannerClass [
	^RustScanner
]

{ #category : #generated }
RustParser class >> startingStateForblockExpression [
	^ 5
]

{ #category : #generated }
RustParser class >> startingStateForcrate [
	^ 1
]

{ #category : #generated }
RustParser class >> startingStateForexpression [
	^ 4
]

{ #category : #generated }
RustParser class >> startingStateForitem [
	^ 2
]

{ #category : #generated }
RustParser class >> startingStateForstatement [
	^ 3
]

{ #category : #generated }
RustParser class >> symbolNames [
	^ #('"!"' '"!="' '"#"' '"$"' '"$crate"' '"%"' '"%="' '"&"' '"&&"' '"&="' '"''_"' '"''static"' '"("' '")"' '"*"' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"->"' '"."' '".."' '"..."' '"..="' '"/"' '"/="' '":"' '"::"' '";"' '"<<"' '"<<="' '"<="' '"="' '"=="' '"=>"' '">="' '">>"' '">>="' '">>>"' '"?"' '"@"' '"Self"' '"["' '"]"' '"^"' '"^="' '"_"' '"abstract"' '"as"' '"async"' '"auto"' '"await"' '"become"' '"box"' '"break"' '"const"' '"continue"' '"crate"' '"default"' '"do"' '"dyn"' '"else"' '"enum"' '"extern"' '"false"' '"final"' '"fn"' '"for"' '"if"' '"impl"' '"in"' '"let"' '"loop"' '"macro"' '"macro_rules"' '"match"' '"mod"' '"move"' '"mut"' '"override"' '"priv"' '"pub"' '"ref"' '"return"' '"self"' '"static"' '"struct"' '"super"' '"trait"' '"true"' '"try"' '"type"' '"typeof"' '"union"' '"unsafe"' '"unsized"' '"use"' '"virtual"' '"where"' '"while"' '"yield"' '"{"' '"|"' '"|="' '"||"' '"}"' '<bar>' '<lparen>' '<lbracket>' '<NON_KEYWORD_IDENTIFIER>' '<RAW_IDENTIFIER>' '<comment>' '<SHEBANG>' '<whitespace>' '<CHAR_LITERAL>' '<STRING_LITERAL>' '<rawStringStart>' '<simpleRawString>' '<BYTE_LITERAL>' '<BYTE_STRING_LITERAL>' '<INTEGER_LITERAL>' '<potentialFloat>' '<FLOAT_LITERAL>' '<LIFETIME_OR_LABEL>' '<lt>' '<gt>' '<amp>' '<patternToken>' 'B e g i n' 'crate' 'innerAttribute ''attr''*' 'item+' 'macroInvocation' 'macroInvocationWithBlock' 'tokenTree*' 'macroInvocationWithoutBlock' 'delimTokenTree' 'tokenTree' 'tokenTreeToken' 'macroInvocationSemi' 'macroRulesDefinition' 'macroRulesDef' 'macroRules' '(";" ''semicolon'' macroRule ''rule'')' '(";" ''semicolon'' macroRule ''rule'')*' 'macroRule' 'macroMatcher' 'macroMatch ''match''*' 'macroMatch' 'macroMatch ''match''+' 'macroMatchToken' 'macroFragSpec' 'macroRepSep' 'macroRepOp' 'macroTranscriber' 'item' 'outerAttribute ''attr''+' 'visItem' 'macroItem' 'module' 'externCrate' 'crateRef' 'asClause' 'useDeclaration' 'useTree' '("," ''comma'' useTree ''use'')' '("," ''comma'' useTree ''use'')*' '"," ''comma''?' 'function' 'functionQualifiers' '("extern" ''externToken'' abi ''abi''?)' '("extern" ''externToken'' abi ''abi''?)?' 'abi' 'functionParameters' '("," ''comma'' functionParam)' '("," ''comma'' functionParam)*' 'selfParam' 'outerAttribute ''attr''*' 'shorthandSelf' 'typedSelf' 'functionParam' 'functionParamPattern' 'functionReturnType' 'typeAlias' 'struct' 'structStruct' 'tupleStruct' 'structFields' '("," ''comma'' structField ''field'')' '("," ''comma'' structField ''field'')*' 'structField' 'tupleFields' '("," ''comma'' tupleField ''field'')' '("," ''comma'' tupleField ''field'')*' 'tupleField' 'enumeration' 'enumItems' '("," ''comma'' enumItem ''item'')' '("," ''comma'' enumItem ''item'')*' 'enumItem' 'enumItemTuple' 'enumItemStruct' 'enumItemDiscriminant' 'union' 'constantItem' 'staticItem' 'trait' 'typeParamBounds?' 'whereClause ''where''?' 'associatedItem ''item''+' 'associatedItem ''item''+?' 'traitAlias' '(":" ''colon'' typeParamBounds?)' '(":" ''colon'' typeParamBounds?)?' 'implementation' 'inherentImpl' 'traitImpl' 'externBlock' 'externalItem ''item''+' 'externalItem' 'genericParams' '(genericParam ''param'' "," ''comma'')' '(genericParam ''param'' "," ''comma'')+' 'genericParam' 'lifetimeParam' 'typeParam' 'constParam' 'whereClause' '(whereClauseItem ''clause'' "," ''comma'')' '(whereClauseItem ''clause'' "," ''comma'')*' 'whereClauseItem' 'lifetimeWhereClauseItem' 'typeBoundWhereClauseItem' 'forLifetimes' 'associatedItem' 'innerAttribute' 'outerAttribute' 'attr' 'attrInput' 'statement' 'letStatement' 'expressionStatement' 'expression' 'expressionWithoutBlock' 'expressionWithBlock' 'literalExpression' 'LiteralFloat' 'LiteralInteger' 'pathExpression' 'blockExpression' 'statements' 'statement ''statement''+' 'asyncBlockExpression' 'unsafeBlockExpression' 'arrayElements' '("," ''separator'' expression ''element'')' '("," ''separator'' expression ''element'')*' 'tupleElements' '(expression ''element'' "," ''comma'')' '(expression ''element'' "," ''comma'')+' 'tupleIndex' 'structExpression' 'structExprStruct' 'structExprFields' '("," ''comma'' structExprField ''field'')' '("," ''comma'' structExprField ''field'')*' 'structExprField' 'structBase' 'structExprTuple' '("," ''comma'' expression ''arg'')' '("," ''comma'' expression ''arg'')*' 'callParams' 'closureExpression' 'closureParameters' '("," ''comma'' closureParam ''parameter'')' '("," ''comma'' closureParam ''parameter'')*' 'closureParam' 'loopExpression' 'infiniteLoopExpression' 'predicateLoopExpression' 'predicatePatternLoopExpression' 'iteratorLoopExpression' 'loopLabel' 'ifExpression' 'ifLetExpression' 'matchExpression' 'matchArms' '(matchArm ''arm'' "=>" ''arrow'' matchArmExpression)' '(matchArm ''arm'' "=>" ''arrow'' matchArmExpression)*' 'matchArmExpression' 'matchArm' 'matchArmPatterns' 'matchArmGuard' 'pattern' '("|" ''bar'' patternNoTopAlt ''pattern'')' '("|" ''bar'' patternNoTopAlt ''pattern'')*' 'patternNoTopAlt' 'patternWithoutRange' 'literalPattern' 'identifierPattern' 'wildcardPattern' 'restPattern' 'rangePattern' 'obsoleteRangePattern' 'rangePatternBound' 'referencePattern' 'structPattern' 'structPatternElements' 'structPatternFields' '("," ''comma'' structPatternField ''field'')' '("," ''comma'' structPatternField ''field'')*' 'structPatternField' 'structPatternEtCetera' 'tupleStructPattern' 'tupleStructItems' '("," ''comma'' pattern)' '("," ''comma'' pattern)+' 'tuplePattern' 'tuplePatternItems' 'groupedPattern' 'slicePattern' 'slicePatternItems' 'pathPattern' 'type' 'typeNoBounds' 'typeNoBoundsWithoutImpl' 'parenthesizedType' 'neverType' 'tupleType' '(type ''type'' "," ''comma'')' '(type ''type'' "," ''comma'')+' 'arrayType' 'sliceType' 'referenceType' 'rawPointerType' 'bareFunctionType' 'functionTypeQualifiers' 'bareFunctionReturnType' 'functionParametersMaybeNamedVariadic' 'maybeNamedFunctionParameters' '("," ''comma'' maybeNamedParam)' '("," ''comma'' maybeNamedParam)*' 'maybeNamedParam' 'maybeNamedFunctionParametersVariadic' 'traitObjectType' 'traitObjectTypeOneBound' 'implTraitType' 'implTraitTypeOneBound' 'inferredType' 'typeParamBounds' '("+" ''plus'' typeParamBound ''typeBound'')' '("+" ''plus'' typeParamBound ''typeBound'')*' 'typeParamBound' 'traitBound' 'lifetimeBounds' '(lifetime ''lifetimeBound'' "+" ''plus'' )' '(lifetime ''lifetimeBound'' "+" ''plus'' )*' 'lifetime' 'simplePath' '("::" ''separator'' simplePathSegment)' '("::" ''separator'' simplePathSegment)+' 'simplePathSegment' 'pathInExpression' '("::" ''separator'' pathExprSegment)' '("::" ''separator'' pathExprSegment)+' 'pathExprSegment' 'pathIdentSegment' 'genericArgs' '("," ''comma'' genericArg ''genericArg'')' '("," ''comma'' genericArg ''genericArg'')*' 'genericArg' 'genericArgsConst' 'genericArgsBinding' 'qualifiedPathInExpression' 'qualifiedPathType' 'qualifiedPathInType' '("::" ''separator'' typePathSegment)' '("::" ''separator'' typePathSegment)+' 'typePath' 'typePathSegment' 'typePathFn' 'typePathInputs' '("," ''comma'' type ''type'')' '("," ''comma'' type ''type'')*' 'visibility' 'identifier' 'keyword' 'macroIdentifierLikeToken' 'macroLiteralToken' 'macroPunctuationToken' '<rawString>' 'E O F' 'error')
]

{ #category : #generated }
RustParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #RustCrateNode #RustCrateNode #OrderedCollection #OrderedCollection #RustMacroInvocationNode #RustMacroInvocationNode #OrderedCollection #RustMacroInvocationNode #RustMacroTokenTreeNode #RustProgramNode #RustProgramNode #RustMacroInvocationStatementNode #RustMacroRulesDefinitionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustMacroRuleNode #OrderedCollection #OrderedCollection #RustMacroMatchNode #OrderedCollection #RustProgramNode #SmaCCToken #RustProgramNode #SmaCCToken #RustMacroTokenTreeNode #OrderedCollection #OrderedCollection #RustProgramNode #RustProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #RustUseTreeNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustStructFieldNode #OrderedCollection #OrderedCollection #OrderedCollection #RustTupleFieldNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustEnumItemNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustWhereClauseNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #RustGenericParamNode #RustLifetimeParamNode #RustTypeParamNode #RustConstParamNode #RustWhereClauseNode #OrderedCollection #OrderedCollection #RustProgramNode #RustLifetimeWhereClauseItemNode #RustTypeBoundWhereClauseItemNode #OrderedCollection #RustProgramNode #RustAttributeNode #RustAttributeNode #OrderedCollection #OrderedCollection #RustStatementNode #RustLetStatementNode #OrderedCollection #RustExpressionNode #RustExpressionNode #RustExpressionNode #RustLiteralExpressionNode #RustLiteralExpressionNode #RustLiteralExpressionNode #RustPathExpressionNode #RustBlockExpressionNode #OrderedCollection #OrderedCollection #RustAsyncBlockExpressionNode #RustUnsafeBlockExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustExpressionNode #RustStructExprStructNode #OrderedCollection #OrderedCollection #OrderedCollection #RustStructExprFieldNode #OrderedCollection #RustStructExprTupleNode #OrderedCollection #OrderedCollection #OrderedCollection #RustClosureExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #RustClosureParamNode #RustExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustIfExpressionNode #RustIfLetExpressionNode #RustMatchExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustMatchArmNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #RustProgramNode #RustExpressionNode #RustIdentifierPatternNode #RustWildcardPatternNode #RustRestPatternNode #RustRangePatternNode #RustRangePatternNode #RustExpressionNode #RustReferencePatternNode #RustStructPatternNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustStructPatternFieldNode #RustStructPatternEtCeteraNode #RustTupleStructPatternNode #OrderedCollection #OrderedCollection #OrderedCollection #RustTuplePatternNode #OrderedCollection #RustGroupedPatternNode #RustSlicePatternNode #OrderedCollection #RustPathExpressionNode #RustProgramNode #RustProgramNode #RustProgramNode #RustParenthesizedTypeNode #RustNeverTypeNode #RustTupleTypeNode #OrderedCollection #OrderedCollection #RustArrayTypeNode #RustSliceTypeNode #RustReferenceTypeNode #RustRawPointerTypeNode #RustFunctionTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustTraitObjectTypeNode #RustTraitObjectTypeNode #RustImplTraitTypeNode #RustImplTraitTypeNode #RustInferredTypeNode #OrderedCollection #OrderedCollection #OrderedCollection #RustProgramNode #RustTraitBoundNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustPathNode #OrderedCollection #OrderedCollection #SmaCCToken #RustPathExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #RustGenericArgsNode #OrderedCollection #OrderedCollection #RustProgramNode #RustExpressionNode #RustGenericArgBindingNode #RustPathExpressionNode #OrderedCollection #RustQualifiedPathInTypeNode #OrderedCollection #OrderedCollection #RustTypePathNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #RustVisibilityNode #SmaCCToken #SmaCCToken #SmaCCToken #RustLiteralExpressionNode #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
RustParser class >> transitionTable [
^#(
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 112 0 6 0 113 0 25 0 115 0 29 0 132 0 33 0 133 0 6 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 0 153 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[1 1 17 0 1 0 7 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 1 53 0 31 2 61 0 44 1 61 0 45 1 65 0 52 0 53 0 53 1 69 0 56 1 73 0 57 0 57 0 58 1 77 0 59 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 1 81 0 67 0 10 0 69 1 85 0 70 1 89 0 71 0 77 0 72 0 11 0 74 1 97 0 75 0 81 0 77 1 101 0 78 0 85 0 79 1 105 0 80 0 89 0 84 1 109 0 86 2 49 0 87 0 97 0 88 0 101 0 89 2 49 0 90 0 109 0 91 1 113 0 92 0 113 0 94 0 117 0 96 1 117 0 97 0 125 0 99 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 1 217 0 135 1 177 0 136 1 181 0 138 1 185 0 142 0 165 0 143 1 189 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 1 193 0 180 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 1 197 0 239 1 201 0 242 1 201 0 243 1 209 0 244 1 213 0 245 1 217 0 246 1 221 0 247 1 217 0 248 1 217 0 249 1 217 0 250 1 217 0 251 1 221 0 252 1 221 0 255 1 221 1 0 1 217 1 8 1 217 1 9 1 217 1 15 1 217 1 19 1 221 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 1 221 1 30 1 221 1 31 1 221 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 1 217 1 120 2 69 1 121 1 9 1 131 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 2 109 0 135 2 109 0 136 2 109 0 138 2 105 0 239 2 109 0 245 2 109 0 246 2 109 0 247 2 109 0 248 2 109 0 249 2 109 0 250 2 109 0 251 2 109 0 252 2 109 0 255 2 109 1 0 2 109 1 8 2 109 1 9 2 109 1 15 2 109 1 19 2 109 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 2 109 1 30 2 109 1 31 2 109 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 2 109 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 125 0 104 2 121 0 252] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 112 0 6 0 113 2 125 0 133 0 6 1 138] 
#[0 0 0 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 2 133 0 134 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 2 137 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132 0 18 1 138] 
#[0 2 145 0 45] 
#[0 0 22 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 149 0 5 0 53 0 60 0 77 0 87 0 90 0 112 0 113 1 108 1 132] 
#[1 2 153 0 66 0 10 0 69 2 157 0 97 0 189 0 173 2 161 0 174] 
#[1 0 26 0 1 0 26 0 2 0 26 0 6 0 26 0 7 0 26 0 9 0 26 0 10 0 26 0 13 0 26 0 15 0 26 0 16 0 26 0 17 0 26 0 18 0 26 0 20 0 26 0 21 0 26 0 23 0 26 0 24 0 26 0 26 0 26 0 27 0 26 0 28 0 26 0 30 0 26 0 31 0 26 0 32 0 26 0 33 0 26 0 34 0 26 0 35 0 26 0 36 0 26 0 38 0 26 0 39 0 26 0 40 0 26 0 41 0 26 0 42 0 26 0 47 0 26 0 48 0 26 0 51 2 165 0 91 0 26 0 104 0 26 0 106 0 26 0 107 0 26 0 108 0 26 0 109 0 26 0 110 0 26 0 111 0 26 0 127 0 26 0 128 0 26 0 129] 
#[1 2 169 0 49 2 173 0 52 2 185 0 53 2 153 0 66 0 10 0 69 2 185 0 77 2 177 0 97 2 185 0 112 2 185 0 113 0 189 0 173 2 181 0 174 2 185 1 132] 
#[1 0 15 0 1 0 34 0 2 0 30 0 5 0 34 0 6 0 34 0 7 0 34 0 9 0 34 0 10 0 30 0 11 0 30 0 12 0 15 0 13 0 34 0 14 0 15 0 15 0 34 0 16 0 34 0 17 0 34 0 18 0 34 0 19 0 34 0 20 0 34 0 21 0 34 0 23 0 34 0 24 0 34 0 26 0 34 0 27 0 34 0 28 0 15 0 30 0 34 0 31 0 34 0 32 0 34 0 33 0 34 0 34 0 34 0 35 0 34 0 36 0 34 0 38 0 34 0 39 0 34 0 40 0 34 0 41 0 15 0 42 0 30 0 44 0 30 0 45 0 34 0 47 0 34 0 48 0 30 0 49 0 34 0 51 0 30 0 52 0 30 0 53 0 30 0 58 0 30 0 60 0 30 0 61 0 30 0 63 0 30 0 65 0 30 0 66 0 30 0 69 0 30 0 70 0 30 0 72 0 30 0 77 0 30 0 79 0 30 0 87 0 30 0 88 0 30 0 89 0 30 0 90 0 30 0 91 0 30 0 94 0 30 0 96 0 30 0 97 0 30 0 99 0 34 0 104 0 34 0 106 0 34 0 107 0 34 0 108 0 34 0 109 0 34 0 110 0 34 0 111 0 30 0 112 0 30 0 113 0 30 0 126 0 15 0 127 0 34 0 128 0 15 0 129] 
#[1 2 189 0 52 2 193 0 58 2 153 0 66 0 10 0 69 2 197 0 97 0 189 0 173 2 201 0 174] 
#[0 2 205 0 53 0 77 0 112 0 113 1 132] 
#[1 2 209 0 60 0 38 0 69 2 213 0 104 2 225 0 118 2 225 0 120 2 225 0 175 2 225 1 137] 
#[1 2 233 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 3 13 0 58 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 3 41 0 127 3 45 0 129 3 61 0 135 3 61 0 136 3 61 0 138 3 53 0 223 3 57 0 236 3 61 1 70 3 61 1 72 3 61 1 73 3 61 1 74 3 61 1 75 3 61 1 78 3 61 1 79 3 61 1 80 3 61 1 81 3 61 1 82 3 101 1 83 3 61 1 91 3 61 1 92 3 61 1 93 3 61 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 3 61 1 122 3 149 1 125 3 153 1 126 2 49 1 132] 
#[1 0 19 0 1 0 46 0 2 0 46 0 6 0 46 0 7 0 46 0 9 0 46 0 10 0 46 0 13 0 46 0 15 0 46 0 16 0 46 0 17 0 46 0 18 0 46 0 20 0 46 0 21 0 46 0 23 0 46 0 24 0 46 0 26 0 46 0 27 0 46 0 28 0 46 0 30 0 46 0 31 0 46 0 32 0 46 0 33 0 46 0 34 0 46 0 35 0 46 0 36 0 46 0 38 0 46 0 39 0 46 0 40 0 46 0 41 0 46 0 42 0 46 0 47 0 46 0 48 0 46 0 51 0 46 0 104 0 46 0 106 0 46 0 107 0 46 0 108 0 46 0 109 0 46 0 110 0 46 0 111 0 46 0 127 0 46 0 128 0 46 0 129] 
#[0 3 161 0 53 0 77 0 112 0 113 1 132] 
#[1 0 50 0 1 0 50 0 5 0 50 0 11 0 50 0 12 0 23 0 13 0 50 0 15 0 50 0 30 0 50 0 42 0 50 0 44 0 50 0 45 0 50 0 49 0 50 0 52 0 50 0 53 0 50 0 58 0 50 0 60 0 50 0 61 0 50 0 63 0 50 0 65 0 50 0 66 0 50 0 69 0 50 0 70 0 50 0 72 0 50 0 77 0 50 0 79 0 50 0 87 0 50 0 88 0 50 0 89 0 50 0 90 0 50 0 91 0 50 0 94 0 50 0 96 0 50 0 97 0 50 0 99 0 50 0 112 0 50 0 113 0 50 0 126 0 50 0 127 0 50 0 129] 
#[0 0 54 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 3 173 0 53 3 173 0 77 3 169 0 81 3 173 0 112 3 173 0 113 3 173 1 132] 
#[0 3 177 0 53 0 77 0 112 0 113 1 132] 
#[0 0 58 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 3 181 0 53 0 77 0 112 0 113 1 132] 
#[0 3 185 0 53 0 77 0 112 0 113 1 132] 
#[0 3 189 0 53 0 77 0 112 0 113 1 132] 
#[1 3 193 0 53 3 197 0 66 0 10 0 69 3 201 0 72 3 205 0 79 3 209 0 91 0 189 0 173 3 213 0 174] 
#[1 1 5 0 5 3 217 0 15 3 221 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 3 225 0 104 1 5 0 112 1 5 0 113 3 229 0 167 3 233 1 105 1 5 1 108 1 5 1 132] 
#[0 0 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 3 237 0 31] 
#[0 0 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 0 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 3 245 0 142 3 245 0 143 3 241 0 160 3 245 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 3 249 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[0 0 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 3 253 0 69] 
#[0 0 106 0 69] 
#[0 0 110 0 69] 
#[0 0 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 170 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113] 
#[0 4 1 0 1] 
#[1 0 174 0 1 0 174 0 13 0 174 0 14 0 174 0 19 0 27 0 30 0 174 0 31 0 174 0 35 0 174 0 45 0 174 0 46 0 174 0 51 0 174 0 104 0 174 0 108 4 9 1 106 4 13 1 107] 
#[1 0 49 0 52 4 17 0 53 0 57 0 58 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 85 0 79 0 97 0 88 0 101 0 89 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 4 21 0 162 4 25 0 163 4 29 0 166 4 33 0 171 0 185 0 172 0 189 0 173 0 193 0 174 4 37 0 186 4 41 0 187 0 205 0 188 0 209 0 189 4 45 0 198 4 49 0 206 4 53 0 207 4 57 0 208 4 61 0 209 4 65 0 214 4 69 0 217 0 241 0 218 0 245 0 219 4 73 0 220] 
#[0 0 178 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 77 0 135 4 77 0 136 4 77 0 138 2 105 0 239 4 77 0 245 4 77 0 246 4 77 0 247 4 77 0 248 4 77 0 249 4 77 0 250 4 77 0 251 4 77 0 252 4 77 0 255 4 77 1 0 4 77 1 8 4 77 1 9 4 77 1 15 4 77 1 19 4 77 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 77 1 30 4 77 1 31 4 77 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 77 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 4 81 0 81 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 85 0 135 4 85 0 136 4 85 0 138 2 105 0 239 4 85 0 245 4 85 0 246 4 85 0 247 4 85 0 248 4 85 0 249 4 85 0 250 4 85 0 251 4 85 0 252 4 85 0 255 4 85 1 0 4 85 1 8 4 85 1 9 4 85 1 15 4 85 1 19 4 85 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 85 1 30 4 85 1 31 4 85 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 85 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 4 89 0 81 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 93 0 135 4 93 0 136 4 93 0 138 2 105 0 239 4 93 0 245 4 93 0 246 4 93 0 247 4 93 0 248 4 93 0 249 4 93 0 250 4 93 0 251 4 93 0 252 4 93 0 255 4 93 1 0 4 93 1 8 4 93 1 9 4 93 1 15 4 93 1 19 4 93 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 93 1 30 4 93 1 31 4 93 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 93 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 14 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 59 0 6 0 60 0 6 0 67 0 6 0 70 0 6 0 71 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 80 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 97 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 4 97 0 133 0 6 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 101 0 135 4 101 0 136 4 101 0 138 2 105 0 239 4 101 0 245 4 101 0 246 4 101 0 247 4 101 0 248 4 101 0 249 4 101 0 250 4 101 0 251 4 101 0 252 4 101 0 255 4 101 1 0 4 101 1 8 4 101 1 9 4 101 1 15 4 101 1 19 4 101 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 101 1 30 4 101 1 31 4 101 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 101 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 105 0 135 4 105 0 136 4 105 0 138 2 105 0 239 4 105 0 245 4 105 0 246 4 105 0 247 4 105 0 248 4 105 0 249 4 105 0 250 4 105 0 251 4 105 0 252 4 105 0 255 4 105 1 0 4 105 1 8 4 105 1 9 4 105 1 15 4 105 1 19 4 105 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 105 1 30 4 105 1 31 4 105 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 105 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 182 0 2 0 37 0 3 2 49 0 5 0 182 0 6 0 182 0 7 1 21 0 8 1 25 0 9 0 182 0 10 1 29 0 13 0 182 0 14 1 33 0 15 0 182 0 16 0 182 0 17 0 182 0 18 0 182 0 19 1 37 0 20 0 182 0 21 0 182 0 23 0 182 0 27 0 182 0 28 1 49 0 30 0 182 0 31 0 182 0 32 0 182 0 33 0 182 0 34 0 182 0 35 0 182 0 36 0 182 0 37 0 182 0 38 0 182 0 39 0 182 0 40 0 182 0 41 0 182 0 42 2 61 0 44 1 61 0 45 0 182 0 46 0 182 0 47 0 182 0 48 0 182 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 0 182 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 31 0 104 1 129 0 105 0 182 0 106 1 133 0 107 0 182 0 108 0 182 0 109 0 182 0 110 0 182 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 0 182 0 128 0 182 0 129 4 109 0 135 4 109 0 136 4 109 0 138 2 105 0 239 4 109 0 245 4 109 0 246 4 109 0 247 4 109 0 248 4 109 0 249 4 109 0 250 4 109 0 251 4 109 0 252 4 109 0 255 4 109 1 0 4 109 1 8 4 109 1 9 4 109 1 15 4 109 1 19 4 109 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 109 1 30 4 109 1 31 4 109 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 109 1 120 2 69 1 121 2 49 1 132 2 73 1 137 0 182 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 113 0 135 4 113 0 136 4 113 0 138 2 105 0 239 4 113 0 245 4 113 0 246 4 113 0 247 4 113 0 248 4 113 0 249 4 113 0 250 4 113 0 251 4 113 0 252 4 113 0 255 4 113 1 0 4 113 1 8 4 113 1 9 4 113 1 15 4 113 1 19 4 113 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 113 1 30 4 113 1 31 4 113 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 113 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 4 117 0 5 2 61 0 44 4 117 0 53 4 117 0 60 4 117 0 77 4 117 0 87 4 117 0 90 4 117 0 112 4 117 0 113 4 117 1 108 4 121 1 112 2 61 1 113 4 117 1 132] 
#[0 0 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 0 190 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 46 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 59 0 6 0 60 0 6 0 67 0 6 0 70 0 6 0 71 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 80 0 6 0 86 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 97 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 4 125 0 133 0 6 1 137] 
#[1 2 153 0 66 0 10 0 69 4 129 0 80 2 157 0 97 1 125 0 104 0 189 0 173 2 161 0 174 4 133 0 252] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 4 137 0 135 4 137 0 136 4 137 0 138 2 105 0 239 4 137 0 245 4 137 0 246 4 137 0 247 4 137 0 248 4 137 0 249 4 137 0 250 4 137 0 251 4 137 0 252 4 137 0 255 4 137 1 0 4 137 1 8 4 137 1 9 4 137 1 15 4 137 1 19 4 137 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 137 1 30 4 137 1 31 4 137 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 137 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 194 0 2 0 37 0 3 2 49 0 5 0 194 0 6 0 194 0 7 1 21 0 8 1 25 0 9 0 194 0 10 1 29 0 13 0 194 0 14 1 33 0 15 0 194 0 16 0 194 0 17 0 194 0 18 0 194 0 19 1 37 0 20 0 194 0 21 0 194 0 23 1 41 0 24 1 45 0 26 0 194 0 27 0 194 0 28 1 49 0 30 0 194 0 31 0 194 0 32 0 194 0 33 0 194 0 34 0 194 0 35 0 194 0 36 0 194 0 37 0 194 0 38 0 194 0 39 0 194 0 40 0 194 0 41 0 194 0 42 2 61 0 44 1 61 0 45 0 194 0 46 0 194 0 47 0 194 0 48 0 194 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 0 194 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 35 0 104 1 129 0 105 0 194 0 106 1 133 0 107 0 194 0 108 0 194 0 109 0 194 0 110 0 194 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 4 141 0 126 1 169 0 127 0 194 0 128 0 194 0 129 4 145 0 135 4 145 0 136 4 145 0 138 2 105 0 239 4 145 0 245 4 145 0 246 4 145 0 247 4 145 0 248 4 145 0 249 4 145 0 250 4 145 0 251 4 145 0 252 4 145 0 255 4 145 1 0 4 145 1 8 4 145 1 9 4 145 1 15 4 145 1 19 4 145 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 145 1 30 4 145 1 31 4 145 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 145 1 120 2 69 1 121 2 49 1 132 2 73 1 137 0 194 1 138] 
#[1 1 17 0 1 0 198 0 2 0 37 0 3 2 49 0 5 0 198 0 6 0 198 0 7 1 21 0 8 1 25 0 9 0 198 0 10 1 29 0 13 0 198 0 14 1 33 0 15 0 198 0 16 0 198 0 17 0 198 0 18 0 198 0 19 1 37 0 20 0 198 0 21 0 198 0 23 1 41 0 24 1 45 0 26 0 198 0 27 0 198 0 28 1 49 0 30 0 198 0 31 0 198 0 32 0 198 0 33 0 198 0 34 0 198 0 35 0 198 0 36 0 198 0 37 0 198 0 38 0 198 0 39 0 198 0 40 0 198 0 41 0 198 0 42 2 61 0 44 1 61 0 45 0 198 0 46 0 198 0 47 0 198 0 48 0 198 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 0 198 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 39 0 104 1 129 0 105 0 198 0 106 1 133 0 107 0 198 0 108 0 198 0 109 0 198 0 110 0 198 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 4 149 0 126 1 169 0 127 0 198 0 128 0 198 0 129 4 153 0 135 4 153 0 136 4 153 0 138 2 105 0 239 4 153 0 245 4 153 0 246 4 153 0 247 4 153 0 248 4 153 0 249 4 153 0 250 4 153 0 251 4 153 0 252 4 153 0 255 4 153 1 0 4 153 1 8 4 153 1 9 4 153 1 15 4 153 1 19 4 153 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 4 153 1 30 4 153 1 31 4 153 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 4 153 1 120 2 69 1 121 2 49 1 132 2 73 1 137 0 198 1 138] 
#[0 0 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 4 241 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 5 69 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 73 0 135 5 73 0 136 5 73 0 138 2 105 0 239 5 73 0 245 5 73 0 246 5 73 0 247 5 73 0 248 5 73 0 249 5 73 0 250 5 73 0 251 5 73 0 252 5 73 0 255 5 73 1 0 5 73 1 8 5 73 1 9 5 73 1 15 5 73 1 19 5 73 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 73 1 30 5 73 1 31 5 73 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 73 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 5 77 1 38 5 81 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 1 125 0 104 5 85 0 252] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 89 0 135 5 89 0 136 5 89 0 138 2 105 0 239 5 89 0 245 5 89 0 246 5 89 0 247 5 89 0 248 5 89 0 249 5 89 0 250 5 89 0 251 5 89 0 252 5 89 0 255 5 89 1 0 5 89 1 8 5 89 1 9 5 89 1 15 5 89 1 19 5 89 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 89 1 30 5 89 1 31 5 89 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 89 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 93 0 105 5 97 0 107] 
#[1 1 17 0 1 0 206 0 2 0 37 0 3 2 49 0 5 0 206 0 6 0 206 0 7 1 21 0 8 1 25 0 9 0 206 0 10 1 29 0 13 0 206 0 14 1 33 0 15 0 206 0 16 0 206 0 17 0 206 0 18 0 206 0 19 1 37 0 20 0 206 0 21 0 206 0 23 1 41 0 24 1 45 0 26 0 206 0 27 0 206 0 28 1 49 0 30 0 206 0 31 0 206 0 32 0 206 0 33 0 206 0 34 0 206 0 35 0 206 0 36 0 206 0 37 0 206 0 38 0 206 0 39 0 206 0 40 0 206 0 41 0 206 0 42 2 61 0 44 1 61 0 45 0 206 0 46 0 206 0 47 0 206 0 48 0 206 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 0 206 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 43 0 104 1 129 0 105 0 206 0 106 1 133 0 107 0 206 0 108 0 206 0 109 0 206 0 110 0 206 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 0 206 0 128 0 206 0 129 5 101 0 135 5 101 0 136 5 101 0 138 2 105 0 239 5 101 0 245 5 101 0 246 5 101 0 247 5 101 0 248 5 101 0 249 5 101 0 250 5 101 0 251 5 101 0 252 5 101 0 255 5 101 1 0 5 101 1 8 5 101 1 9 5 101 1 15 5 101 1 19 5 101 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 101 1 30 5 101 1 31 5 101 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 101 1 120 2 69 1 121 2 49 1 132 2 73 1 137 0 206 1 138] 
#[0 0 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 3 193 0 53 3 197 0 66 0 10 0 69 3 201 0 72 3 205 0 79 3 209 0 91 1 125 0 104 0 189 0 173 3 213 0 174 5 105 0 252] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 5 109 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 113 0 135 5 113 0 136 5 113 0 138 2 105 0 239 5 113 0 245 5 113 0 246 5 113 0 247 5 113 0 248 5 113 0 249 5 113 0 250 5 113 0 251 5 113 0 252 5 113 0 255 5 113 1 0 5 113 1 8 5 113 1 9 5 113 1 15 5 113 1 19 5 113 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 113 1 30 5 113 1 31 5 113 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 113 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 6 0 1 0 6 0 3 0 6 0 5 0 6 0 8 0 6 0 9 0 6 0 13 0 6 0 15 0 6 0 20 0 6 0 24 0 6 0 26 0 6 0 30 0 6 0 31 0 6 0 44 0 6 0 45 0 6 0 52 0 6 0 53 0 6 0 56 0 6 0 57 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 74 0 6 0 75 0 6 0 77 0 6 0 78 0 6 0 79 0 6 0 80 0 6 0 84 0 6 0 86 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 92 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 102 0 6 0 104 0 6 0 105 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 126 0 6 0 127 5 117 0 133 0 6 1 137] 
#[1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 13 0 14 0 20 0 14 0 24 0 14 0 30 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 67 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 47 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 127 0 14 0 129 5 125 0 180 5 129 1 20 5 133 1 23 0 14 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 5 137 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 141 0 135 5 141 0 136 5 141 0 138 2 105 0 239 5 141 0 245 5 141 0 246 5 141 0 247 5 141 0 248 5 141 0 249 5 141 0 250 5 141 0 251 5 141 0 252 5 141 0 255 5 141 1 0 5 141 1 8 5 141 1 9 5 141 1 15 5 141 1 19 5 141 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 141 1 30 5 141 1 31 5 141 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 141 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 0 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 5 145 0 29] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 5 153 0 135 5 153 0 136 5 153 0 138 3 57 0 236 5 153 1 70 5 153 1 72 5 153 1 73 5 153 1 74 5 153 1 75 5 153 1 78 5 153 1 79 5 153 1 80 5 153 1 81 5 153 1 82 3 101 1 83 5 153 1 91 5 153 1 92 5 153 1 93 5 153 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 5 153 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 0 242 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 0 70 0 1 0 246 0 2 0 70 0 3 0 70 0 5 0 246 0 6 0 246 0 7 0 70 0 8 0 51 0 9 0 246 0 10 0 70 0 13 0 51 0 15 0 246 0 16 0 246 0 17 0 246 0 18 0 51 0 20 0 246 0 21 0 246 0 23 0 51 0 24 0 51 0 26 0 246 0 27 0 246 0 28 0 70 0 30 0 51 0 31 0 246 0 32 0 246 0 33 0 246 0 34 0 246 0 35 0 246 0 36 0 246 0 38 0 246 0 39 0 246 0 40 0 246 0 41 0 246 0 42 0 70 0 44 0 70 0 45 0 246 0 47 0 246 0 48 0 246 0 51 0 70 0 52 0 70 0 53 0 70 0 56 0 70 0 57 0 70 0 58 0 70 0 59 0 70 0 60 0 70 0 61 0 70 0 65 0 70 0 66 0 70 0 67 0 70 0 69 0 70 0 70 0 70 0 71 0 70 0 72 0 70 0 74 0 70 0 75 0 70 0 77 0 70 0 78 0 70 0 79 0 70 0 80 0 70 0 84 0 70 0 86 0 70 0 87 0 70 0 88 0 70 0 89 0 70 0 90 0 70 0 91 0 70 0 92 0 70 0 94 0 70 0 96 0 70 0 97 0 70 0 99 0 70 0 102 0 70 0 104 0 70 0 105 0 246 0 106 0 51 0 107 0 51 0 108 0 246 0 109 0 246 0 110 0 246 0 111 0 70 0 112 0 70 0 113 0 70 0 117 0 70 0 118 0 70 0 120 0 70 0 121 0 70 0 122 0 70 0 123 0 70 0 125 0 70 0 126 0 51 0 127 0 246 0 128 0 246 0 129 0 70 1 137 0 70 1 138] 
#[1 0 250 0 2 0 250 0 6 0 250 0 7 0 250 0 9 0 250 0 10 0 250 0 15 0 250 0 16 0 250 0 17 0 250 0 18 0 250 0 20 0 250 0 21 0 250 0 23 0 250 0 24 0 250 0 26 0 250 0 27 0 250 0 28 0 55 0 31 0 250 0 32 0 250 0 33 0 250 0 34 0 250 0 35 0 250 0 36 0 250 0 38 0 250 0 39 0 250 0 40 0 250 0 41 0 250 0 42 0 250 0 47 0 250 0 48 0 250 0 51 0 250 0 106 0 250 0 107 0 250 0 108 0 250 0 109 0 250 0 110 0 250 0 111 0 250 0 127 0 250 0 128 0 250 0 129] 
#[0 0 59 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 1 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 5 161 0 74 5 165 0 239] 
#[1 1 17 0 1 0 63 0 3 0 67 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 0 71 0 30 2 61 0 44 1 61 0 45 0 75 0 52 0 79 0 53 1 69 0 56 1 73 0 57 0 170 0 58 1 77 0 59 0 83 0 60 0 170 0 61 0 170 0 65 0 170 0 66 1 81 0 67 0 170 0 69 1 85 0 70 1 89 0 71 0 170 0 72 1 93 0 74 1 97 0 75 0 87 0 77 1 101 0 78 0 170 0 79 1 105 0 80 0 170 0 84 1 109 0 86 0 91 0 87 0 170 0 88 0 170 0 89 0 95 0 90 0 170 0 91 1 113 0 92 0 170 0 94 0 170 0 96 0 99 0 97 0 170 0 99 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 0 103 0 112 0 107 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 169 0 135 5 169 0 136 5 169 0 138 2 105 0 239 1 213 0 245 5 169 0 246 5 173 0 247 5 169 0 248 5 169 0 249 5 169 0 250 5 169 0 251 5 173 0 252 5 173 0 255 5 173 1 0 5 169 1 8 5 169 1 9 5 169 1 15 5 169 1 19 5 173 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 173 1 30 5 173 1 31 5 173 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 169 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 0 0 1 138] 
#[0 1 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 1 10 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 1 14 0 2 1 14 0 6 1 14 0 7 1 14 0 9 1 14 0 10 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 1 14 0 20 1 14 0 21 1 14 0 23 1 14 0 24 1 14 0 26 1 14 0 27 1 14 0 28 6 69 0 31 1 14 0 32 1 14 0 33 1 14 0 34 1 14 0 35 1 14 0 36 1 14 0 38 1 14 0 39 1 14 0 40 1 14 0 41 1 14 0 42 1 14 0 47 1 14 0 48 1 14 0 51 1 14 0 106 1 14 0 107 1 14 0 109 1 14 0 110 1 14 0 111 1 14 0 127 1 14 0 128 1 14 0 129] 
#[1 1 18 0 1 1 22 0 2 1 18 0 3 1 18 0 5 1 22 0 6 1 22 0 7 1 18 0 8 0 111 0 9 1 22 0 10 1 18 0 13 0 111 0 15 1 22 0 16 1 22 0 17 1 22 0 18 0 111 0 20 1 22 0 21 1 22 0 23 0 111 0 24 0 111 0 26 1 22 0 27 1 22 0 28 1 18 0 30 1 18 0 31 1 22 0 32 1 22 0 33 1 22 0 34 1 22 0 35 1 22 0 36 1 22 0 38 1 22 0 39 1 22 0 40 1 22 0 41 1 22 0 42 1 18 0 44 1 18 0 45 1 22 0 47 1 22 0 48 1 22 0 51 1 18 0 52 1 18 0 53 1 18 0 56 1 18 0 57 1 18 0 58 1 18 0 59 1 18 0 60 1 18 0 61 1 18 0 65 1 18 0 66 1 18 0 67 1 18 0 69 1 18 0 70 1 18 0 71 1 18 0 72 1 18 0 74 1 18 0 75 1 18 0 77 1 18 0 78 1 18 0 79 1 18 0 80 1 18 0 84 1 18 0 86 1 18 0 87 1 18 0 88 1 18 0 89 1 18 0 90 1 18 0 91 1 18 0 92 1 18 0 94 1 18 0 96 1 18 0 97 1 18 0 99 1 18 0 102 1 18 0 104 1 18 0 105 1 22 0 106 0 111 0 107 1 18 0 108 1 22 0 109 1 22 0 110 1 22 0 111 1 18 0 112 1 18 0 113 1 18 0 117 1 18 0 118 1 18 0 120 1 18 0 121 1 18 0 122 1 18 0 123 1 18 0 125 1 18 0 126 0 111 0 127 1 22 0 128 1 22 0 129 1 18 1 137 1 18 1 138] 
#[0 1 26 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 38 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 42 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 46 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 50 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 54 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 62 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 66 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 70 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 74 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 78 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 82 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 86 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 1 85 0 70 1 97 0 75 1 121 0 102 6 73 1 25 6 77 1 26 6 81 1 27 6 85 1 28] 
#[0 1 90 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 94 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 1 98 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 0 174 0 1 1 102 0 2 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 10 1 102 0 13 1 102 0 14 1 102 0 15 1 102 0 16 1 102 0 17 1 102 0 18 1 102 0 19 1 102 0 20 1 102 0 21 1 102 0 23 1 102 0 24 1 102 0 25 1 102 0 26 1 102 0 27 1 102 0 28 1 102 0 29 0 115 0 30 1 102 0 31 1 102 0 32 1 102 0 33 1 102 0 34 1 102 0 35 1 102 0 36 1 102 0 37 1 102 0 38 1 102 0 39 1 102 0 40 1 102 0 41 1 102 0 42 1 102 0 46 1 102 0 47 1 102 0 48 1 102 0 51 1 102 0 64 1 102 0 70 1 102 0 71 1 102 0 73 1 102 0 101 1 102 0 104 1 102 0 105 1 102 0 106 1 102 0 107 1 102 0 108 1 102 0 109 1 102 0 110 1 102 0 111 1 102 0 127 1 102 0 128 1 102 0 129 4 9 1 106 4 13 1 107 1 102 1 138] 
#[1 1 106 0 2 1 106 0 6 1 106 0 7 1 106 0 9 1 106 0 10 6 89 0 13 1 106 0 14 1 106 0 15 1 106 0 16 1 106 0 17 1 106 0 18 1 106 0 19 1 106 0 20 1 106 0 21 1 106 0 23 1 106 0 24 1 106 0 26 1 106 0 27 1 106 0 28 1 106 0 31 1 106 0 32 1 106 0 33 1 106 0 34 1 106 0 35 1 106 0 36 1 106 0 37 1 106 0 38 1 106 0 39 1 106 0 40 1 106 0 41 1 106 0 42 1 106 0 46 1 106 0 47 1 106 0 48 1 106 0 51 1 106 0 64 0 119 0 104 1 106 0 106 1 106 0 107 1 106 0 108 1 106 0 109 1 106 0 110 1 106 0 111 1 106 0 127 1 106 0 128 1 106 0 129 1 106 1 138] 
#[1 1 110 0 2 1 110 0 6 1 110 0 7 1 110 0 9 1 110 0 10 1 110 0 13 1 110 0 14 1 110 0 15 1 110 0 16 1 110 0 17 1 110 0 18 1 110 0 19 1 110 0 20 1 110 0 21 1 110 0 23 1 110 0 24 1 110 0 25 1 110 0 26 1 110 0 27 1 110 0 28 1 110 0 29 6 97 0 30 1 110 0 31 1 110 0 32 1 110 0 33 1 110 0 34 1 110 0 35 1 110 0 36 1 110 0 37 1 110 0 38 1 110 0 39 1 110 0 40 1 110 0 41 1 110 0 42 1 110 0 46 1 110 0 47 1 110 0 48 1 110 0 51 1 110 0 64 1 110 0 71 1 110 0 73 1 110 0 104 1 110 0 105 1 110 0 106 1 110 0 107 1 110 0 108 1 110 0 109 1 110 0 110 1 110 0 111 1 110 0 127 1 110 0 128 1 110 0 129 6 101 1 110 6 105 1 111 1 110 1 138] 
#[1 1 114 0 2 1 114 0 6 1 114 0 7 1 114 0 9 1 114 0 10 1 114 0 13 1 114 0 14 1 114 0 15 1 114 0 16 1 114 0 17 1 114 0 18 1 114 0 19 1 114 0 20 1 114 0 21 1 114 0 23 1 114 0 24 1 114 0 25 1 114 0 26 1 114 0 27 1 114 0 28 1 114 0 29 0 123 0 30 1 114 0 31 1 114 0 32 1 114 0 33 1 114 0 34 1 114 0 35 1 114 0 36 1 114 0 37 1 114 0 38 1 114 0 39 1 114 0 40 1 114 0 41 1 114 0 42 1 114 0 46 1 114 0 47 1 114 0 48 1 114 0 51 1 114 0 64 1 114 0 71 1 114 0 73 1 114 0 104 1 114 0 105 1 114 0 106 1 114 0 107 1 114 0 108 1 114 0 109 1 114 0 110 1 114 0 111 1 114 0 127 1 114 0 128 1 114 0 129 1 114 1 138] 
#[0 1 118 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 6 97 0 30 6 101 1 110 6 113 1 111] 
#[0 1 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 4 129 0 80 1 125 0 104 4 133 0 252] 
#[0 0 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 0 34 0 1 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 45 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 0 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 1 125 0 104 5 105 0 252] 
#[0 0 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 0 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 5 169 0 135 5 169 0 136 5 169 0 138 2 105 0 239 1 213 0 245 5 169 0 246 5 173 0 247 5 169 0 248 5 169 0 249 5 169 0 250 5 169 0 251 5 173 0 252 5 173 0 255 5 173 1 0 5 169 1 8 5 169 1 9 5 169 1 15 5 169 1 19 5 173 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 5 173 1 30 5 173 1 31 5 173 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 5 169 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 0 0 1 138] 
#[0 1 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 22 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 0 0 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 6 117 0 134 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 2 137 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132 1 126 1 138] 
#[1 6 121 0 1 2 145 0 45] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 6 125 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132 1 130 1 138] 
#[0 1 134 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 108 0 112 0 113 1 138] 
#[0 1 138 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 46 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 137 1 138] 
#[1 1 5 0 5 0 45 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 1 5 0 112 1 5 0 113 6 129 0 240 6 133 1 105 1 5 1 108 1 5 1 132] 
#[1 1 142 0 1 1 142 0 13 1 142 0 14 1 142 0 19 0 127 0 30 1 142 0 31 1 142 0 35 1 142 0 45 1 142 0 46 1 142 0 51 1 142 0 104 1 142 0 108 4 9 1 106 6 137 1 107] 
#[1 0 38 0 69 6 141 0 118 6 141 0 120 6 141 0 175 6 141 1 137] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 6 145 0 174] 
#[0 1 146 0 69] 
#[0 6 149 0 53 0 77 0 112 0 113 1 132] 
#[0 6 153 0 29] 
#[1 2 153 0 66 0 10 0 69 6 157 0 97 0 189 0 173 6 161 0 174] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 6 165 0 174] 
#[0 1 150 0 69] 
#[0 6 169 0 29] 
#[1 2 153 0 66 0 10 0 69 6 173 0 97 0 189 0 173 6 177 0 174] 
#[1 6 181 0 52 2 153 0 66 0 10 0 69 6 185 0 97 0 189 0 173 6 189 0 174] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 6 193 0 174] 
#[0 1 154 0 69] 
#[1 6 197 0 101 6 201 0 104 6 205 0 127 6 209 0 223 6 213 0 230] 
#[0 6 221 0 53 0 77 0 87 0 112 0 113 0 164 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 6 229 0 133] 
#[0 1 158 0 69 0 104] 
#[0 1 162 0 69 0 104] 
#[1 1 166 0 69 6 233 0 104] 
#[0 1 170 0 69 0 104] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 1 174 0 101 1 174 0 104 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 6 245 1 125 3 153 1 126 3 137 1 132] 
#[0 1 178 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129 1 138] 
#[0 1 182 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 6 249 0 14 2 249 0 15 2 253 0 30 6 253 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 7 5 0 135 7 5 0 136 7 5 0 138 7 1 0 236 7 5 1 70 7 5 1 72 7 5 1 73 7 5 1 74 7 5 1 75 7 9 1 76 7 13 1 77 7 5 1 78 7 5 1 79 7 5 1 80 7 5 1 81 7 5 1 82 3 101 1 83 7 5 1 91 7 5 1 92 7 5 1 93 7 5 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 7 5 1 122 7 17 1 125 3 153 1 126 2 49 1 132] 
#[1 7 21 0 58 7 25 0 81] 
#[1 4 117 0 5 3 137 0 44 4 117 0 53 4 117 0 60 4 117 0 77 4 117 0 87 4 117 0 90 4 117 0 112 4 117 0 113 4 117 1 108 3 137 1 113 7 29 1 126 4 117 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 7 33 0 236 3 137 1 108 3 137 1 113 7 37 1 125 3 153 1 126 3 137 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 7 41 0 135 7 41 0 136 7 41 0 138 3 57 0 236 7 41 1 70 7 41 1 72 7 41 1 73 7 41 1 74 7 41 1 75 7 41 1 78 7 41 1 79 7 41 1 80 7 41 1 81 7 41 1 82 3 101 1 83 7 41 1 91 7 41 1 92 7 41 1 93 7 41 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 7 41 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 1 186 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 7 45 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 7 49 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 7 61 1 96 3 125 1 99 7 65 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 1 190 0 69 7 73 0 118 7 73 0 120 7 73 0 175 7 73 1 137] 
#[1 6 205 0 127 7 77 0 223] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 7 81 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 7 89 0 66 1 194 0 69] 
#[0 1 198 0 1 0 2 0 5 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 53 0 60 0 63 0 64 0 66 0 69 0 70 0 72 0 77 0 81 0 87 0 90 0 97 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 0 14 0 3 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 0 131 0 53 0 14 0 58 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 0 135 0 77 2 49 0 87 2 49 0 90 3 33 0 97 0 139 0 112 0 143 0 113 0 147 0 126 1 169 0 127 7 93 0 128 3 45 0 129 5 153 0 135 5 153 0 136 5 153 0 138 7 97 0 180 7 101 0 224 7 105 0 225 7 109 0 226 3 57 0 236 5 153 1 70 5 153 1 72 5 153 1 73 5 153 1 74 5 153 1 75 5 153 1 78 5 153 1 79 5 153 1 80 5 153 1 81 5 153 1 82 3 101 1 83 5 153 1 91 5 153 1 92 5 153 1 93 5 153 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 5 153 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 7 141 0 11 7 141 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 7 121 0 81 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 7 141 0 126 1 169 0 127 3 45 0 129 7 125 0 135 7 125 0 136 7 125 0 138 3 57 0 236 7 125 1 71 7 125 1 72 7 125 1 73 7 125 1 74 7 125 1 75 7 125 1 78 7 125 1 79 7 125 1 80 7 125 1 81 7 125 1 82 3 101 1 83 7 125 1 92 7 125 1 94 7 125 1 95 7 137 1 100 7 141 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 7 125 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 1 202 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 7 145 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 7 149 0 58 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 7 153 0 135 7 153 0 136 7 153 0 138 3 57 0 236 7 153 1 70 7 153 1 72 7 153 1 73 7 153 1 74 7 153 1 75 7 153 1 78 7 153 1 79 7 153 1 80 7 153 1 81 7 153 1 82 3 101 1 83 7 153 1 91 7 153 1 92 7 153 1 93 7 153 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 7 153 1 122 7 157 1 125 3 153 1 126 2 49 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 21 0 66 0 42 0 69 3 137 0 77 3 137 0 87 3 137 0 90 3 33 0 97 3 137 0 112 3 137 0 113 7 161 1 83 3 137 1 108 3 137 1 113 7 165 1 125 3 153 1 126 3 137 1 132] 
#[1 6 197 0 101 7 169 0 104 7 173 0 230] 
#[0 1 206 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 210 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 214 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 218 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 222 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 226 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 238 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 7 177 0 69] 
#[0 1 242 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 1 254 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 2 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 2 6 0 2 2 6 0 6 2 6 0 7 2 6 0 9 2 6 0 10 2 6 0 14 2 6 0 15 2 6 0 16 2 6 0 17 2 6 0 18 2 6 0 19 2 6 0 20 2 6 0 21 2 6 0 23 2 6 0 24 2 6 0 26 2 6 0 27 2 6 0 28 2 6 0 29 2 6 0 30 2 6 0 31 2 6 0 32 2 6 0 33 2 6 0 34 2 6 0 35 2 6 0 36 2 6 0 37 2 6 0 38 2 6 0 39 2 6 0 40 2 6 0 41 2 6 0 42 2 6 0 46 2 6 0 47 2 6 0 48 2 6 0 51 2 6 0 64 2 6 0 70 2 6 0 101 2 6 0 104 2 6 0 105 2 6 0 106 2 6 0 107 2 6 0 108 2 6 0 109 2 6 0 110 2 6 0 111 2 6 0 127 2 6 0 128 2 6 0 129 7 181 1 98 2 6 1 138] 
#[0 0 151 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 2 22 0 2 2 22 0 6 2 22 0 7 2 22 0 9 2 22 0 10 7 185 0 13 2 22 0 14 2 22 0 15 2 22 0 16 2 22 0 17 2 22 0 18 2 22 0 19 2 22 0 20 2 22 0 21 2 22 0 23 2 22 0 24 2 22 0 26 2 22 0 27 2 22 0 28 2 22 0 29 0 155 0 30 2 22 0 31 2 22 0 32 2 22 0 33 2 22 0 34 2 22 0 35 2 22 0 36 2 22 0 37 2 22 0 38 2 22 0 39 2 22 0 40 2 22 0 41 2 22 0 42 2 22 0 46 2 22 0 47 2 22 0 48 2 22 0 51 2 22 0 64 2 22 0 70 2 22 0 101 2 22 0 104 2 22 0 105 2 22 0 106 2 22 0 107 2 22 0 108 2 22 0 109 2 22 0 110 2 22 0 111 7 193 0 127 2 22 0 128 2 22 0 129 7 197 1 114 7 201 1 127 2 22 1 138] 
#[1 7 205 0 30 7 209 1 123 7 213 1 124] 
#[0 2 26 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 2 30 0 17 7 217 0 70 0 159 0 101 0 159 0 104] 
#[1 2 38 0 2 2 38 0 6 2 38 0 7 2 38 0 9 2 38 0 10 2 38 0 14 2 38 0 15 2 38 0 16 2 38 0 17 2 38 0 18 2 38 0 19 2 38 0 20 2 38 0 21 2 38 0 23 2 38 0 24 2 38 0 26 2 38 0 27 2 38 0 28 2 38 0 29 0 163 0 30 2 38 0 31 2 38 0 32 2 38 0 33 2 38 0 34 2 38 0 35 2 38 0 36 2 38 0 37 2 38 0 38 2 38 0 39 2 38 0 40 2 38 0 41 2 38 0 42 2 38 0 46 2 38 0 47 2 38 0 48 2 38 0 51 2 38 0 64 2 38 0 70 2 38 0 101 2 38 0 104 2 38 0 105 2 38 0 106 2 38 0 107 2 38 0 108 2 38 0 109 2 38 0 110 2 38 0 111 2 38 0 127 2 38 0 128 2 38 0 129 7 209 1 123 7 221 1 124 2 38 1 138] 
#[0 7 225 0 53 0 77 0 112 0 113 1 132] 
#[1 7 229 0 31 7 233 0 104] 
#[1 7 237 0 60 7 241 0 73 7 245 0 87 7 249 0 90] 
#[0 7 253 0 53 0 77 0 112 0 113 1 132] 
#[0 8 1 0 29] 
#[1 8 5 0 13 8 9 0 31 6 197 0 101 8 13 0 104 6 205 0 127 8 17 0 223 8 21 0 230] 
#[1 8 25 0 29 8 29 0 35 6 197 0 101 2 42 0 104 6 205 0 127 8 33 0 211 8 37 0 223 8 33 0 230] 
#[1 8 45 0 29 8 49 0 31 8 53 0 35 6 197 0 101 6 205 0 127 8 57 0 223 8 61 0 230] 
#[1 6 197 0 101 8 65 0 104 6 205 0 127 8 69 0 223 8 73 0 230] 
#[0 8 77 0 91] 
#[1 0 38 0 69 8 81 0 104 8 85 0 118 8 85 0 120 8 85 0 175 8 85 1 137] 
#[1 8 89 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 8 93 0 58 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 6 205 0 127 8 97 0 223 3 137 1 108 3 137 1 113 8 101 1 125 3 153 1 126 3 137 1 132] 
#[0 8 105 0 53 0 77 0 112 0 113 1 132] 
#[0 8 109 0 53 0 77 0 112 0 113 1 132] 
#[0 2 46 0 69] 
#[0 2 50 0 19 0 31 0 108] 
#[1 2 149 0 5 8 113 0 15 2 149 0 53 2 149 0 60 2 149 0 77 2 149 0 87 2 149 0 90 8 117 0 104 2 149 0 112 2 149 0 113 2 149 1 108 2 149 1 132] 
#[1 1 5 0 5 3 217 0 15 3 221 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 3 225 0 104 8 121 0 108 1 5 0 112 1 5 0 113 8 125 0 167 3 233 1 105 1 5 1 108 1 5 1 132] 
#[0 8 129 0 31] 
#[1 2 54 0 19 8 133 0 30 2 54 0 31 8 137 0 51 2 54 0 108] 
#[0 2 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 62 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 66 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 70 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113] 
#[0 8 141 0 53 0 77 0 112 0 113 1 132] 
#[1 8 145 0 13 8 149 0 45 8 153 0 104] 
#[0 8 157 0 5 0 53 0 60 0 77 0 87 0 90 0 112 0 113 1 108 1 132] 
#[0 2 74 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[1 2 78 0 1 2 78 0 13 2 78 0 14 2 78 0 19 0 167 0 30 2 78 0 31 2 78 0 35 2 78 0 45 2 78 0 46 2 78 0 51 2 78 0 104 2 78 0 108 8 161 1 106] 
#[0 2 165 0 91] 
#[0 2 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 2 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 2 138 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 2 138 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 2 138 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 2 138 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 2 138 0 46 6 25 0 47 6 29 0 48 6 33 0 51 2 138 0 64 2 138 0 104 6 37 0 106 6 41 0 107 2 138 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 138 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 8 165 0 135 8 165 0 136 8 165 0 138 2 105 0 239 8 165 0 245 8 165 0 246 8 165 0 247 8 165 0 248 8 165 0 249 8 165 0 250 8 165 0 251 8 165 0 252 8 165 0 255 8 165 1 0 8 165 1 8 8 165 1 9 8 165 1 15 8 165 1 19 8 165 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 165 1 30 8 165 1 31 8 165 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 165 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 2 142 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 2 142 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 2 142 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 2 142 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 2 142 0 46 6 25 0 47 6 29 0 48 6 33 0 51 2 142 0 64 2 142 0 104 6 37 0 106 6 41 0 107 2 142 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 142 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 8 169 0 135 8 169 0 136 8 169 0 138 2 105 0 239 8 169 0 245 8 169 0 246 8 169 0 247 8 169 0 248 8 169 0 249 8 169 0 250 8 169 0 251 8 169 0 252 8 169 0 255 8 169 1 0 8 169 1 8 8 169 1 9 8 169 1 15 8 169 1 19 8 169 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 169 1 30 8 169 1 31 8 169 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 169 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 2 146 0 7 2 146 0 9 2 146 0 10 2 146 0 14 5 197 0 15 2 146 0 16 5 205 0 17 2 146 0 18 2 146 0 19 5 213 0 20 2 146 0 21 5 221 0 23 2 146 0 24 2 146 0 26 5 233 0 27 2 146 0 28 2 146 0 31 5 241 0 32 2 146 0 33 5 249 0 34 2 146 0 35 6 1 0 36 2 146 0 37 6 5 0 38 6 9 0 39 2 146 0 40 6 17 0 41 6 21 0 42 2 146 0 46 6 25 0 47 2 146 0 48 6 33 0 51 2 146 0 64 2 146 0 104 2 146 0 106 2 146 0 107 2 146 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 146 1 138] 
#[1 1 17 0 1 2 129 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 8 173 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 8 177 0 135 8 177 0 136 8 177 0 138 2 141 0 238 2 105 0 239 8 177 0 245 8 177 0 246 8 177 0 247 8 177 0 248 8 177 0 249 8 177 0 250 8 177 0 251 8 177 0 252 8 177 0 255 8 177 1 0 8 181 1 4 8 185 1 5 8 189 1 6 8 177 1 8 8 177 1 9 8 177 1 15 8 177 1 19 8 177 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 177 1 30 8 177 1 31 8 177 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 177 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 2 150 0 2 2 150 0 6 2 150 0 7 2 150 0 9 2 150 0 10 2 150 0 14 2 150 0 15 2 150 0 16 2 150 0 17 2 150 0 18 2 150 0 19 2 150 0 20 2 150 0 21 5 221 0 23 2 150 0 24 2 150 0 26 2 150 0 27 2 150 0 28 2 150 0 31 2 150 0 32 2 150 0 33 2 150 0 34 2 150 0 35 2 150 0 36 2 150 0 37 2 150 0 38 2 150 0 39 2 150 0 40 2 150 0 41 6 21 0 42 2 150 0 46 2 150 0 47 2 150 0 48 6 33 0 51 2 150 0 64 2 150 0 104 2 150 0 106 2 150 0 107 2 150 0 108 2 150 0 109 6 49 0 110 6 53 0 111 2 150 0 127 2 150 0 128 2 150 0 129 2 150 1 138] 
#[1 2 154 0 2 5 181 0 6 2 154 0 7 2 154 0 9 2 154 0 10 2 154 0 14 5 197 0 15 2 154 0 16 2 154 0 17 2 154 0 18 2 154 0 19 2 154 0 20 2 154 0 21 5 221 0 23 2 154 0 24 2 154 0 26 5 233 0 27 2 154 0 28 2 154 0 31 2 154 0 32 2 154 0 33 2 154 0 34 2 154 0 35 2 154 0 36 2 154 0 37 2 154 0 38 2 154 0 39 2 154 0 40 2 154 0 41 6 21 0 42 2 154 0 46 2 154 0 47 2 154 0 48 6 33 0 51 2 154 0 64 2 154 0 104 2 154 0 106 2 154 0 107 2 154 0 108 2 154 0 109 6 49 0 110 6 53 0 111 2 154 0 127 2 154 0 128 2 154 0 129 2 154 1 138] 
#[1 5 177 0 2 5 181 0 6 2 158 0 7 5 189 0 9 2 158 0 10 2 158 0 14 5 197 0 15 2 158 0 16 5 205 0 17 2 158 0 18 2 158 0 19 5 213 0 20 2 158 0 21 5 221 0 23 5 233 0 27 2 158 0 28 2 158 0 31 5 241 0 32 2 158 0 33 5 249 0 34 2 158 0 35 6 1 0 36 2 158 0 37 6 5 0 38 6 9 0 39 2 158 0 40 6 17 0 41 6 21 0 42 2 158 0 46 6 25 0 47 2 158 0 48 6 33 0 51 2 158 0 64 2 158 0 104 2 158 0 106 6 41 0 107 2 158 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 158 1 138] 
#[1 5 177 0 2 5 181 0 6 2 162 0 7 5 189 0 9 2 162 0 10 2 162 0 14 5 197 0 15 2 162 0 16 5 205 0 17 2 162 0 18 2 162 0 19 5 213 0 20 2 162 0 21 5 221 0 23 5 233 0 27 2 162 0 28 2 162 0 31 5 241 0 32 2 162 0 33 5 249 0 34 2 162 0 35 6 1 0 36 2 162 0 37 6 5 0 38 6 9 0 39 2 162 0 40 6 17 0 41 6 21 0 42 2 162 0 46 6 25 0 47 2 162 0 48 6 33 0 51 2 162 0 64 2 162 0 104 2 162 0 106 6 41 0 107 2 162 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 162 1 138] 
#[1 1 142 0 1 1 102 0 2 1 102 0 6 1 102 0 7 1 102 0 9 1 102 0 10 1 102 0 13 1 102 0 14 1 102 0 15 1 102 0 16 1 102 0 17 1 102 0 18 1 102 0 19 1 102 0 20 1 102 0 21 1 102 0 23 1 102 0 24 1 102 0 25 1 102 0 26 1 102 0 27 1 102 0 28 1 102 0 29 0 115 0 30 1 102 0 31 1 102 0 32 1 102 0 33 1 102 0 34 1 102 0 35 1 102 0 36 1 102 0 37 1 102 0 38 1 102 0 39 1 102 0 40 1 102 0 41 1 102 0 42 1 102 0 46 1 102 0 47 1 102 0 48 1 102 0 51 1 102 0 64 1 102 0 70 1 102 0 71 1 102 0 73 1 102 0 101 1 102 0 104 1 102 0 105 1 102 0 106 1 102 0 107 1 102 0 108 1 102 0 109 1 102 0 110 1 102 0 111 1 102 0 127 1 102 0 128 1 102 0 129 4 9 1 106 6 137 1 107 1 102 1 138] 
#[1 2 166 0 2 2 166 0 6 2 166 0 7 2 166 0 9 2 166 0 10 2 166 0 13 2 166 0 14 2 166 0 15 2 166 0 16 2 166 0 17 2 166 0 18 2 166 0 19 2 166 0 20 2 166 0 21 2 166 0 23 2 166 0 24 2 166 0 25 2 166 0 26 2 166 0 27 2 166 0 28 2 166 0 29 6 97 0 30 2 166 0 31 2 166 0 32 2 166 0 33 2 166 0 34 2 166 0 35 2 166 0 36 2 166 0 37 2 166 0 38 2 166 0 39 2 166 0 40 2 166 0 41 2 166 0 42 2 166 0 46 2 166 0 47 2 166 0 48 2 166 0 51 2 166 0 64 2 166 0 71 2 166 0 73 2 166 0 104 2 166 0 105 2 166 0 106 2 166 0 107 2 166 0 108 2 166 0 109 2 166 0 110 2 166 0 111 2 166 0 127 2 166 0 128 2 166 0 129 6 101 1 110 8 193 1 111 2 166 1 138] 
#[1 1 17 0 1 2 129 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 8 197 0 46 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 8 201 0 135 8 201 0 136 8 201 0 138 2 141 0 238 2 105 0 239 8 201 0 245 8 201 0 246 8 201 0 247 8 201 0 248 8 201 0 249 8 201 0 250 8 201 0 251 8 201 0 252 8 201 0 255 8 201 1 0 8 205 1 1 8 201 1 8 8 201 1 9 8 201 1 15 8 201 1 19 8 201 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 201 1 30 8 201 1 31 8 201 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 201 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 125 0 104 8 209 0 252] 
#[0 2 170 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 2 174 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 2 174 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 2 174 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 2 174 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 2 174 0 46 6 25 0 47 6 29 0 48 6 33 0 51 2 174 0 64 2 174 0 104 6 37 0 106 6 41 0 107 2 174 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 174 1 138] 
#[1 1 17 0 1 2 178 0 2 0 37 0 3 2 49 0 5 2 178 0 6 2 178 0 7 1 21 0 8 1 25 0 9 2 178 0 10 1 29 0 13 2 178 0 14 1 33 0 15 2 178 0 16 2 178 0 17 2 178 0 18 2 178 0 19 1 37 0 20 2 178 0 21 2 178 0 23 1 41 0 24 1 45 0 26 2 178 0 27 2 178 0 28 5 145 0 29 1 49 0 30 2 178 0 31 2 178 0 32 2 178 0 33 2 178 0 34 2 178 0 35 2 178 0 36 2 178 0 37 2 178 0 38 2 178 0 39 2 178 0 40 2 178 0 41 2 178 0 42 2 61 0 44 1 61 0 45 2 178 0 46 2 178 0 47 2 178 0 48 2 178 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 2 178 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 171 0 104 1 129 0 105 2 178 0 106 1 133 0 107 2 178 0 108 2 178 0 109 2 178 0 110 2 178 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 2 178 0 128 2 178 0 129 8 213 0 135 8 213 0 136 8 213 0 138 2 105 0 239 8 213 0 245 8 213 0 246 8 213 0 247 8 213 0 248 8 213 0 249 8 213 0 250 8 213 0 251 8 213 0 252 8 213 0 255 8 213 1 0 8 213 1 8 8 213 1 9 8 213 1 15 8 213 1 19 8 213 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 213 1 30 8 213 1 31 8 213 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 213 1 120 2 69 1 121 2 49 1 132 2 73 1 137 2 178 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 2 182 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 2 182 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 2 182 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 2 182 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 2 182 0 46 6 25 0 47 6 29 0 48 6 33 0 51 2 182 0 64 2 182 0 104 6 37 0 106 6 41 0 107 2 182 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 182 1 138] 
#[1 1 17 0 1 2 186 0 2 0 37 0 3 2 49 0 5 2 186 0 6 2 186 0 7 1 21 0 8 1 25 0 9 2 186 0 10 1 29 0 13 2 186 0 14 1 33 0 15 2 186 0 16 2 186 0 17 2 186 0 18 2 186 0 19 1 37 0 20 2 186 0 21 2 186 0 23 1 41 0 24 1 45 0 26 2 186 0 27 2 186 0 28 5 145 0 29 1 49 0 30 2 186 0 31 2 186 0 32 2 186 0 33 2 186 0 34 2 186 0 35 2 186 0 36 2 186 0 37 2 186 0 38 2 186 0 39 2 186 0 40 2 186 0 41 2 186 0 42 2 61 0 44 1 61 0 45 2 186 0 46 2 186 0 47 2 186 0 48 2 186 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 2 186 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 175 0 104 1 129 0 105 2 186 0 106 1 133 0 107 2 186 0 108 2 186 0 109 2 186 0 110 2 186 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 2 186 0 128 2 186 0 129 8 217 0 135 8 217 0 136 8 217 0 138 2 105 0 239 8 217 0 245 8 217 0 246 8 217 0 247 8 217 0 248 8 217 0 249 8 217 0 250 8 217 0 251 8 217 0 252 8 217 0 255 8 217 1 0 8 217 1 8 8 217 1 9 8 217 1 15 8 217 1 19 8 217 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 8 217 1 30 8 217 1 31 8 217 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 8 217 1 120 2 69 1 121 2 49 1 132 2 73 1 137 2 186 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 2 190 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 2 190 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 2 190 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 2 190 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 2 190 0 46 6 25 0 47 6 29 0 48 6 33 0 51 2 190 0 64 2 190 0 104 6 37 0 106 6 41 0 107 2 190 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 2 190 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 8 221 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 8 225 0 135 8 225 0 136 8 225 0 138 4 233 0 249 4 237 0 250 8 225 1 44 8 225 1 45 8 225 1 46 8 225 1 47 8 225 1 48 8 225 1 50 8 229 1 51 8 225 1 52 8 225 1 53 8 225 1 60 8 225 1 64 8 225 1 66 8 225 1 67 8 225 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 8 233 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 8 237 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 8 241 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 8 245 1 65 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 1 157 0 123 1 161 0 125 8 249 0 249 8 253 0 250] 
#[0 2 194 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 9 1 0 46 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 9 5 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 9 9 1 68 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 2 198 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 9 13 0 135 9 13 0 136 9 13 0 138 4 233 0 249 4 237 0 250 9 13 1 44 9 13 1 45 9 13 1 46 9 13 1 47 9 13 1 48 9 13 1 50 8 229 1 51 9 13 1 52 9 13 1 53 9 13 1 60 9 13 1 64 9 13 1 66 9 13 1 67 9 13 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 2 202 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 9 17 0 53 0 77 0 112 0 113 1 132] 
#[1 9 25 0 53 9 25 0 77 9 21 0 81 9 25 0 112 9 25 0 113 9 25 1 132] 
#[0 2 206 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 9 29 0 135 9 29 0 136 9 29 0 138 4 233 0 249 4 237 0 250 9 29 1 43 9 29 1 44 9 29 1 45 9 29 1 46 9 29 1 47 9 29 1 48 9 29 1 49 9 29 1 50 5 21 1 51 9 29 1 52 9 29 1 53 9 29 1 60 9 29 1 64 9 29 1 66 9 29 1 67 9 29 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 2 210 0 14 2 210 0 19 2 214 0 24 2 214 0 25 2 214 0 26 2 210 0 29 2 210 0 31 2 210 0 35 2 210 0 37 2 210 0 46 2 210 0 71 2 210 0 73 2 210 0 105 2 210 0 108] 
#[0 2 218 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 2 222 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 226 0 14 2 226 0 19 2 230 0 24 2 230 0 25 2 230 0 26 2 226 0 29 2 226 0 31 2 226 0 35 2 226 0 37 2 226 0 46 2 226 0 71 2 226 0 73 2 226 0 105 2 226 0 108] 
#[0 2 234 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 9 33 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 9 37 0 135 9 37 0 136 9 37 0 138 4 233 0 249 4 237 0 250 9 37 1 44 9 37 1 45 9 37 1 46 9 37 1 47 9 37 1 48 9 37 1 50 8 229 1 51 9 37 1 52 9 37 1 53 9 37 1 60 9 37 1 64 9 37 1 66 9 37 1 67 9 37 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 2 238 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 242 0 14 2 242 0 19 2 246 0 24 2 246 0 25 2 246 0 26 2 242 0 29 2 242 0 31 2 242 0 35 2 242 0 37 2 242 0 46 2 242 0 71 2 242 0 73 2 242 0 105 2 242 0 108] 
#[1 2 250 0 14 2 250 0 19 2 254 0 24 2 254 0 25 2 254 0 26 2 250 0 29 2 250 0 31 2 250 0 35 2 250 0 37 2 250 0 46 2 250 0 71 2 250 0 73 2 250 0 105 2 250 0 108] 
#[0 9 41 0 73] 
#[1 3 2 0 14 3 2 0 19 3 2 0 29 3 2 0 31 3 2 0 35 3 2 0 37 3 2 0 46 3 2 0 71 3 2 0 73 3 2 0 105 3 2 0 108 9 45 1 42] 
#[0 3 6 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 10 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 14 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 18 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 22 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 26 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 30 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 9 49 0 24 9 53 0 25 9 57 0 26] 
#[0 3 34 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 38 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 42 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 46 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 50 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 54 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 58 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 9 61 0 13 3 62 0 14 3 62 0 19 3 66 0 24 3 66 0 25 3 66 0 26 3 62 0 29 3 62 0 31 3 62 0 35 3 62 0 37 3 62 0 46 3 62 0 71 3 62 0 73 9 65 0 104 3 62 0 105 3 62 0 108] 
#[1 3 70 0 14 3 70 0 19 3 74 0 24 3 74 0 25 3 74 0 26 3 70 0 29 3 70 0 31 3 70 0 35 3 70 0 37 3 70 0 46 3 70 0 71 3 70 0 73 3 70 0 105 3 70 0 108] 
#[1 0 178 0 1 0 178 0 13 0 179 0 14 0 178 0 17 0 179 0 19 0 178 0 24 0 178 0 25 0 178 0 26 0 179 0 29 0 178 0 30 0 179 0 31 0 179 0 35 0 179 0 37 9 69 0 43 0 179 0 46 0 179 0 71 0 179 0 73 0 178 0 104 0 179 0 105 0 179 0 108 0 178 0 127] 
#[0 3 82 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 9 73 1 38 5 81 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 1 125 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 9 77 0 252] 
#[0 9 81 0 35] 
#[0 3 86 0 35 0 37 0 71] 
#[0 3 90 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 9 85 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 13 0 14 0 20 0 14 0 24 0 14 0 30 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 67 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 183 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 127 0 14 0 129 5 125 0 180 9 93 1 20 5 133 1 23 0 14 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 9 97 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 101 0 135 9 101 0 136 9 101 0 138 2 105 0 239 9 101 0 245 9 101 0 246 9 101 0 247 9 101 0 248 9 101 0 249 9 101 0 250 9 101 0 251 9 101 0 252 9 101 0 255 9 101 1 0 9 101 1 8 9 101 1 9 9 101 1 15 9 101 1 19 9 101 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 101 1 30 9 101 1 31 9 101 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 101 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 3 94 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 3 94 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 3 94 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 3 94 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 3 94 0 46 6 25 0 47 6 29 0 48 6 33 0 51 3 94 0 64 3 94 0 104 6 37 0 106 6 41 0 107 3 94 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 3 94 1 138] 
#[0 3 98 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 9 105 1 38 5 81 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 1 125 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 9 109 0 252] 
#[1 1 17 0 1 0 187 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 1 53 0 31 2 61 0 44 1 61 0 45 1 65 0 52 0 53 0 53 1 69 0 56 1 73 0 57 0 57 0 58 1 77 0 59 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 1 81 0 67 0 10 0 69 1 85 0 70 1 89 0 71 0 77 0 72 0 11 0 74 1 97 0 75 0 81 0 77 1 101 0 78 0 85 0 79 1 105 0 80 0 89 0 84 1 109 0 86 2 49 0 87 0 97 0 88 0 101 0 89 2 49 0 90 0 109 0 91 1 113 0 92 0 113 0 94 0 117 0 96 1 117 0 97 0 125 0 99 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 9 113 0 108 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 121 0 135 1 177 0 136 1 181 0 138 1 185 0 142 0 165 0 143 1 189 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 1 193 0 180 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 2 141 0 238 1 197 0 239 9 117 0 242 9 117 0 243 1 209 0 244 1 213 0 245 9 121 0 246 1 221 0 247 9 121 0 248 9 121 0 249 9 121 0 250 9 121 0 251 1 221 0 252 9 125 0 253 9 129 0 254 1 221 0 255 1 221 1 0 9 121 1 8 9 121 1 9 9 121 1 15 9 121 1 19 1 221 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 1 221 1 30 1 221 1 31 1 221 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 121 1 120 2 69 1 121 1 9 1 131 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 9 133 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 137 0 135 9 137 0 136 9 137 0 138 2 105 0 239 9 137 0 245 9 137 0 246 9 137 0 247 9 137 0 248 9 137 0 249 9 137 0 250 9 137 0 251 9 137 0 252 9 137 0 255 9 137 1 0 9 137 1 8 9 137 1 9 9 137 1 15 9 137 1 19 9 137 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 137 1 30 9 137 1 31 9 137 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 137 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 37 0 3 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 5 165 0 239 4 233 0 249 4 237 0 250 9 141 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 9 145 0 105] 
#[1 3 102 0 19 3 102 0 105 9 149 1 22] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 9 153 0 135 9 153 0 136 9 153 0 138 3 57 0 236 9 153 1 71 9 153 1 72 9 153 1 73 9 153 1 74 9 153 1 75 9 153 1 78 9 153 1 79 9 153 1 80 9 153 1 81 9 153 1 82 3 101 1 83 9 153 1 92 9 153 1 94 9 153 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 9 153 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 3 106 0 7 5 189 0 9 3 106 0 10 3 106 0 14 5 197 0 15 3 106 0 16 5 205 0 17 3 106 0 18 3 106 0 19 5 213 0 20 3 106 0 21 5 221 0 23 3 106 0 24 3 106 0 26 5 233 0 27 3 106 0 28 3 106 0 31 5 241 0 32 3 106 0 33 5 249 0 34 3 106 0 35 6 1 0 36 3 106 0 37 6 5 0 38 6 9 0 39 3 106 0 40 6 17 0 41 6 21 0 42 3 106 0 46 6 25 0 47 3 106 0 48 6 33 0 51 3 106 0 64 3 106 0 104 3 106 0 106 3 106 0 107 3 106 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 3 106 1 138] 
#[0 3 110 0 70 0 75 0 102] 
#[0 1 174 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 9 157 0 51 9 161 0 128] 
#[0 0 159 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 9 165 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 3 114 0 1 0 3 0 5 0 9 0 11 0 12 0 13 0 15 0 20 0 24 0 25 0 30 0 42 0 44 0 45 0 49 0 53 0 56 0 58 0 60 0 63 0 66 0 67 0 69 0 70 0 72 0 74 0 77 0 81 0 84 0 85 0 87 0 90 0 92 0 97 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 137] 
#[1 0 191 0 2 0 191 0 6 0 191 0 7 0 191 0 9 0 191 0 10 3 118 0 14 0 191 0 15 0 191 0 16 0 191 0 17 0 191 0 18 3 118 0 19 0 191 0 20 0 191 0 21 0 191 0 23 0 191 0 24 0 191 0 26 0 191 0 27 0 191 0 28 3 118 0 31 0 191 0 32 0 191 0 33 0 191 0 34 0 191 0 35 0 191 0 36 3 118 0 37 0 191 0 38 0 191 0 39 0 191 0 40 0 191 0 41 0 191 0 42 3 118 0 46 0 191 0 47 0 191 0 48 0 191 0 51 3 118 0 64 3 118 0 104 0 191 0 106 0 191 0 107 3 118 0 108 0 191 0 109 0 191 0 110 0 191 0 111 0 191 0 127 0 191 0 128 0 191 0 129 3 118 1 138] 
#[1 3 122 0 1 0 195 0 2 3 122 0 3 3 122 0 5 0 195 0 6 0 195 0 7 3 122 0 8 0 195 0 9 0 195 0 10 3 122 0 13 3 122 0 14 0 195 0 15 0 195 0 16 0 195 0 17 0 195 0 18 3 122 0 19 0 195 0 20 0 195 0 21 0 195 0 23 0 195 0 24 0 195 0 26 0 195 0 27 0 195 0 28 3 122 0 30 3 122 0 31 0 195 0 32 0 195 0 33 0 195 0 34 0 195 0 35 0 195 0 36 3 122 0 37 0 195 0 38 0 195 0 39 0 195 0 40 0 195 0 41 0 195 0 42 3 122 0 44 3 122 0 45 3 122 0 46 0 195 0 47 0 195 0 48 3 122 0 49 0 195 0 51 3 122 0 52 3 122 0 53 3 122 0 56 3 122 0 57 3 122 0 58 3 122 0 59 3 122 0 60 3 122 0 61 3 122 0 64 3 122 0 65 3 122 0 66 3 122 0 67 3 122 0 69 3 122 0 70 3 122 0 71 3 122 0 72 3 122 0 74 3 122 0 75 3 122 0 77 3 122 0 78 3 122 0 79 3 122 0 80 3 122 0 81 3 122 0 84 3 122 0 85 3 122 0 86 3 122 0 87 3 122 0 88 3 122 0 89 3 122 0 90 3 122 0 91 3 122 0 92 3 122 0 94 3 122 0 96 3 122 0 97 3 122 0 99 3 122 0 102 3 122 0 104 3 122 0 105 0 195 0 106 0 195 0 107 3 122 0 108 0 195 0 109 0 195 0 110 0 195 0 111 3 122 0 112 3 122 0 113 3 122 0 117 3 122 0 118 3 122 0 120 3 122 0 121 3 122 0 122 3 122 0 123 3 122 0 125 3 122 0 126 0 195 0 127 0 195 0 128 0 195 0 129 3 122 1 137 3 122 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 169 0 135 9 169 0 136 9 169 0 138 2 105 0 239 9 169 0 245 9 169 0 246 9 169 0 247 9 169 0 248 9 169 0 249 9 169 0 250 9 169 0 251 9 169 0 252 9 169 0 255 9 169 1 0 9 169 1 8 9 169 1 9 9 169 1 15 9 169 1 19 9 169 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 169 1 30 9 169 1 31 9 169 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 169 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 173 0 135 9 173 0 136 9 173 0 138 2 105 0 239 9 173 0 245 9 173 0 246 9 173 0 247 9 173 0 248 9 173 0 249 9 173 0 250 9 173 0 251 9 173 0 252 9 173 0 255 9 173 1 0 9 173 1 8 9 173 1 9 9 173 1 15 9 173 1 19 9 173 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 173 1 30 9 173 1 31 9 173 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 173 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 177 0 135 9 177 0 136 9 177 0 138 2 105 0 239 9 177 0 245 9 177 0 246 9 177 0 247 9 177 0 248 9 177 0 249 9 177 0 250 9 177 0 251 9 177 0 252 9 177 0 255 9 177 1 0 9 177 1 8 9 177 1 9 9 177 1 15 9 177 1 19 9 177 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 177 1 30 9 177 1 31 9 177 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 177 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 181 0 135 9 181 0 136 9 181 0 138 2 105 0 239 9 181 0 245 9 181 0 246 9 181 0 247 9 181 0 248 9 181 0 249 9 181 0 250 9 181 0 251 9 181 0 252 9 181 0 255 9 181 1 0 9 181 1 8 9 181 1 9 9 181 1 15 9 181 1 19 9 181 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 181 1 30 9 181 1 31 9 181 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 181 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 185 0 135 9 185 0 136 9 185 0 138 2 105 0 239 9 185 0 245 9 185 0 246 9 185 0 247 9 185 0 248 9 185 0 249 9 185 0 250 9 185 0 251 9 185 0 252 9 185 0 255 9 185 1 0 9 185 1 8 9 185 1 9 9 185 1 15 9 185 1 19 9 185 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 185 1 30 9 185 1 31 9 185 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 185 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 189 0 135 9 189 0 136 9 189 0 138 2 105 0 239 9 189 0 245 9 189 0 246 9 189 0 247 9 189 0 248 9 189 0 249 9 189 0 250 9 189 0 251 9 189 0 252 9 189 0 255 9 189 1 0 9 189 1 8 9 189 1 9 9 189 1 15 9 189 1 19 9 189 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 189 1 30 9 189 1 31 9 189 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 189 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 193 0 135 9 193 0 136 9 193 0 138 2 105 0 239 9 193 0 245 9 193 0 246 9 193 0 247 9 193 0 248 9 193 0 249 9 193 0 250 9 193 0 251 9 193 0 252 9 193 0 255 9 193 1 0 9 193 1 8 9 193 1 9 9 193 1 15 9 193 1 19 9 193 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 193 1 30 9 193 1 31 9 193 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 193 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 197 0 135 9 197 0 136 9 197 0 138 2 105 0 239 9 197 0 245 9 197 0 246 9 197 0 247 9 197 0 248 9 197 0 249 9 197 0 250 9 197 0 251 9 197 0 252 9 197 0 255 9 197 1 0 9 197 1 8 9 197 1 9 9 197 1 15 9 197 1 19 9 197 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 197 1 30 9 197 1 31 9 197 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 197 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 201 0 135 9 201 0 136 9 201 0 138 2 105 0 239 9 201 0 245 9 201 0 246 9 201 0 247 9 201 0 248 9 201 0 249 9 201 0 250 9 201 0 251 9 201 0 252 9 201 0 255 9 201 1 0 9 201 1 8 9 201 1 9 9 201 1 15 9 201 1 19 9 201 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 201 1 30 9 201 1 31 9 201 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 201 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 205 0 135 9 205 0 136 9 205 0 138 2 105 0 239 9 205 0 245 9 205 0 246 9 205 0 247 9 205 0 248 9 205 0 249 9 205 0 250 9 205 0 251 9 205 0 252 9 205 0 255 9 205 1 0 9 205 1 8 9 205 1 9 9 205 1 15 9 205 1 19 9 205 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 205 1 30 9 205 1 31 9 205 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 205 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 209 0 135 9 209 0 136 9 209 0 138 2 105 0 239 9 209 0 245 9 209 0 246 9 209 0 247 9 209 0 248 9 209 0 249 9 209 0 250 9 209 0 251 9 209 0 252 9 209 0 255 9 209 1 0 9 209 1 8 9 209 1 9 9 209 1 15 9 209 1 19 9 209 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 209 1 30 9 209 1 31 9 209 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 209 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 2 61 0 5 2 61 0 44 9 229 0 53 9 213 0 54 2 61 0 60 9 229 0 77 2 61 0 87 2 61 0 90 9 229 0 112 9 229 0 113 9 221 0 123 9 221 1 7 2 61 1 108 9 225 1 112 2 61 1 113 9 229 1 132] 
#[1 1 17 0 1 3 126 0 2 0 37 0 3 2 49 0 5 3 126 0 6 3 126 0 7 1 21 0 8 1 25 0 9 3 126 0 10 1 29 0 13 3 126 0 14 1 33 0 15 3 126 0 16 3 126 0 17 3 126 0 18 3 126 0 19 1 37 0 20 3 126 0 21 3 126 0 23 3 126 0 27 3 126 0 28 1 49 0 30 3 126 0 31 3 126 0 32 3 126 0 33 3 126 0 34 3 126 0 35 3 126 0 36 3 126 0 37 3 126 0 38 3 126 0 39 3 126 0 40 3 126 0 41 3 126 0 42 2 61 0 44 1 61 0 45 3 126 0 46 3 126 0 47 3 126 0 48 3 126 0 51 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 3 126 0 64 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 0 199 0 104 1 129 0 105 3 126 0 106 1 133 0 107 3 126 0 108 3 126 0 109 3 126 0 110 3 126 0 111 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 3 126 0 128 3 126 0 129 9 233 0 135 9 233 0 136 9 233 0 138 2 105 0 239 9 233 0 245 9 233 0 246 9 233 0 247 9 233 0 248 9 233 0 249 9 233 0 250 9 233 0 251 9 233 0 252 9 233 0 255 9 233 1 0 9 233 1 8 9 233 1 9 9 233 1 15 9 233 1 19 9 233 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 233 1 30 9 233 1 31 9 233 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 233 1 120 2 69 1 121 2 49 1 132 2 73 1 137 3 126 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 237 0 135 9 237 0 136 9 237 0 138 2 105 0 239 9 237 0 245 9 237 0 246 9 237 0 247 9 237 0 248 9 237 0 249 9 237 0 250 9 237 0 251 9 237 0 252 9 237 0 255 9 237 1 0 9 237 1 8 9 237 1 9 9 237 1 15 9 237 1 19 9 237 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 237 1 30 9 237 1 31 9 237 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 237 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 241 0 135 9 241 0 136 9 241 0 138 2 105 0 239 9 241 0 245 9 241 0 246 9 241 0 247 9 241 0 248 9 241 0 249 9 241 0 250 9 241 0 251 9 241 0 252 9 241 0 255 9 241 1 0 9 241 1 8 9 241 1 9 9 241 1 15 9 241 1 19 9 241 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 241 1 30 9 241 1 31 9 241 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 241 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 245 0 135 9 245 0 136 9 245 0 138 2 105 0 239 9 245 0 245 9 245 0 246 9 245 0 247 9 245 0 248 9 245 0 249 9 245 0 250 9 245 0 251 9 245 0 252 9 245 0 255 9 245 1 0 9 245 1 8 9 245 1 9 9 245 1 15 9 245 1 19 9 245 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 245 1 30 9 245 1 31 9 245 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 245 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 249 0 135 9 249 0 136 9 249 0 138 2 105 0 239 9 249 0 245 9 249 0 246 9 249 0 247 9 249 0 248 9 249 0 249 9 249 0 250 9 249 0 251 9 249 0 252 9 249 0 255 9 249 1 0 9 249 1 8 9 249 1 9 9 249 1 15 9 249 1 19 9 249 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 249 1 30 9 249 1 31 9 249 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 249 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 9 253 0 135 9 253 0 136 9 253 0 138 2 105 0 239 9 253 0 245 9 253 0 246 9 253 0 247 9 253 0 248 9 253 0 249 9 253 0 250 9 253 0 251 9 253 0 252 9 253 0 255 9 253 1 0 9 253 1 8 9 253 1 9 9 253 1 15 9 253 1 19 9 253 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 9 253 1 30 9 253 1 31 9 253 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 9 253 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 1 0 135 10 1 0 136 10 1 0 138 2 105 0 239 10 1 0 245 10 1 0 246 10 1 0 247 10 1 0 248 10 1 0 249 10 1 0 250 10 1 0 251 10 1 0 252 10 1 0 255 10 1 1 0 10 1 1 8 10 1 1 9 10 1 1 15 10 1 1 19 10 1 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 1 1 30 10 1 1 31 10 1 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 1 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 5 0 135 10 5 0 136 10 5 0 138 2 105 0 239 10 5 0 245 10 5 0 246 10 5 0 247 10 5 0 248 10 5 0 249 10 5 0 250 10 5 0 251 10 5 0 252 10 5 0 255 10 5 1 0 10 5 1 8 10 5 1 9 10 5 1 15 10 5 1 19 10 5 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 5 1 30 10 5 1 31 10 5 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 5 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 9 0 135 10 9 0 136 10 9 0 138 2 105 0 239 10 9 0 245 10 9 0 246 10 9 0 247 10 9 0 248 10 9 0 249 10 9 0 250 10 9 0 251 10 9 0 252 10 9 0 255 10 9 1 0 10 9 1 8 10 9 1 9 10 9 1 15 10 9 1 19 10 9 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 9 1 30 10 9 1 31 10 9 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 9 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 13 0 135 10 13 0 136 10 13 0 138 2 105 0 239 10 13 0 245 10 13 0 246 10 13 0 247 10 13 0 248 10 13 0 249 10 13 0 250 10 13 0 251 10 13 0 252 10 13 0 255 10 13 1 0 10 13 1 8 10 13 1 9 10 13 1 15 10 13 1 19 10 13 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 13 1 30 10 13 1 31 10 13 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 13 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 17 0 135 10 17 0 136 10 17 0 138 2 105 0 239 10 17 0 245 10 17 0 246 10 17 0 247 10 17 0 248 10 17 0 249 10 17 0 250 10 17 0 251 10 17 0 252 10 17 0 255 10 17 1 0 10 17 1 8 10 17 1 9 10 17 1 15 10 17 1 19 10 17 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 17 1 30 10 17 1 31 10 17 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 17 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 21 0 135 10 21 0 136 10 21 0 138 2 105 0 239 10 21 0 245 10 21 0 246 10 21 0 247 10 21 0 248 10 21 0 249 10 21 0 250 10 21 0 251 10 21 0 252 10 21 0 255 10 21 1 0 10 21 1 8 10 21 1 9 10 21 1 15 10 21 1 19 10 21 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 21 1 30 10 21 1 31 10 21 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 21 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 25 0 135 10 25 0 136 10 25 0 138 2 105 0 239 10 25 0 245 10 25 0 246 10 25 0 247 10 25 0 248 10 25 0 249 10 25 0 250 10 25 0 251 10 25 0 252 10 25 0 255 10 25 1 0 10 25 1 8 10 25 1 9 10 25 1 15 10 25 1 19 10 25 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 25 1 30 10 25 1 31 10 25 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 25 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 3 130 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 29 0 135 10 29 0 136 10 29 0 138 2 105 0 239 10 29 0 245 10 29 0 246 10 29 0 247 10 29 0 248 10 29 0 249 10 29 0 250 10 29 0 251 10 29 0 252 10 29 0 255 10 29 1 0 10 29 1 8 10 29 1 9 10 29 1 15 10 29 1 19 10 29 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 29 1 30 10 29 1 31 10 29 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 29 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 33 0 135 10 33 0 136 10 33 0 138 2 105 0 239 10 33 0 245 10 33 0 246 10 33 0 247 10 33 0 248 10 33 0 249 10 33 0 250 10 33 0 251 10 33 0 252 10 33 0 255 10 33 1 0 10 33 1 8 10 33 1 9 10 33 1 15 10 33 1 19 10 33 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 33 1 30 10 33 1 31 10 33 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 33 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 10 37 0 135 10 37 0 136 10 37 0 138 3 57 0 236 10 37 1 71 10 37 1 72 10 37 1 73 10 37 1 74 10 37 1 75 10 37 1 78 10 37 1 79 10 37 1 80 10 37 1 81 10 37 1 82 3 101 1 83 10 37 1 92 10 37 1 94 10 37 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 10 37 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 41 0 135 10 41 0 136 10 41 0 138 2 105 0 239 10 41 0 245 10 41 0 246 10 41 0 247 10 41 0 248 10 41 0 249 10 41 0 250 10 41 0 251 10 41 0 252 10 41 0 255 10 41 1 0 10 41 1 8 10 41 1 9 10 41 1 15 10 41 1 19 10 41 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 41 1 30 10 41 1 31 10 41 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 41 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 45 0 135 10 45 0 136 10 45 0 138 2 105 0 239 10 45 0 245 10 45 0 246 10 45 0 247 10 45 0 248 10 45 0 249 10 45 0 250 10 45 0 251 10 45 0 252 10 45 0 255 10 45 1 0 10 45 1 8 10 45 1 9 10 45 1 15 10 45 1 19 10 45 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 45 1 30 10 45 1 31 10 45 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 45 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 49 0 135 10 49 0 136 10 49 0 138 2 105 0 239 10 49 0 245 10 49 0 246 10 49 0 247 10 49 0 248 10 49 0 249 10 49 0 250 10 49 0 251 10 49 0 252 10 49 0 255 10 49 1 0 10 49 1 8 10 49 1 9 10 49 1 15 10 49 1 19 10 49 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 49 1 30 10 49 1 31 10 49 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 49 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 10 53 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 57 0 135 10 57 0 136 10 57 0 138 2 105 0 239 10 57 0 245 10 57 0 246 10 57 0 247 10 57 0 248 10 57 0 249 10 57 0 250 10 57 0 251 10 57 0 252 10 57 0 255 10 57 1 0 10 57 1 8 10 57 1 9 10 57 1 15 10 61 1 18 10 57 1 19 10 57 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 57 1 30 10 57 1 31 10 57 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 57 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 65 0 135 10 65 0 136 10 65 0 138 2 105 0 239 10 65 0 245 10 65 0 246 10 65 0 247 10 65 0 248 10 65 0 249 10 65 0 250 10 65 0 251 10 65 0 252 10 65 0 255 10 65 1 0 10 65 1 8 10 65 1 9 10 65 1 15 10 65 1 19 10 65 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 65 1 30 10 65 1 31 10 65 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 65 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 69 0 135 10 69 0 136 10 69 0 138 2 105 0 239 10 69 0 245 10 69 0 246 10 69 0 247 10 69 0 248 10 69 0 249 10 69 0 250 10 69 0 251 10 69 0 252 10 69 0 255 10 69 1 0 10 69 1 8 10 69 1 9 10 69 1 15 10 69 1 19 10 69 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 69 1 30 10 69 1 31 10 69 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 69 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 73 0 135 10 73 0 136 10 73 0 138 2 105 0 239 10 73 0 245 10 73 0 246 10 73 0 247 10 73 0 248 10 73 0 249 10 73 0 250 10 73 0 251 10 73 0 252 10 73 0 255 10 73 1 0 10 73 1 8 10 73 1 9 10 73 1 15 10 73 1 19 10 73 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 73 1 30 10 73 1 31 10 73 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 73 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 77 0 135 10 77 0 136 10 77 0 138 2 105 0 239 10 77 0 245 10 77 0 246 10 77 0 247 10 77 0 248 10 77 0 249 10 77 0 250 10 77 0 251 10 77 0 252 10 77 0 255 10 77 1 0 10 77 1 8 10 77 1 9 10 77 1 15 10 77 1 19 10 77 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 77 1 30 10 77 1 31 10 77 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 77 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 3 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 3 138 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 3 142 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 3 146 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 3 150 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 10 81 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 85 0 135 10 85 0 136 10 85 0 138 2 105 0 239 10 85 0 245 10 85 0 246 10 85 0 247 10 85 0 248 10 85 0 249 10 85 0 250 10 85 0 251 10 85 0 252 10 85 0 255 10 85 1 0 10 85 1 8 10 85 1 9 10 85 1 15 10 85 1 19 10 85 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 85 1 30 10 85 1 31 10 85 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 85 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 6 0 3 0 6 0 24 0 6 0 53 0 6 0 77 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 123 10 89 0 133] 
#[1 2 61 0 5 2 61 0 44 2 61 0 53 2 61 0 60 2 61 0 77 2 61 0 87 2 61 0 90 2 61 0 112 2 61 0 113 2 61 1 108 10 93 1 112 2 61 1 113 2 61 1 132] 
#[0 3 154 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 3 158 0 2 3 158 0 6 3 158 0 7 3 158 0 9 3 158 0 10 3 158 0 13 3 158 0 14 3 158 0 15 3 158 0 16 3 158 0 17 3 158 0 18 3 158 0 19 3 158 0 20 3 158 0 21 3 158 0 23 3 158 0 24 3 158 0 25 3 158 0 26 3 158 0 27 3 158 0 28 3 158 0 29 6 97 0 30 3 158 0 31 3 158 0 32 3 158 0 33 3 158 0 34 3 158 0 35 3 158 0 36 3 158 0 37 3 158 0 38 3 158 0 39 3 158 0 40 3 158 0 41 3 158 0 42 3 158 0 46 3 158 0 47 3 158 0 48 3 158 0 51 3 158 0 64 3 158 0 71 3 158 0 73 3 158 0 104 3 158 0 105 3 158 0 106 3 158 0 107 3 158 0 108 3 158 0 109 3 158 0 110 3 158 0 111 3 158 0 127 3 158 0 128 3 158 0 129 10 97 1 110 3 158 1 138] 
#[1 7 193 0 127 10 101 1 114] 
#[1 3 162 0 2 3 162 0 6 3 162 0 7 3 162 0 9 3 162 0 10 3 162 0 14 3 162 0 15 3 162 0 16 3 162 0 17 3 162 0 18 3 162 0 19 3 162 0 20 3 162 0 21 3 162 0 23 3 162 0 24 3 162 0 25 3 162 0 26 3 162 0 27 3 162 0 28 3 162 0 29 6 97 0 30 3 162 0 31 3 162 0 32 3 162 0 33 3 162 0 34 3 162 0 35 3 162 0 36 3 162 0 37 3 162 0 38 3 162 0 39 3 162 0 40 3 162 0 41 3 162 0 42 3 162 0 46 3 162 0 47 3 162 0 48 3 162 0 51 3 162 0 64 3 162 0 71 3 162 0 73 3 162 0 104 3 162 0 105 3 162 0 106 3 162 0 107 3 162 0 108 3 162 0 109 3 162 0 110 3 162 0 111 3 162 0 127 3 162 0 128 3 162 0 129 10 97 1 110 3 162 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 6 125 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132 3 166 1 138] 
#[0 10 105 0 45] 
#[0 3 170 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 65 0 66 0 69 0 72 0 77 0 79 0 84 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 108 0 112 0 113 1 138] 
#[0 10 109 0 46] 
#[1 10 113 0 13 10 117 0 35 10 121 0 45 3 174 0 46 10 125 0 104 10 129 0 139 10 133 0 241] 
#[1 3 178 0 1 3 178 0 13 3 178 0 14 3 178 0 19 0 203 0 30 3 178 0 31 3 178 0 35 3 178 0 45 3 178 0 46 3 178 0 51 3 178 0 104 3 178 0 108 8 161 1 106] 
#[0 1 166 0 69] 
#[0 3 182 0 69] 
#[1 10 137 0 29 10 141 0 35 6 197 0 101 2 42 0 104 6 205 0 127 10 145 0 211 10 149 0 223 10 145 0 230] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 10 153 0 135 10 153 0 136 10 153 0 138 3 57 0 236 10 153 1 70 10 153 1 72 10 153 1 73 10 153 1 74 10 153 1 75 10 153 1 78 10 153 1 79 10 153 1 80 10 153 1 81 10 153 1 82 3 101 1 83 10 153 1 91 10 153 1 92 10 153 1 93 10 153 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 10 153 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 10 157 0 174] 
#[0 3 186 0 69] 
#[0 3 190 0 69] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 10 161 0 135 10 161 0 136 10 161 0 138 3 57 0 236 10 161 1 70 10 161 1 72 10 161 1 73 10 161 1 74 10 161 1 75 10 161 1 78 10 161 1 79 10 161 1 80 10 161 1 81 10 161 1 82 3 101 1 83 10 161 1 91 10 161 1 92 10 161 1 93 10 161 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 10 161 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 10 165 0 174] 
#[0 3 194 0 69] 
#[1 2 153 0 66 0 10 0 69 10 169 0 97 0 189 0 173 10 173 0 174] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 10 177 0 174] 
#[0 3 198 0 69] 
#[0 3 202 0 69] 
#[1 3 206 0 1 3 206 0 5 3 206 0 11 3 206 0 12 3 206 0 13 3 206 0 15 3 206 0 30 3 206 0 31 3 206 0 35 3 206 0 42 3 206 0 44 3 206 0 45 3 206 0 49 3 206 0 53 3 206 0 60 3 206 0 63 3 206 0 66 3 206 0 69 3 206 0 70 3 206 0 72 3 206 0 77 3 206 0 87 3 206 0 90 3 206 0 97 3 206 0 104 3 206 0 112 3 206 0 113 3 206 0 126 3 206 0 127 3 206 0 129 10 181 0 232] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 10 185 0 108 0 14 0 112 0 14 0 113 10 189 0 180 10 193 0 199 10 197 0 202] 
#[1 0 14 0 3 0 14 0 53 0 14 0 58 0 14 0 77 0 14 0 112 0 14 0 113 0 14 0 126 7 93 0 128 7 97 0 180 7 101 0 224 7 105 0 225 7 109 0 226] 
#[1 6 197 0 101 10 201 0 104 10 205 0 230] 
#[0 10 209 0 104] 
#[0 3 210 0 31 0 51] 
#[1 10 213 0 31 10 217 0 51 10 221 0 165] 
#[0 3 214 0 31 0 51] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 10 233 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 10 253 0 221 11 1 0 222 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 11 9 0 133] 
#[1 3 137 0 5 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 7 29 1 126 3 137 1 132] 
#[0 1 102 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 11 13 0 70] 
#[0 3 218 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 11 17 0 236 3 137 1 108 3 137 1 113 11 21 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 21 0 66 0 42 0 69 3 137 0 77 3 137 0 87 3 137 0 90 3 33 0 97 3 137 0 112 3 137 0 113 7 161 1 83 3 137 1 108 3 137 1 113 11 25 1 125 3 153 1 126 3 137 1 132] 
#[1 11 29 0 14 11 33 0 19] 
#[0 3 222 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 11 37 0 14 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 11 41 0 135 11 41 0 136 11 41 0 138 3 57 0 236 11 41 1 70 11 41 1 72 11 41 1 73 11 41 1 74 11 41 1 75 11 45 1 76 11 41 1 78 11 41 1 79 11 41 1 80 11 41 1 81 11 41 1 82 3 101 1 83 11 41 1 91 11 41 1 92 11 41 1 93 11 41 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 41 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 0 207 0 14 2 30 0 17 0 159 0 19] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 11 53 0 135 11 53 0 136 11 53 0 138 3 57 0 236 11 53 1 71 11 53 1 72 11 53 1 73 11 53 1 74 11 53 1 75 11 53 1 78 11 53 1 79 11 53 1 80 11 53 1 81 11 53 1 82 3 101 1 83 11 53 1 92 11 53 1 94 11 53 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 53 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 11 57 0 135 11 57 0 136 11 57 0 138 3 57 0 236 11 57 1 71 11 57 1 72 11 57 1 73 11 57 1 74 11 57 1 75 11 57 1 78 11 57 1 79 11 57 1 80 11 57 1 81 11 57 1 82 3 101 1 83 11 57 1 92 11 57 1 94 11 57 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 57 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 3 226 0 2 3 226 0 6 3 226 0 7 3 226 0 9 3 226 0 10 3 226 0 14 3 226 0 15 3 226 0 16 3 226 0 17 3 226 0 18 3 226 0 19 3 226 0 20 3 226 0 21 3 226 0 23 3 226 0 24 3 226 0 26 3 226 0 27 3 226 0 28 3 226 0 29 0 211 0 30 3 226 0 31 3 226 0 32 3 226 0 33 3 226 0 34 3 226 0 35 3 226 0 36 3 226 0 37 3 226 0 38 3 226 0 39 3 226 0 40 3 226 0 41 3 226 0 42 3 226 0 46 3 226 0 47 3 226 0 48 3 226 0 51 3 226 0 64 3 226 0 70 3 226 0 101 3 226 0 104 3 226 0 105 3 226 0 106 3 226 0 107 3 226 0 108 3 226 0 109 3 226 0 110 3 226 0 111 3 226 0 127 3 226 0 128 3 226 0 129 7 209 1 123 11 61 1 124 3 226 1 138] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 11 65 1 125 3 153 1 126 3 137 1 132] 
#[0 3 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 11 69 0 31 11 73 0 46] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 11 77 1 125 3 153 1 126 3 137 1 132] 
#[0 11 81 0 70] 
#[1 3 137 0 5 6 237 0 30 11 85 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 11 89 0 236 3 137 1 108 3 137 1 113 11 93 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 7 165 1 125 3 153 1 126 3 137 1 132] 
#[0 3 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 0 215 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 30 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 3 242 0 69] 
#[0 3 246 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 3 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 3 254 0 69 11 97 0 118 11 97 0 120 11 97 0 175 11 97 1 137] 
#[0 4 2 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 0 37 0 3 11 121 0 53 11 101 0 58 11 121 0 77 11 121 0 112 11 121 0 113 11 105 0 126 11 109 0 227 11 113 0 228 11 117 0 229 5 165 0 239 11 121 1 132] 
#[0 4 6 0 3 0 53 0 58 0 77 0 112 0 113 0 126] 
#[1 0 14 0 3 0 14 0 53 0 14 0 58 0 14 0 77 0 14 0 112 0 14 0 113 0 14 0 126 7 97 0 180 11 125 0 224 11 129 0 226] 
#[1 11 133 0 19 11 137 0 128] 
#[1 3 137 0 5 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 7 57 0 236 11 141 1 100 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 7 57 0 236 11 145 1 100 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 11 149 0 135 11 149 0 136 11 149 0 138 3 57 0 236 11 149 1 71 11 149 1 72 11 149 1 73 11 149 1 74 11 149 1 75 11 149 1 78 11 149 1 79 11 149 1 80 11 149 1 81 11 149 1 82 3 101 1 83 11 149 1 92 11 149 1 94 11 149 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 149 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 4 10 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 4 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 4 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 2 10 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 11 153 0 81 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 11 157 0 135 11 157 0 136 11 157 0 138 3 57 0 236 11 157 1 71 11 157 1 72 11 157 1 73 11 157 1 74 11 157 1 75 11 157 1 78 11 157 1 79 11 157 1 80 11 157 1 81 11 157 1 82 3 101 1 83 11 157 1 92 11 157 1 94 11 157 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 157 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 1 174 0 101 1 174 0 104 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 11 161 1 125 3 153 1 126 3 137 1 132] 
#[1 11 165 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 11 169 1 125 3 153 1 126 3 137 1 132] 
#[1 6 197 0 101 11 173 0 104 11 177 0 230] 
#[1 2 30 0 17 11 181 0 70 0 159 0 101 0 159 0 104] 
#[0 11 185 0 69] 
#[0 4 22 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 11 189 0 133] 
#[0 11 193 0 104] 
#[0 11 197 0 13] 
#[1 4 26 0 2 4 26 0 6 4 26 0 7 4 26 0 9 4 26 0 10 4 26 0 14 4 26 0 15 4 26 0 16 11 201 0 17 4 26 0 18 4 26 0 19 4 26 0 20 4 26 0 21 4 26 0 23 4 26 0 24 4 26 0 26 4 26 0 27 4 26 0 28 4 26 0 29 4 26 0 30 4 26 0 31 4 26 0 32 4 26 0 33 4 26 0 34 4 26 0 35 4 26 0 36 4 26 0 37 4 26 0 38 4 26 0 39 4 26 0 40 4 26 0 41 4 26 0 42 4 26 0 46 4 26 0 47 4 26 0 48 4 26 0 51 4 26 0 64 4 26 0 70 4 26 0 101 4 26 0 104 4 26 0 105 4 26 0 106 4 26 0 107 4 26 0 108 4 26 0 109 4 26 0 110 4 26 0 111 4 26 0 127 4 26 0 128 4 26 0 129 11 205 1 97 4 26 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 11 209 0 14 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 11 213 0 135 11 213 0 136 11 213 0 138 3 57 0 236 11 213 1 70 11 213 1 72 11 213 1 73 11 213 1 74 11 213 1 75 11 213 1 78 11 213 1 79 11 213 1 80 11 213 1 81 11 213 1 82 3 101 1 83 11 213 1 91 11 213 1 92 11 213 1 93 11 213 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 213 1 122 5 157 1 125 3 153 1 126 11 217 1 128 2 49 1 132] 
#[1 4 30 0 2 4 30 0 6 4 30 0 7 4 30 0 9 4 30 0 10 7 185 0 13 4 30 0 14 4 30 0 15 4 30 0 16 4 30 0 17 4 30 0 18 4 30 0 19 4 30 0 20 4 30 0 21 4 30 0 23 4 30 0 24 4 30 0 26 4 30 0 27 4 30 0 28 4 30 0 29 4 30 0 30 4 30 0 31 4 30 0 32 4 30 0 33 4 30 0 34 4 30 0 35 4 30 0 36 4 30 0 37 4 30 0 38 4 30 0 39 4 30 0 40 4 30 0 41 4 30 0 42 4 30 0 46 4 30 0 47 4 30 0 48 4 30 0 51 4 30 0 64 4 30 0 70 4 30 0 101 4 30 0 104 4 30 0 105 4 30 0 106 4 30 0 107 4 30 0 108 4 30 0 109 4 30 0 110 4 30 0 111 7 193 0 127 4 30 0 128 4 30 0 129 11 221 1 114 11 225 1 127 4 30 1 138] 
#[1 5 149 0 1 11 253 0 5 11 249 0 11 11 249 0 12 2 245 0 13 2 249 0 15 11 229 0 20 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 12 13 0 53 11 253 0 60 3 17 0 63 3 21 0 66 1 81 0 67 0 42 0 69 3 25 0 70 3 29 0 72 12 13 0 77 11 253 0 87 11 253 0 90 1 113 0 92 3 33 0 97 1 125 0 104 12 13 0 112 12 13 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 11 249 0 126 1 169 0 127 11 233 0 128 3 45 0 129 12 1 0 135 12 1 0 136 12 1 0 138 3 57 0 236 12 1 0 248 12 1 0 249 12 1 0 250 12 1 0 252 12 1 1 70 12 1 1 72 12 1 1 73 12 1 1 74 12 1 1 75 12 1 1 78 12 1 1 79 12 1 1 80 12 1 1 81 12 1 1 82 3 101 1 83 12 1 1 91 12 1 1 92 12 1 1 93 12 1 1 95 3 121 1 96 3 125 1 99 3 129 1 100 11 249 1 104 1 1 1 105 11 253 1 108 3 137 1 113 12 1 1 117 12 1 1 118 12 1 1 119 3 141 1 121 12 1 1 122 5 157 1 125 3 153 1 126 12 13 1 132 2 73 1 137] 
#[0 4 34 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 4 38 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 3 137 0 5 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 12 17 1 126 3 137 1 132] 
#[0 4 42 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 4 46 0 2 4 46 0 6 4 46 0 7 4 46 0 9 4 46 0 10 4 46 0 14 4 46 0 15 4 46 0 16 4 46 0 17 4 46 0 18 4 46 0 19 4 46 0 20 4 46 0 21 4 46 0 23 4 46 0 24 4 46 0 26 4 46 0 27 4 46 0 28 4 46 0 29 0 219 0 30 4 46 0 31 4 46 0 32 4 46 0 33 4 46 0 34 4 46 0 35 4 46 0 36 4 46 0 37 4 46 0 38 4 46 0 39 4 46 0 40 4 46 0 41 4 46 0 42 4 46 0 46 4 46 0 47 4 46 0 48 4 46 0 51 4 46 0 64 4 46 0 70 4 46 0 101 4 46 0 104 4 46 0 105 4 46 0 106 4 46 0 107 4 46 0 108 4 46 0 109 4 46 0 110 4 46 0 111 4 46 0 127 4 46 0 128 4 46 0 129 12 21 1 123 4 46 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 12 25 0 135 12 25 0 136 12 25 0 138 3 57 0 236 12 25 1 70 12 25 1 72 12 25 1 73 12 25 1 74 12 25 1 75 12 25 1 78 12 25 1 79 12 25 1 80 12 25 1 81 12 25 1 82 3 101 1 83 12 25 1 91 12 25 1 92 12 25 1 93 12 25 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 12 25 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 4 50 0 2 4 50 0 6 4 50 0 7 4 50 0 9 4 50 0 10 4 50 0 14 4 50 0 15 4 50 0 16 4 50 0 17 4 50 0 18 4 50 0 19 4 50 0 20 4 50 0 21 4 50 0 23 4 50 0 24 4 50 0 26 4 50 0 27 4 50 0 28 4 50 0 29 0 223 0 30 4 50 0 31 4 50 0 32 4 50 0 33 4 50 0 34 4 50 0 35 4 50 0 36 4 50 0 37 4 50 0 38 4 50 0 39 4 50 0 40 4 50 0 41 4 50 0 42 4 50 0 46 4 50 0 47 4 50 0 48 4 50 0 51 4 50 0 64 4 50 0 70 4 50 0 101 4 50 0 104 4 50 0 105 4 50 0 106 4 50 0 107 4 50 0 108 4 50 0 109 4 50 0 110 4 50 0 111 4 50 0 127 4 50 0 128 4 50 0 129 12 21 1 123 4 50 1 138] 
#[1 12 29 0 13 12 33 0 45 12 37 0 104 12 41 0 144] 
#[0 4 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 108 0 6 0 112 0 6 0 113 12 45 0 133] 
#[0 12 49 0 14] 
#[1 1 5 0 5 0 45 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 1 5 0 112 1 5 0 113 12 53 1 105 1 5 1 108 1 5 1 132] 
#[0 12 57 0 14] 
#[0 12 61 0 14] 
#[0 12 65 0 29] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 12 69 0 135 12 69 0 136 12 69 0 138 3 57 0 236 12 69 1 70 12 69 1 72 12 69 1 73 12 69 1 74 12 69 1 75 12 69 1 78 12 69 1 79 12 69 1 80 12 69 1 81 12 69 1 82 3 101 1 83 12 69 1 91 12 69 1 92 12 69 1 93 12 69 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 12 69 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 12 73 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 84 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 12 77 0 180 12 81 0 194 12 85 0 197] 
#[0 4 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 12 89 0 108 0 14 0 112 0 14 0 113 12 93 0 180 12 97 0 190 12 101 0 193] 
#[1 12 105 0 13 12 109 0 31 6 197 0 101 12 113 0 104 12 117 0 230] 
#[1 12 121 0 31 12 125 0 104] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 12 129 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 12 145 0 216 7 57 0 236 12 149 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 12 153 0 104] 
#[1 12 157 0 29 12 161 0 35 6 197 0 101 2 42 0 104 12 165 0 211 12 165 0 230] 
#[0 4 70 0 31 0 104] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 12 169 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 4 74 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 12 173 0 135 12 173 0 136 12 173 0 138 3 57 0 236 12 173 1 70 12 173 1 72 12 173 1 73 12 173 1 74 12 173 1 75 12 173 1 78 12 173 1 79 12 173 1 80 12 173 1 81 12 173 1 82 3 101 1 83 12 173 1 91 12 173 1 92 12 173 1 93 12 173 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 12 173 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 12 177 0 29 12 181 0 31 12 185 0 35 6 197 0 101 12 189 0 230] 
#[1 12 193 0 31 12 197 0 35] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 0 14 0 112 0 14 0 113 12 93 0 180 12 201 0 190 12 101 0 193] 
#[1 6 197 0 101 12 205 0 104 12 209 0 230] 
#[0 12 213 0 104] 
#[0 12 217 0 53 0 77 0 112 0 113 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 12 221 0 133] 
#[1 1 166 0 69 12 225 0 104] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 12 229 1 125 3 153 1 126 3 137 1 132] 
#[1 12 233 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 12 237 1 125 3 153 1 126 3 137 1 132] 
#[1 12 241 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 12 245 0 58 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 12 249 1 125 3 153 1 126 3 137 1 132] 
#[0 12 253 0 70] 
#[1 13 1 0 31 13 5 0 104] 
#[1 13 9 0 29 13 13 0 35 6 197 0 101 2 42 0 104 6 205 0 127 13 17 0 211 13 21 0 223 13 17 0 230] 
#[0 4 78 0 19 0 31 0 108] 
#[1 1 5 0 5 3 217 0 15 3 221 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 3 225 0 104 13 25 0 108 1 5 0 112 1 5 0 113 13 29 0 167 3 233 1 105 1 5 1 108 1 5 1 132] 
#[0 4 82 0 19 0 31 0 108] 
#[1 4 86 0 19 4 86 0 108 13 33 0 169] 
#[0 4 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 13 37 0 15 13 41 0 104] 
#[1 13 45 0 49 13 49 0 53 13 49 0 77 13 49 0 112 13 49 0 113 13 49 1 132] 
#[1 13 53 0 13 6 205 0 127 13 57 0 223] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 14 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 13 61 0 137 4 94 1 137] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 46 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 13 65 0 137 4 94 1 137] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 108 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 13 69 0 137 4 94 1 137] 
#[0 4 98 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[0 4 102 0 1 0 13 0 14 0 19 0 30 0 31 0 35 0 45 0 46 0 51 0 104 0 108] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 4 106 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 106 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 4 106 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 4 106 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 4 106 0 46 6 25 0 47 6 29 0 48 6 33 0 51 4 106 0 64 4 106 0 104 6 37 0 106 6 41 0 107 4 106 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 106 1 138] 
#[1 5 177 0 2 5 181 0 6 4 110 0 7 4 110 0 9 4 110 0 10 4 110 0 14 5 197 0 15 4 110 0 16 5 205 0 17 4 110 0 18 4 110 0 19 5 213 0 20 4 110 0 21 5 221 0 23 4 110 0 24 4 110 0 26 5 233 0 27 4 110 0 28 4 110 0 31 5 241 0 32 4 110 0 33 5 249 0 34 4 110 0 35 6 1 0 36 4 110 0 37 6 5 0 38 6 9 0 39 4 110 0 40 6 17 0 41 6 21 0 42 4 110 0 46 6 25 0 47 4 110 0 48 6 33 0 51 4 110 0 64 4 110 0 104 4 110 0 106 4 110 0 107 4 110 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 110 1 138] 
#[0 4 114 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 13 73 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 13 77 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 13 81 0 14] 
#[0 4 118 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 4 122 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 13 85 0 135 13 85 0 136 13 85 0 138 2 105 0 239 13 85 0 245 13 85 0 246 13 85 0 247 13 85 0 248 13 85 0 249 13 85 0 250 13 85 0 251 13 85 0 252 13 85 0 255 13 85 1 0 13 89 1 5 13 85 1 8 13 85 1 9 13 85 1 15 13 85 1 19 13 85 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 13 85 1 30 13 85 1 31 13 85 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 13 85 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 4 126 0 2 4 126 0 6 4 126 0 7 4 126 0 9 4 126 0 10 4 126 0 13 4 126 0 14 4 126 0 15 4 126 0 16 4 126 0 17 4 126 0 18 4 126 0 19 4 126 0 20 4 126 0 21 4 126 0 23 4 126 0 24 4 126 0 25 4 126 0 26 4 126 0 27 4 126 0 28 4 126 0 29 6 97 0 30 4 126 0 31 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 37 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 42 4 126 0 46 4 126 0 47 4 126 0 48 4 126 0 51 4 126 0 64 4 126 0 71 4 126 0 73 4 126 0 104 4 126 0 105 4 126 0 106 4 126 0 107 4 126 0 108 4 126 0 109 4 126 0 110 4 126 0 111 4 126 0 127 4 126 0 128 4 126 0 129 10 97 1 110 4 126 1 138] 
#[0 4 130 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 134 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 13 93 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 4 134 0 46 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 13 97 1 3] 
#[0 13 101 0 46] 
#[0 4 138 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 4 142 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 142 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 4 142 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 4 142 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 4 142 0 46 6 25 0 47 6 29 0 48 6 33 0 51 4 142 0 64 4 142 0 104 6 37 0 106 6 41 0 107 4 142 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 142 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 4 146 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 146 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 4 146 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 4 146 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 4 146 0 46 6 25 0 47 6 29 0 48 6 33 0 51 4 146 0 64 4 146 0 104 6 37 0 106 6 41 0 107 4 146 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 146 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 13 109 0 53 4 181 0 56 2 49 0 60 4 185 0 67 13 109 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 13 109 0 112 13 109 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 13 105 0 135 13 105 0 136 13 105 0 138 4 233 0 249 4 237 0 250 13 105 1 44 13 105 1 45 13 105 1 46 13 105 1 47 13 105 1 48 13 105 1 50 8 229 1 51 13 105 1 52 13 105 1 53 13 105 1 60 13 105 1 64 13 105 1 66 13 105 1 67 13 105 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 13 109 1 132 5 65 1 137] 
#[0 4 150 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 9 53 0 25] 
#[0 4 154 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 13 113 0 14 13 117 0 19 13 121 1 62 13 125 1 63] 
#[1 0 227 0 14 3 22 0 19 3 22 0 105] 
#[0 13 129 0 14] 
#[1 4 162 0 14 4 162 0 19 4 166 0 24 4 166 0 25 4 166 0 26 4 162 0 29 4 162 0 31 4 162 0 35 4 162 0 37 4 162 0 46 4 162 0 71 4 162 0 73 4 162 0 105 4 162 0 108] 
#[1 4 170 0 14 4 170 0 19 4 174 0 24 4 174 0 25 4 174 0 26 4 170 0 29 4 170 0 31 4 170 0 35 4 170 0 37 4 170 0 46 4 170 0 71 4 170 0 73 4 170 0 105 4 170 0 108] 
#[0 4 178 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 13 133 0 19 4 182 0 46 13 121 1 62 13 137 1 63] 
#[0 13 141 0 46] 
#[0 4 186 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 4 190 0 14 4 190 0 19 4 190 0 29 4 190 0 31 4 190 0 35 4 190 0 37 13 145 0 43 4 190 0 46 4 190 0 71 4 190 0 73 4 190 0 105 4 190 0 108] 
#[0 13 149 0 53 0 77 0 112 0 113 1 132] 
#[1 4 194 0 14 4 194 0 19 4 194 0 29 4 194 0 31 4 194 0 35 4 194 0 37 13 153 0 43 4 194 0 46 4 194 0 71 4 194 0 73 4 194 0 105 4 194 0 108] 
#[1 3 2 0 14 3 2 0 19 3 2 0 29 3 2 0 31 3 2 0 35 3 2 0 37 3 2 0 46 3 2 0 71 3 2 0 73 3 2 0 105 3 2 0 108 13 157 1 42] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 13 109 0 53 4 181 0 56 2 49 0 60 4 185 0 67 13 109 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 13 109 0 112 13 109 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 13 161 0 135 13 161 0 136 13 161 0 138 4 233 0 249 4 237 0 250 13 161 1 44 13 161 1 45 13 161 1 46 13 161 1 47 13 161 1 48 13 161 1 50 8 229 1 51 13 161 1 52 13 161 1 53 13 161 1 60 13 161 1 64 13 161 1 66 13 161 1 67 13 161 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 13 109 1 132 5 65 1 137] 
#[0 4 198 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 13 165 0 135 13 165 0 136 13 165 0 138 2 105 0 239 13 165 0 245 13 165 0 246 13 165 0 247 13 165 0 248 13 165 0 249 13 165 0 250 13 165 0 251 13 165 0 252 13 165 0 255 13 165 1 0 13 165 1 8 13 165 1 9 13 165 1 15 13 165 1 19 13 165 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 13 165 1 30 13 165 1 31 13 165 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 13 165 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 4 202 0 14 4 202 0 19 4 202 0 29 4 202 0 31 4 202 0 35 4 202 0 37 4 202 0 46 4 202 0 71 4 202 0 73 0 231 0 105 4 202 0 108 13 173 1 41] 
#[0 4 206 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 61 0 5 13 177 0 20 13 181 0 30 2 61 0 44 2 61 0 53 2 61 0 60 2 61 0 77 2 61 0 87 2 61 0 90 2 61 0 112 2 61 0 113 13 185 0 117 13 189 0 121 1 157 0 123 1 161 0 125 1 169 0 127 13 201 0 249 13 201 0 250 13 201 1 51 2 61 1 108 13 201 1 109 2 57 1 112 2 61 1 113 13 201 1 120 2 69 1 121 2 61 1 132] 
#[1 2 61 0 5 13 177 0 20 13 181 0 30 2 61 0 44 2 61 0 53 2 61 0 60 2 61 0 77 2 61 0 87 2 61 0 90 2 61 0 112 2 61 0 113 13 185 0 117 13 189 0 121 1 157 0 123 1 161 0 125 1 169 0 127 13 213 0 249 13 213 0 250 13 213 1 51 2 61 1 108 13 213 1 109 2 57 1 112 2 61 1 113 13 213 1 120 2 69 1 121 2 61 1 132] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 13 217 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 13 221 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 13 225 1 61 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 0 14 0 3 0 14 0 24 0 14 0 53 0 14 0 77 0 14 0 81 0 14 0 85 13 229 0 108 0 14 0 112 0 14 0 113 0 14 0 123 13 233 0 180 13 237 1 54 13 241 1 55 13 245 1 58 13 249 1 59] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 13 253 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 14 1 0 35] 
#[1 4 210 0 1 4 210 0 2 4 210 0 3 4 210 0 5 4 210 0 6 4 210 0 7 4 210 0 8 4 210 0 9 4 210 0 10 4 210 0 13 4 210 0 14 4 210 0 15 4 210 0 16 4 210 0 17 4 210 0 18 4 210 0 19 4 210 0 20 4 210 0 21 4 210 0 23 4 210 0 24 4 210 0 26 4 210 0 27 4 210 0 28 4 210 0 30 4 210 0 31 4 210 0 32 4 210 0 33 4 210 0 34 4 210 0 35 4 210 0 36 4 210 0 37 4 210 0 38 4 210 0 39 4 210 0 40 4 210 0 41 4 210 0 42 4 210 0 44 4 210 0 45 4 210 0 46 4 210 0 47 4 210 0 48 4 210 0 49 4 210 0 51 4 210 0 52 4 210 0 53 4 210 0 56 4 210 0 57 4 210 0 58 4 210 0 59 4 210 0 60 4 210 0 61 0 235 0 64 4 210 0 65 4 210 0 66 4 210 0 67 4 210 0 69 4 210 0 70 4 210 0 71 4 210 0 72 4 210 0 74 4 210 0 75 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 80 4 210 0 81 4 210 0 84 4 210 0 85 4 210 0 86 4 210 0 87 4 210 0 88 4 210 0 89 4 210 0 90 4 210 0 91 4 210 0 92 4 210 0 94 4 210 0 96 4 210 0 97 4 210 0 99 4 210 0 102 4 210 0 104 4 210 0 105 4 210 0 106 4 210 0 107 4 210 0 108 4 210 0 109 4 210 0 110 4 210 0 111 4 210 0 112 4 210 0 113 4 210 0 117 4 210 0 118 4 210 0 120 4 210 0 121 4 210 0 122 4 210 0 123 4 210 0 125 4 210 0 126 4 210 0 127 4 210 0 128 4 210 0 129 4 210 1 137 4 210 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 14 9 0 135 14 9 0 136 14 9 0 138 2 105 0 239 14 9 0 245 14 9 0 246 14 9 0 247 14 9 0 248 14 9 0 249 14 9 0 250 14 9 0 251 14 9 0 252 14 9 0 255 14 9 1 0 14 9 1 8 14 9 1 9 14 9 1 15 14 9 1 19 14 9 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 14 9 1 30 14 9 1 31 14 9 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 14 9 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 6 0 3 0 6 0 5 0 6 0 9 0 6 0 13 0 6 0 20 0 6 0 24 0 6 0 30 0 6 0 44 0 6 0 45 0 6 0 49 0 6 0 53 0 6 0 56 0 6 0 60 0 6 0 67 0 6 0 77 0 6 0 81 0 6 0 85 0 6 0 87 0 6 0 90 0 6 0 92 0 6 0 105 0 6 0 108 0 6 0 112 0 6 0 113 0 6 0 117 0 6 0 118 0 6 0 120 0 6 0 121 0 6 0 122 0 6 0 123 0 6 0 125 0 6 0 127 0 6 0 129 14 13 0 133 0 6 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 14 17 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 14 21 0 135 14 21 0 136 14 21 0 138 2 105 0 239 14 21 0 245 14 21 0 246 14 21 0 247 14 21 0 248 14 21 0 249 14 21 0 250 14 21 0 251 14 21 0 252 14 21 0 255 14 21 1 0 14 21 1 8 14 21 1 9 14 21 1 15 14 21 1 19 14 21 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 14 21 1 30 14 21 1 31 14 21 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 14 21 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 14 25 0 105] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 14 29 0 135 14 29 0 136 14 29 0 138 3 57 0 236 14 29 1 71 14 29 1 72 14 29 1 73 14 29 1 74 14 29 1 75 14 29 1 78 14 29 1 79 14 29 1 80 14 29 1 81 14 29 1 82 3 101 1 83 14 29 1 92 14 29 1 94 14 29 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 14 29 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 4 214 0 7 5 189 0 9 4 214 0 10 4 214 0 14 5 197 0 15 4 214 0 16 5 205 0 17 4 214 0 18 4 214 0 19 5 213 0 20 4 214 0 21 5 221 0 23 4 214 0 24 4 214 0 26 5 233 0 27 4 214 0 28 4 214 0 31 5 241 0 32 4 214 0 33 5 249 0 34 4 214 0 35 6 1 0 36 4 214 0 37 6 5 0 38 6 9 0 39 4 214 0 40 6 17 0 41 6 21 0 42 4 214 0 46 6 25 0 47 4 214 0 48 6 33 0 51 4 214 0 64 4 214 0 104 4 214 0 106 4 214 0 107 4 214 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 214 1 138] 
#[0 14 33 0 35] 
#[0 4 218 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 4 222 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 4 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137] 
#[1 1 14 0 2 1 14 0 6 1 14 0 7 1 14 0 9 1 14 0 10 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 1 14 0 20 1 14 0 21 1 14 0 23 1 14 0 24 1 14 0 26 1 14 0 27 1 14 0 28 6 69 0 31 1 14 0 32 1 14 0 33 1 14 0 34 1 14 0 35 1 14 0 36 1 14 0 38 1 14 0 39 1 14 0 40 1 14 0 41 1 14 0 42 1 14 0 47 1 14 0 48 1 14 0 51 1 14 0 106 1 14 0 107 4 230 0 108 1 14 0 109 1 14 0 110 1 14 0 111 1 14 0 127 1 14 0 128 1 14 0 129] 
#[0 14 37 0 108] 
#[1 1 17 0 1 0 7 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 1 53 0 31 2 61 0 44 1 61 0 45 1 65 0 52 0 53 0 53 1 69 0 56 1 73 0 57 0 57 0 58 1 77 0 59 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 1 81 0 67 0 10 0 69 1 85 0 70 1 89 0 71 0 77 0 72 0 11 0 74 1 97 0 75 0 81 0 77 1 101 0 78 0 85 0 79 1 105 0 80 0 89 0 84 1 109 0 86 2 49 0 87 0 97 0 88 0 101 0 89 2 49 0 90 0 109 0 91 1 113 0 92 0 113 0 94 0 117 0 96 1 117 0 97 0 125 0 99 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 4 234 0 108 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 14 45 0 135 1 177 0 136 1 181 0 138 1 185 0 142 0 165 0 143 1 189 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 1 193 0 180 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 1 197 0 239 14 41 0 242 14 41 0 243 1 209 0 244 1 213 0 245 14 45 0 246 1 221 0 247 14 45 0 248 14 45 0 249 14 45 0 250 14 45 0 251 1 221 0 252 1 221 0 255 1 221 1 0 14 45 1 8 14 45 1 9 14 45 1 15 14 45 1 19 1 221 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 1 221 1 30 1 221 1 31 1 221 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 14 45 1 120 2 69 1 121 1 9 1 131 2 49 1 132 2 73 1 137] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 14 49 0 135 14 49 0 136 14 49 0 138 3 57 0 236 14 49 1 71 14 49 1 72 14 49 1 73 14 49 1 74 14 49 1 75 14 49 1 78 14 49 1 79 14 49 1 80 14 49 1 81 14 49 1 82 3 101 1 83 14 49 1 92 14 49 1 94 14 49 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 14 49 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 4 238 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 4 238 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 4 238 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 4 238 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 4 238 0 46 6 25 0 47 6 29 0 48 6 33 0 51 4 238 0 64 4 238 0 104 6 37 0 106 6 41 0 107 4 238 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 4 238 1 138] 
#[1 4 242 0 19 14 53 0 29 4 242 0 105] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 14 57 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 14 61 0 135 14 61 0 136 14 61 0 138 2 105 0 239 14 61 0 245 14 61 0 246 14 61 0 247 14 61 0 248 14 61 0 249 14 61 0 250 14 61 0 251 14 61 0 252 14 61 0 255 14 61 1 0 14 61 1 8 14 61 1 9 14 61 1 15 14 61 1 19 14 61 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 14 61 1 30 14 61 1 31 14 61 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 14 61 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 14 65 0 19 4 246 0 105 14 69 1 21] 
#[1 1 125 0 104 14 73 0 252] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 14 77 1 125 3 153 1 126 3 137 1 132] 
#[0 4 250 0 30] 
#[1 14 81 0 29 14 85 0 31 14 89 0 35] 
#[1 5 181 0 6 4 254 0 7 4 254 0 9 4 254 0 10 4 254 0 14 5 197 0 15 4 254 0 16 5 205 0 17 4 254 0 18 4 254 0 19 5 213 0 20 4 254 0 21 5 221 0 23 4 254 0 24 4 254 0 26 5 233 0 27 4 254 0 28 4 254 0 31 5 241 0 32 4 254 0 33 4 254 0 35 4 254 0 37 6 9 0 39 4 254 0 40 6 17 0 41 6 21 0 42 4 254 0 46 6 25 0 47 4 254 0 48 6 33 0 51 4 254 0 64 4 254 0 104 4 254 0 106 4 254 0 107 4 254 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 4 254 1 138] 
#[1 5 2 0 2 5 2 0 6 5 2 0 7 5 2 0 9 5 2 0 10 5 2 0 14 5 2 0 15 5 2 0 16 5 2 0 17 5 2 0 18 5 2 0 19 5 2 0 20 5 2 0 21 5 221 0 23 5 2 0 24 5 2 0 26 5 2 0 27 5 2 0 28 5 2 0 31 5 2 0 32 5 2 0 33 5 2 0 34 5 2 0 35 5 2 0 36 5 2 0 37 5 2 0 38 5 2 0 39 5 2 0 40 5 2 0 41 6 21 0 42 5 2 0 46 5 2 0 47 5 2 0 48 6 33 0 51 5 2 0 64 5 2 0 104 5 2 0 106 5 2 0 107 5 2 0 108 5 2 0 109 6 49 0 110 6 53 0 111 5 2 0 127 5 2 0 128 5 2 0 129 5 2 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 6 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 6 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 6 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 6 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 6 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 6 0 64 5 6 0 104 6 37 0 106 6 41 0 107 5 6 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 6 1 138] 
#[1 5 177 0 2 5 181 0 6 5 10 0 7 5 10 0 9 5 10 0 10 5 10 0 14 5 197 0 15 5 10 0 16 5 205 0 17 5 10 0 18 5 10 0 19 5 213 0 20 5 10 0 21 5 221 0 23 5 10 0 24 5 10 0 26 5 233 0 27 5 10 0 28 5 10 0 31 5 241 0 32 5 10 0 33 5 249 0 34 5 10 0 35 6 1 0 36 5 10 0 37 6 5 0 38 6 9 0 39 5 10 0 40 6 17 0 41 6 21 0 42 5 10 0 46 6 25 0 47 5 10 0 48 6 33 0 51 5 10 0 64 5 10 0 104 5 10 0 106 5 10 0 107 5 10 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 10 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 14 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 14 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 14 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 14 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 14 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 14 0 64 5 14 0 104 6 37 0 106 6 41 0 107 5 14 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 14 1 138] 
#[1 5 18 0 2 5 18 0 6 5 18 0 7 5 18 0 9 5 18 0 10 5 18 0 14 5 18 0 15 5 18 0 16 5 18 0 17 5 18 0 18 5 18 0 19 5 18 0 20 5 18 0 21 5 221 0 23 5 18 0 24 5 18 0 26 5 18 0 27 5 18 0 28 5 18 0 31 5 18 0 32 5 18 0 33 5 18 0 34 5 18 0 35 5 18 0 36 5 18 0 37 5 18 0 38 5 18 0 39 5 18 0 40 5 18 0 41 6 21 0 42 5 18 0 46 5 18 0 47 5 18 0 48 6 33 0 51 5 18 0 64 5 18 0 104 5 18 0 106 5 18 0 107 5 18 0 108 5 18 0 109 6 49 0 110 6 53 0 111 5 18 0 127 5 18 0 128 5 18 0 129 5 18 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 22 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 22 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 22 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 22 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 22 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 22 0 64 5 22 0 104 6 37 0 106 6 41 0 107 5 22 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 22 1 138] 
#[1 5 26 0 2 5 181 0 6 5 26 0 7 5 26 0 9 5 26 0 10 5 26 0 14 5 197 0 15 5 26 0 16 5 26 0 17 5 26 0 18 5 26 0 19 5 26 0 20 5 26 0 21 5 221 0 23 5 26 0 24 5 26 0 26 5 233 0 27 5 26 0 28 5 26 0 31 5 26 0 32 5 26 0 33 5 26 0 34 5 26 0 35 5 26 0 36 5 26 0 37 5 26 0 38 5 26 0 39 5 26 0 40 5 26 0 41 6 21 0 42 5 26 0 46 5 26 0 47 5 26 0 48 6 33 0 51 5 26 0 64 5 26 0 104 5 26 0 106 5 26 0 107 5 26 0 108 5 26 0 109 6 49 0 110 6 53 0 111 5 26 0 127 5 26 0 128 5 26 0 129 5 26 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 30 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 30 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 30 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 30 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 30 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 30 0 64 5 30 0 104 6 37 0 106 6 41 0 107 5 30 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 30 1 138] 
#[1 5 34 0 2 5 181 0 6 5 34 0 7 5 34 0 9 5 34 0 10 5 34 0 14 5 197 0 15 5 34 0 16 5 34 0 17 5 34 0 18 5 34 0 19 5 34 0 20 5 34 0 21 5 221 0 23 5 34 0 24 5 34 0 26 5 233 0 27 5 34 0 28 5 34 0 31 5 34 0 32 5 34 0 33 5 34 0 34 5 34 0 35 5 34 0 36 5 34 0 37 5 34 0 38 5 34 0 39 5 34 0 40 5 34 0 41 6 21 0 42 5 34 0 46 5 34 0 47 5 34 0 48 6 33 0 51 5 34 0 64 5 34 0 104 5 34 0 106 5 34 0 107 5 34 0 108 5 34 0 109 6 49 0 110 6 53 0 111 5 34 0 127 5 34 0 128 5 34 0 129 5 34 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 38 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 38 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 38 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 38 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 38 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 38 0 64 5 38 0 104 6 37 0 106 6 41 0 107 5 38 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 38 1 138] 
#[0 5 42 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 50 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 14 93 0 110] 
#[1 5 54 0 2 5 54 0 6 5 54 0 7 5 54 0 9 5 54 0 10 5 54 0 14 5 54 0 15 5 54 0 16 5 54 0 17 5 54 0 18 5 54 0 19 5 54 0 20 5 54 0 21 5 54 0 23 5 54 0 24 5 54 0 26 5 54 0 27 5 54 0 28 0 178 0 30 5 54 0 31 5 54 0 32 5 54 0 33 5 54 0 34 5 54 0 35 5 54 0 36 5 54 0 37 5 54 0 38 5 54 0 39 5 54 0 40 5 54 0 41 5 54 0 42 5 54 0 46 5 54 0 47 5 54 0 48 5 54 0 51 5 54 0 64 5 54 0 104 5 54 0 106 5 54 0 107 5 54 0 108 5 54 0 109 0 239 0 110 5 54 0 111 5 54 0 127 5 54 0 128 5 54 0 129 5 54 1 138] 
#[1 5 177 0 2 5 181 0 6 5 58 0 7 5 189 0 9 5 58 0 10 5 58 0 14 5 197 0 15 5 58 0 16 5 205 0 17 5 58 0 18 5 58 0 19 5 213 0 20 5 58 0 21 5 221 0 23 5 233 0 27 5 58 0 28 5 58 0 31 5 241 0 32 5 58 0 33 5 249 0 34 5 58 0 35 6 1 0 36 5 58 0 37 6 5 0 38 6 9 0 39 5 58 0 40 6 17 0 41 6 21 0 42 5 58 0 46 6 25 0 47 5 58 0 48 6 33 0 51 5 58 0 64 5 58 0 104 5 58 0 106 6 41 0 107 5 58 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 58 1 138] 
#[1 5 177 0 2 5 181 0 6 5 62 0 7 5 189 0 9 5 62 0 10 5 62 0 14 5 197 0 15 5 62 0 16 5 205 0 17 5 62 0 18 5 62 0 19 5 213 0 20 5 62 0 21 5 221 0 23 5 233 0 27 5 62 0 28 5 62 0 31 5 241 0 32 5 62 0 33 5 249 0 34 5 62 0 35 6 1 0 36 5 62 0 37 6 5 0 38 6 9 0 39 5 62 0 40 6 17 0 41 6 21 0 42 5 62 0 46 6 25 0 47 5 62 0 48 6 33 0 51 5 62 0 64 5 62 0 104 5 62 0 106 6 41 0 107 5 62 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 62 1 138] 
#[1 5 66 0 2 5 66 0 6 5 66 0 7 5 66 0 9 5 66 0 10 5 66 0 14 5 66 0 15 5 66 0 16 5 66 0 17 5 66 0 18 5 66 0 19 5 66 0 20 5 66 0 21 5 221 0 23 5 66 0 24 5 66 0 26 5 66 0 27 5 66 0 28 5 66 0 31 5 66 0 32 5 66 0 33 5 66 0 34 5 66 0 35 5 66 0 36 5 66 0 37 5 66 0 38 5 66 0 39 5 66 0 40 5 66 0 41 6 21 0 42 5 66 0 46 5 66 0 47 5 66 0 48 6 33 0 51 5 66 0 64 5 66 0 104 5 66 0 106 5 66 0 107 5 66 0 108 5 66 0 109 6 49 0 110 6 53 0 111 5 66 0 127 5 66 0 128 5 66 0 129 5 66 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 70 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 70 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 70 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 70 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 70 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 70 0 64 5 70 0 104 6 37 0 106 6 41 0 107 5 70 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 70 1 138] 
#[1 5 74 0 2 5 181 0 6 5 74 0 7 5 74 0 9 5 74 0 10 5 74 0 14 5 197 0 15 5 74 0 16 5 205 0 17 5 74 0 18 5 74 0 19 5 213 0 20 5 74 0 21 5 221 0 23 5 74 0 24 5 74 0 26 5 233 0 27 5 74 0 28 5 74 0 31 5 74 0 32 5 74 0 33 5 74 0 34 5 74 0 35 5 74 0 36 5 74 0 37 5 74 0 38 5 74 0 39 5 74 0 40 5 74 0 41 6 21 0 42 5 74 0 46 5 74 0 47 5 74 0 48 6 33 0 51 5 74 0 64 5 74 0 104 5 74 0 106 5 74 0 107 5 74 0 108 5 74 0 109 6 49 0 110 6 53 0 111 5 74 0 127 5 74 0 128 5 74 0 129 5 74 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 78 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 78 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 78 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 78 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 78 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 78 0 64 5 78 0 104 6 37 0 106 6 41 0 107 5 78 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 78 1 138] 
#[1 5 181 0 6 5 82 0 7 5 82 0 9 5 82 0 10 5 82 0 14 5 197 0 15 5 82 0 16 5 205 0 17 5 82 0 18 5 82 0 19 5 213 0 20 5 82 0 21 5 221 0 23 5 82 0 24 5 82 0 26 5 233 0 27 5 82 0 28 5 82 0 31 5 241 0 32 5 82 0 33 5 82 0 35 5 82 0 37 6 9 0 39 5 82 0 40 6 17 0 41 6 21 0 42 5 82 0 46 6 25 0 47 5 82 0 48 6 33 0 51 5 82 0 64 5 82 0 104 5 82 0 106 5 82 0 107 5 82 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 5 82 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 86 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 86 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 86 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 86 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 86 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 86 0 64 5 86 0 104 6 37 0 106 6 41 0 107 5 86 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 86 1 138] 
#[1 5 181 0 6 5 90 0 7 5 90 0 9 5 90 0 10 5 90 0 14 5 197 0 15 5 90 0 16 5 205 0 17 5 90 0 18 5 90 0 19 5 213 0 20 5 90 0 21 5 221 0 23 5 90 0 24 5 90 0 26 5 233 0 27 5 90 0 28 5 90 0 31 5 241 0 32 5 90 0 33 5 90 0 35 5 90 0 37 6 9 0 39 5 90 0 40 6 17 0 41 6 21 0 42 5 90 0 46 6 25 0 47 5 90 0 48 6 33 0 51 5 90 0 64 5 90 0 104 5 90 0 106 5 90 0 107 5 90 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 5 90 1 138] 
#[1 5 181 0 6 5 94 0 7 5 94 0 9 5 94 0 10 5 94 0 14 5 197 0 15 5 94 0 16 5 205 0 17 5 94 0 18 5 94 0 19 5 213 0 20 5 94 0 21 5 221 0 23 5 94 0 24 5 94 0 26 5 233 0 27 5 94 0 28 5 94 0 31 5 241 0 32 5 94 0 33 5 94 0 35 5 94 0 37 6 9 0 39 5 94 0 40 6 17 0 41 6 21 0 42 5 94 0 46 6 25 0 47 5 94 0 48 6 33 0 51 5 94 0 64 5 94 0 104 5 94 0 106 5 94 0 107 5 94 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 5 94 1 138] 
#[1 5 98 0 2 5 181 0 6 5 98 0 7 5 98 0 9 5 98 0 10 5 98 0 14 5 197 0 15 5 98 0 16 5 205 0 17 5 98 0 18 5 98 0 19 5 213 0 20 5 98 0 21 5 221 0 23 5 98 0 24 5 98 0 26 5 233 0 27 5 98 0 28 5 98 0 31 5 98 0 32 5 98 0 33 5 98 0 34 5 98 0 35 5 98 0 36 5 98 0 37 5 98 0 38 5 98 0 39 5 98 0 40 5 98 0 41 6 21 0 42 5 98 0 46 5 98 0 47 5 98 0 48 6 33 0 51 5 98 0 64 5 98 0 104 5 98 0 106 5 98 0 107 5 98 0 108 5 98 0 109 6 49 0 110 6 53 0 111 5 98 0 127 5 98 0 128 5 98 0 129 5 98 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 102 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 102 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 102 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 102 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 102 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 102 0 64 5 102 0 104 6 37 0 106 6 41 0 107 5 102 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 102 1 138] 
#[1 5 106 0 2 5 181 0 6 5 106 0 7 5 106 0 9 5 106 0 10 5 106 0 14 5 197 0 15 5 106 0 16 5 205 0 17 5 106 0 18 5 106 0 19 5 213 0 20 5 106 0 21 5 221 0 23 5 106 0 24 5 106 0 26 5 233 0 27 5 106 0 28 5 106 0 31 5 106 0 32 5 106 0 33 5 106 0 34 5 106 0 35 5 106 0 36 5 106 0 37 5 106 0 38 5 106 0 39 5 106 0 40 5 106 0 41 6 21 0 42 5 106 0 46 5 106 0 47 5 106 0 48 6 33 0 51 5 106 0 64 5 106 0 104 5 106 0 106 5 106 0 107 5 106 0 108 5 106 0 109 6 49 0 110 6 53 0 111 5 106 0 127 5 106 0 128 5 106 0 129 5 106 1 138] 
#[1 5 110 0 2 5 181 0 6 5 110 0 7 5 110 0 9 5 110 0 10 5 110 0 14 5 197 0 15 5 110 0 16 5 205 0 17 5 110 0 18 5 110 0 19 5 213 0 20 5 110 0 21 5 221 0 23 5 110 0 24 5 110 0 26 5 233 0 27 5 110 0 28 5 110 0 31 5 241 0 32 5 110 0 33 5 110 0 34 5 110 0 35 5 110 0 36 5 110 0 37 5 110 0 38 6 9 0 39 5 110 0 40 6 17 0 41 6 21 0 42 5 110 0 46 5 110 0 47 5 110 0 48 6 33 0 51 5 110 0 64 5 110 0 104 5 110 0 106 5 110 0 107 5 110 0 108 5 110 0 109 6 49 0 110 6 53 0 111 5 110 0 127 5 110 0 128 6 65 0 129 5 110 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 114 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 114 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 114 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 114 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 114 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 114 0 64 5 114 0 104 6 37 0 106 6 41 0 107 5 114 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 114 1 138] 
#[0 5 118 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 122 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 122 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 122 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 5 122 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 5 122 0 46 6 25 0 47 6 29 0 48 6 33 0 51 5 122 0 64 5 122 0 104 6 37 0 106 6 41 0 107 5 122 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 122 1 138] 
#[1 5 177 0 2 5 181 0 6 5 126 0 7 5 189 0 9 5 126 0 10 5 126 0 14 5 197 0 15 5 126 0 16 5 205 0 17 5 126 0 18 5 126 0 19 5 213 0 20 5 126 0 21 5 221 0 23 5 126 0 24 5 126 0 26 5 233 0 27 5 126 0 28 5 126 0 31 5 241 0 32 5 126 0 33 5 249 0 34 5 126 0 35 6 1 0 36 5 126 0 37 6 5 0 38 6 9 0 39 5 126 0 40 6 17 0 41 6 21 0 42 5 126 0 46 6 25 0 47 5 126 0 48 6 33 0 51 5 126 0 64 5 126 0 104 5 126 0 106 5 126 0 107 5 126 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 5 126 1 138] 
#[1 5 130 0 2 5 181 0 6 5 130 0 7 5 130 0 9 5 130 0 10 5 130 0 14 5 197 0 15 5 130 0 16 5 205 0 17 5 130 0 18 5 130 0 19 5 213 0 20 5 130 0 21 5 221 0 23 5 130 0 24 5 130 0 26 5 233 0 27 5 130 0 28 5 130 0 31 5 241 0 32 5 130 0 33 5 130 0 34 5 130 0 35 5 130 0 36 5 130 0 37 5 130 0 38 6 9 0 39 5 130 0 40 6 17 0 41 6 21 0 42 5 130 0 46 6 25 0 47 5 130 0 48 6 33 0 51 5 130 0 64 5 130 0 104 5 130 0 106 5 130 0 107 5 130 0 108 5 130 0 109 6 49 0 110 6 53 0 111 5 130 0 127 5 130 0 128 6 65 0 129 5 130 1 138] 
#[0 5 134 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 138 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 138 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 14 97 1 17] 
#[0 14 101 0 14] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 14 105 0 46 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 5 181 0 6 5 142 0 7 5 142 0 9 5 142 0 10 5 142 0 14 5 197 0 15 5 142 0 16 5 205 0 17 5 142 0 18 5 142 0 19 5 213 0 20 5 142 0 21 5 221 0 23 5 142 0 24 5 142 0 26 5 233 0 27 5 142 0 28 5 142 0 31 5 241 0 32 5 142 0 33 5 142 0 35 5 142 0 37 6 9 0 39 5 142 0 40 6 17 0 41 6 21 0 42 5 142 0 46 6 25 0 47 5 142 0 48 6 33 0 51 5 142 0 64 5 142 0 104 5 142 0 106 5 142 0 107 5 142 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 5 142 1 138] 
#[1 5 181 0 6 5 146 0 7 5 146 0 9 5 146 0 10 5 146 0 14 5 197 0 15 5 146 0 16 5 205 0 17 5 146 0 18 5 146 0 19 5 213 0 20 5 146 0 21 5 221 0 23 5 146 0 24 5 146 0 26 5 233 0 27 5 146 0 28 5 146 0 31 5 241 0 32 5 146 0 33 5 146 0 35 5 146 0 37 6 9 0 39 5 146 0 40 6 17 0 41 6 21 0 42 5 146 0 46 6 25 0 47 5 146 0 48 6 33 0 51 5 146 0 64 5 146 0 104 5 146 0 106 5 146 0 107 5 146 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 65 0 129 5 146 1 138] 
#[1 5 150 0 2 5 181 0 6 5 150 0 7 5 150 0 9 5 150 0 10 5 150 0 14 5 197 0 15 5 150 0 16 5 205 0 17 5 150 0 18 5 150 0 19 5 213 0 20 5 150 0 21 5 221 0 23 5 150 0 24 5 150 0 26 5 233 0 27 5 150 0 28 5 150 0 31 5 241 0 32 5 150 0 33 5 150 0 34 5 150 0 35 5 150 0 36 5 150 0 37 5 150 0 38 6 9 0 39 5 150 0 40 6 17 0 41 6 21 0 42 5 150 0 46 5 150 0 47 5 150 0 48 6 33 0 51 5 150 0 64 5 150 0 104 5 150 0 106 5 150 0 107 5 150 0 108 5 150 0 109 6 49 0 110 6 53 0 111 5 150 0 127 5 150 0 128 5 150 0 129 5 150 1 138] 
#[0 5 154 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 138 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 138 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 14 109 1 17] 
#[1 0 243 0 3 14 117 0 24 0 14 0 53 0 14 0 77 14 121 0 108 0 14 0 112 0 14 0 113 0 14 0 123 14 125 0 180 2 141 0 238 14 129 1 10 14 133 1 13 14 137 1 14] 
#[0 5 158 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 162 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 166 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 71 0 73 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 5 0 5 0 45 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 1 5 0 112 1 5 0 113 14 141 0 240 6 133 1 105 1 5 1 108 1 5 1 132] 
#[0 5 170 0 1 0 3 0 5 0 8 0 9 0 11 0 12 0 13 0 15 0 20 0 24 0 25 0 26 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 63 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 137] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 14 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 14 145 0 137 4 94 1 137] 
#[1 1 81 0 67 1 113 0 92 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 14 149 0 248 14 149 0 249 14 149 0 250 2 73 1 137] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 46 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 14 153 0 137 4 94 1 137] 
#[1 4 94 0 1 4 94 0 2 4 94 0 3 4 94 0 4 4 94 0 5 4 94 0 6 4 94 0 7 4 94 0 9 4 94 0 10 4 94 0 11 4 94 0 12 4 94 0 13 4 94 0 15 4 94 0 16 4 94 0 17 4 94 0 18 4 94 0 19 4 94 0 20 4 94 0 21 4 94 0 22 4 94 0 23 4 94 0 24 4 94 0 25 4 94 0 26 4 94 0 27 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 42 4 94 0 43 4 94 0 44 4 94 0 45 4 94 0 47 4 94 0 48 4 94 0 49 4 94 0 50 4 94 0 51 4 94 0 52 4 94 0 53 4 94 0 54 4 94 0 55 4 94 0 56 4 94 0 57 4 94 0 58 4 94 0 59 4 94 0 60 4 94 0 62 4 94 0 63 4 94 0 64 4 94 0 65 4 94 0 66 4 94 0 67 4 94 0 68 4 94 0 69 4 94 0 70 4 94 0 71 4 94 0 72 4 94 0 73 4 94 0 74 4 94 0 75 4 94 0 76 4 94 0 77 4 94 0 78 4 94 0 79 4 94 0 80 4 94 0 81 4 94 0 82 4 94 0 83 4 94 0 84 4 94 0 85 4 94 0 86 4 94 0 87 4 94 0 88 4 94 0 89 4 94 0 90 4 94 0 91 4 94 0 92 4 94 0 93 4 94 0 94 4 94 0 95 4 94 0 96 4 94 0 97 4 94 0 98 4 94 0 99 4 94 0 100 4 94 0 101 4 94 0 102 4 94 0 103 4 94 0 104 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 108 4 94 0 112 4 94 0 113 4 94 0 117 4 94 0 118 4 94 0 120 4 94 0 121 4 94 0 122 4 94 0 123 4 94 0 125 4 94 0 126 4 94 0 127 4 94 0 128 4 94 0 129 14 157 0 137 4 94 1 137] 
#[0 5 174 0 46] 
#[0 5 178 0 46] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 14 161 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 14 165 0 216 7 57 0 236 14 169 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 14 173 0 104] 
#[1 14 177 0 29 14 181 0 35 6 197 0 101 2 42 0 104 14 185 0 211 14 185 0 230] 
#[1 14 189 0 31 14 193 0 35] 
#[0 5 182 0 69] 
#[1 14 197 0 31 14 201 0 35] 
#[0 5 186 0 69] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 14 205 0 174] 
#[0 5 190 0 69] 
#[0 5 194 0 69] 
#[1 5 149 0 1 2 49 0 5 14 233 0 11 14 233 0 12 2 245 0 13 2 249 0 15 2 253 0 30 5 198 0 31 5 198 0 35 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 5 198 0 104 2 49 0 112 2 49 0 113 14 233 0 126 1 169 0 127 3 45 0 129 14 229 0 135 14 229 0 136 14 229 0 138 14 209 0 231 14 213 0 233 14 213 0 234 14 213 0 235 14 225 0 236 14 229 1 70 14 229 1 72 14 229 1 73 14 229 1 74 14 229 1 75 14 229 1 78 14 229 1 79 14 229 1 80 14 229 1 81 14 229 1 82 3 101 1 83 14 229 1 91 14 229 1 92 14 229 1 93 14 229 1 95 3 121 1 96 3 125 1 99 3 129 1 100 14 233 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 14 229 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 5 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 14 245 0 53 14 237 0 60 14 245 0 77 0 89 0 84 14 245 0 112 14 245 0 113 5 165 0 239 14 241 1 131 14 245 1 132] 
#[0 14 249 0 108] 
#[1 5 206 0 19 5 206 0 108 14 253 0 201] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 15 1 0 108 0 14 0 112 0 14 0 113 10 189 0 180 15 5 0 199 10 197 0 202] 
#[0 15 9 0 104] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 15 13 0 108 0 14 0 112 0 14 0 113 10 189 0 180 15 17 0 199 10 197 0 202] 
#[0 5 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 15 21 0 49 15 25 0 53 15 25 0 77 15 25 0 112 15 25 0 113 15 25 1 132] 
#[0 15 29 0 31] 
#[1 2 173 0 52 2 153 0 66 0 10 0 69 2 177 0 97 0 189 0 173 2 181 0 174] 
#[1 2 153 0 66 0 10 0 69 0 189 0 173 3 213 0 174] 
#[0 5 214 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 5 218 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 33 0 142 15 37 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 41 0 208 3 249 0 239 1 1 1 105 1 5 1 108 15 45 1 131 1 5 1 132] 
#[0 5 222 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 5 226 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 15 49 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 15 53 0 222 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[0 5 230 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 49 0 52 10 225 0 58 0 65 0 61 2 153 0 66 0 10 0 69 0 97 0 88 10 229 0 97 15 57 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 61 0 208] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 15 65 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 15 69 0 221 11 1 0 222 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 15 73 0 135 15 73 0 136 15 73 0 138 3 57 0 236 15 73 1 70 15 73 1 72 15 73 1 73 15 73 1 74 15 73 1 75 15 73 1 78 15 73 1 79 15 73 1 80 15 73 1 81 15 73 1 82 3 101 1 83 15 73 1 91 15 73 1 92 15 73 1 93 15 73 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 15 73 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 15 77 1 125 3 153 1 126 3 137 1 132] 
#[1 0 247 0 14 3 230 0 17 3 230 0 19] 
#[1 0 251 0 14 4 22 0 17 4 22 0 19] 
#[0 5 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 238 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 5 242 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 15 89 0 14 11 33 0 19] 
#[0 5 246 0 1 0 5 0 11 0 12 0 13 0 14 0 15 0 30 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 112 0 113 0 126 0 127 0 129] 
#[0 5 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 5 254 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 2 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 6 6 0 2 6 6 0 6 6 6 0 7 6 6 0 9 6 6 0 10 6 6 0 14 6 6 0 15 6 6 0 16 6 6 0 17 6 6 0 18 6 6 0 19 6 6 0 20 6 6 0 21 6 6 0 23 6 6 0 24 6 6 0 26 6 6 0 27 6 6 0 28 6 6 0 29 0 255 0 30 6 6 0 31 6 6 0 32 6 6 0 33 6 6 0 34 6 6 0 35 6 6 0 36 6 6 0 37 6 6 0 38 6 6 0 39 6 6 0 40 6 6 0 41 6 6 0 42 6 6 0 46 6 6 0 47 6 6 0 48 6 6 0 51 6 6 0 64 6 6 0 70 6 6 0 101 6 6 0 104 6 6 0 105 6 6 0 106 6 6 0 107 6 6 0 108 6 6 0 109 6 6 0 110 6 6 0 111 6 6 0 127 6 6 0 128 6 6 0 129 12 21 1 123 6 6 1 138] 
#[0 6 10 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 15 93 0 135 15 93 0 136 15 93 0 138 2 105 0 239 15 93 0 245 15 93 0 246 15 93 0 247 15 93 0 248 15 93 0 249 15 93 0 250 15 93 0 251 15 93 0 252 15 93 0 255 15 93 1 0 15 93 1 8 15 93 1 9 15 93 1 15 15 93 1 19 15 93 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 15 93 1 30 15 93 1 31 15 93 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 15 93 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 6 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 15 97 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 15 101 0 135 15 101 0 136 15 101 0 138 3 57 0 236 15 101 1 70 15 101 1 72 15 101 1 73 15 101 1 74 15 101 1 75 15 101 1 78 15 101 1 79 15 101 1 80 15 101 1 81 15 101 1 82 3 101 1 83 15 101 1 91 15 101 1 92 15 101 1 93 15 101 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 15 101 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 15 105 0 236 3 137 1 108 3 137 1 113 15 109 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 15 113 1 125 3 153 1 126 3 137 1 132] 
#[0 11 49 0 14] 
#[0 6 18 0 69] 
#[0 15 117 0 53 0 77 0 112 0 113 1 132] 
#[1 6 22 0 19 15 121 0 29 6 22 0 128] 
#[0 6 26 0 19 0 128] 
#[0 6 30 0 19 0 128] 
#[0 6 34 0 19 0 128] 
#[1 6 38 0 19 15 125 0 29 15 129 0 35 6 38 0 128] 
#[0 6 42 0 3 0 53 0 58 0 77 0 112 0 113 0 126] 
#[1 15 133 0 19 15 137 0 128] 
#[1 6 46 0 3 6 46 0 53 6 46 0 58 6 46 0 77 6 46 0 112 6 46 0 113 6 46 0 126 15 141 0 128] 
#[0 6 50 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 3 238 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 54 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 15 145 0 135 15 145 0 136 15 145 0 138 3 57 0 236 15 145 1 71 15 145 1 72 15 145 1 73 15 145 1 74 15 145 1 75 15 145 1 78 15 145 1 79 15 145 1 80 15 145 1 81 15 145 1 82 3 101 1 83 15 145 1 92 15 145 1 94 15 145 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 15 145 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 6 62 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 15 149 0 70] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 15 153 1 125 3 153 1 126 3 137 1 132] 
#[0 15 157 0 70] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 15 161 0 133] 
#[0 15 165 0 104] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 15 169 0 135 15 169 0 136 15 169 0 138 3 57 0 236 15 169 1 70 15 169 1 72 15 169 1 73 15 169 1 74 15 169 1 75 15 169 1 78 15 169 1 79 15 169 1 80 15 169 1 81 15 169 1 82 3 101 1 83 15 169 1 91 15 169 1 92 15 169 1 93 15 169 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 15 169 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 15 173 0 13] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 15 177 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 15 201 0 212 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 15 213 0 133] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 15 217 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 15 221 0 180 15 225 1 85 15 229 1 86 15 233 1 89 15 237 1 90] 
#[1 6 66 0 2 3 137 0 5 6 66 0 6 6 66 0 7 6 66 0 9 6 66 0 10 3 133 0 11 3 133 0 12 7 53 0 13 6 66 0 14 6 66 0 15 6 66 0 16 6 66 0 17 6 66 0 18 6 66 0 19 6 66 0 20 6 66 0 21 6 66 0 23 6 66 0 24 6 66 0 26 6 66 0 27 6 66 0 28 6 66 0 29 1 3 0 30 6 66 0 31 6 66 0 32 6 66 0 33 6 66 0 34 6 66 0 35 6 66 0 36 6 66 0 37 6 66 0 38 6 66 0 39 6 66 0 40 6 66 0 41 3 1 0 42 3 137 0 44 6 66 0 46 6 66 0 47 6 66 0 48 6 66 0 51 3 137 0 53 3 137 0 60 6 66 0 64 1 7 0 70 3 137 0 77 3 137 0 87 3 137 0 90 6 66 0 101 6 66 0 104 6 66 0 105 6 66 0 106 6 66 0 107 6 66 0 108 6 66 0 109 6 66 0 110 6 66 0 111 3 137 0 112 3 137 0 113 3 133 0 126 6 66 0 127 6 66 0 128 6 66 0 129 7 57 0 236 15 241 1 99 15 241 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132 6 66 1 138] 
#[0 6 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 6 74 0 2 6 74 0 6 6 74 0 7 6 74 0 9 6 74 0 10 6 74 0 14 6 74 0 15 6 74 0 16 6 74 0 17 6 74 0 18 6 74 0 19 6 74 0 20 6 74 0 21 15 245 0 22 6 74 0 23 6 74 0 24 6 74 0 26 6 74 0 27 6 74 0 28 6 74 0 29 6 74 0 30 6 74 0 31 6 74 0 32 6 74 0 33 6 74 0 34 6 74 0 35 6 74 0 36 6 74 0 37 6 74 0 38 6 74 0 39 6 74 0 40 6 74 0 41 6 74 0 42 6 74 0 46 6 74 0 47 6 74 0 48 6 74 0 51 6 74 0 64 6 74 0 70 6 74 0 101 6 74 0 104 6 74 0 105 6 74 0 106 6 74 0 107 6 74 0 108 6 74 0 109 6 74 0 110 6 74 0 111 6 74 0 127 6 74 0 128 6 74 0 129 6 74 1 138] 
#[1 6 78 0 14 6 78 0 19 15 249 1 130] 
#[0 15 253 0 14] 
#[0 6 82 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 86 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 81 0 67 1 113 0 92 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 16 1 0 248 16 1 0 249 16 1 0 250 2 73 1 137] 
#[0 6 90 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 94 0 19 0 128] 
#[0 6 98 0 19 0 128] 
#[0 6 102 0 19 0 128] 
#[1 2 18 0 17 1 11 0 19 1 11 0 128] 
#[1 0 174 0 1 1 102 0 13 1 102 0 17 1 15 0 19 0 115 0 30 1 102 0 127 1 15 0 128 4 9 1 106 4 13 1 107] 
#[1 6 114 0 19 6 114 0 128 16 5 1 116] 
#[0 6 118 0 19 0 128] 
#[0 6 122 0 19 0 128] 
#[1 0 178 0 1 0 178 0 13 0 178 0 17 0 178 0 19 0 178 0 30 16 9 0 35 0 178 0 127 0 178 0 128] 
#[0 6 126 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 130 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 6 197 0 101 2 42 0 104 16 13 0 211 16 13 0 230] 
#[1 16 17 0 13 16 21 0 45 16 25 0 104 16 29 0 145 16 33 0 148 16 37 0 149] 
#[1 16 17 0 13 16 21 0 45 16 25 0 104 16 41 0 145 16 33 0 148 16 37 0 149] 
#[1 16 17 0 13 16 21 0 45 16 25 0 104 16 45 0 145 16 33 0 148 16 37 0 149] 
#[0 6 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 16 49 0 108 1 5 0 112 1 5 0 113 16 53 0 134 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 2 137 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[0 6 138 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[0 16 57 0 14] 
#[0 6 142 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[0 6 146 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 16 61 0 135 16 61 0 136 16 61 0 138 3 57 0 236 16 61 1 70 16 61 1 72 16 61 1 73 16 61 1 74 16 61 1 75 16 61 1 78 16 61 1 79 16 61 1 80 16 61 1 81 16 61 1 82 3 101 1 83 16 61 1 91 16 61 1 92 16 61 1 93 16 61 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 16 61 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 16 65 0 31 16 69 0 35] 
#[1 16 73 0 31 6 197 0 101 16 77 0 230] 
#[1 5 149 0 1 0 37 0 3 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 0 61 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 0 89 0 84 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 16 81 0 135 16 81 0 136 16 81 0 138 3 57 0 236 5 165 0 239 16 81 1 70 16 81 1 72 16 81 1 73 16 81 1 74 16 81 1 75 16 81 1 78 16 81 1 79 16 81 1 80 16 81 1 81 16 81 1 82 3 101 1 83 16 81 1 91 16 81 1 92 16 81 1 93 16 81 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 16 81 1 122 5 157 1 125 3 153 1 126 16 85 1 131 2 49 1 132] 
#[0 16 89 0 14] 
#[1 6 150 0 14 6 150 0 19 16 93 0 196] 
#[0 6 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 16 101 0 53 14 237 0 60 16 101 0 77 0 89 0 84 16 101 0 112 16 101 0 113 5 165 0 239 16 97 1 131 16 101 1 132] 
#[0 16 105 0 108] 
#[1 6 158 0 19 6 158 0 108 16 109 0 192] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 16 113 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 84 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 12 77 0 180 16 117 0 194 12 85 0 197] 
#[0 6 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 16 121 0 108 0 14 0 112 0 14 0 113 12 93 0 180 16 125 0 190 12 101 0 193] 
#[1 16 129 0 31 16 133 0 104] 
#[0 6 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 16 137 0 108 0 14 0 112 0 14 0 113 12 93 0 180 16 141 0 190 12 101 0 193] 
#[1 6 197 0 101 2 42 0 104 16 145 0 211 16 145 0 230] 
#[0 6 170 0 101 0 104] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 6 174 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 6 174 0 101 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 16 149 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 6 178 0 31 0 101] 
#[1 2 42 0 31 6 197 0 101 16 153 0 211 16 153 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 16 157 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 16 161 0 133] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 16 165 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 16 169 0 216 7 57 0 236 16 173 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 16 177 0 104] 
#[1 16 181 0 31 16 185 0 35 6 197 0 101 16 189 0 230] 
#[0 16 193 0 31] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 16 197 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 6 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 16 201 0 135 16 201 0 136 16 201 0 138 3 57 0 236 16 201 1 70 16 201 1 72 16 201 1 73 16 201 1 74 16 201 1 75 16 201 1 78 16 201 1 79 16 201 1 80 16 201 1 81 16 201 1 82 3 101 1 83 16 201 1 91 16 201 1 92 16 201 1 93 16 201 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 16 201 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 16 205 0 31 16 209 0 35] 
#[0 6 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 16 213 0 135 16 213 0 136 16 213 0 138 3 57 0 236 16 213 1 70 16 213 1 72 16 213 1 73 16 213 1 74 16 213 1 75 16 213 1 78 16 213 1 79 16 213 1 80 16 213 1 81 16 213 1 82 3 101 1 83 16 213 1 91 16 213 1 92 16 213 1 93 16 213 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 16 213 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 16 217 0 108] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 0 14 0 112 0 14 0 113 12 93 0 180 16 221 0 190 12 101 0 193] 
#[0 16 225 0 104] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 0 14 0 112 0 14 0 113 12 93 0 180 16 229 0 190 12 101 0 193] 
#[1 16 233 0 29 16 237 0 35 6 197 0 101 2 42 0 104 6 205 0 127 16 241 0 211 16 245 0 223 16 241 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 16 249 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 16 253 0 221 11 1 0 222 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 90 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 17 1 0 133] 
#[0 17 5 0 70] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 17 9 1 125 3 153 1 126 3 137 1 132] 
#[0 17 13 0 70] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 17 17 1 125 3 153 1 126 3 137 1 132] 
#[1 17 21 0 1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 17 25 1 125 3 153 1 126 3 137 1 132] 
#[0 17 29 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 17 33 0 135 17 33 0 136 17 33 0 138 3 57 0 236 17 33 1 70 17 33 1 72 17 33 1 73 17 33 1 74 17 33 1 75 17 33 1 78 17 33 1 79 17 33 1 80 17 33 1 81 17 33 1 82 3 101 1 83 17 33 1 91 17 33 1 92 17 33 1 93 17 33 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 17 33 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 6 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 65 0 6 0 66 0 6 0 69 0 6 0 72 0 6 0 77 0 6 0 79 0 6 0 84 0 6 0 87 0 6 0 88 0 6 0 89 0 6 0 90 0 6 0 91 0 6 0 94 0 6 0 96 0 6 0 97 0 6 0 99 0 6 0 108 0 6 0 112 0 6 0 113 17 37 0 133] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 17 41 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 17 45 0 216 7 57 0 236 17 49 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 17 53 0 104] 
#[1 17 57 0 29 17 61 0 35 6 197 0 101 2 42 0 104 17 65 0 211 17 65 0 230] 
#[0 6 194 0 19 0 31 0 108] 
#[1 4 86 0 19 4 86 0 108 17 69 0 169] 
#[1 17 73 0 19 6 198 0 108 17 77 0 168 17 81 0 170] 
#[0 6 202 0 19 0 31 0 108] 
#[1 1 5 0 5 3 217 0 15 3 221 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 3 225 0 104 17 85 0 108 1 5 0 112 1 5 0 113 17 89 0 167 3 233 1 105 1 5 1 108 1 5 1 132] 
#[0 6 206 0 19 0 31 0 108] 
#[0 6 210 0 19 0 31 0 108] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 11 0 14 0 12 0 14 0 13 17 93 0 14 0 14 0 15 0 14 0 20 0 14 0 24 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 67 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 97 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 126 0 14 0 127 0 14 0 129 17 97 0 176 17 101 0 179 17 105 0 180 17 109 0 183 0 14 1 137] 
#[0 17 113 0 13] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 17 161 0 14 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 19 49 0 46 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 19 53 0 108 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[0 6 214 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 218 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137] 
#[0 6 222 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 6 226 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 13 77 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 6 230 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 44 0 45 0 52 0 53 0 56 0 57 0 59 0 60 0 67 0 70 0 71 0 74 0 75 0 77 0 78 0 80 0 86 0 87 0 90 0 92 0 97 0 102 0 104 0 105 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 19 57 0 135 19 57 0 136 19 57 0 138 2 105 0 239 19 57 0 245 19 57 0 246 19 57 0 247 19 57 0 248 19 57 0 249 19 57 0 250 19 57 0 251 19 57 0 252 19 57 0 255 19 57 1 0 19 57 1 8 19 57 1 9 19 57 1 15 19 57 1 19 19 57 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 19 57 1 30 19 57 1 31 19 57 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 19 57 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 19 61 0 19 6 234 0 46 19 65 1 2] 
#[0 6 238 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 6 242 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 0 178 0 1 0 178 0 13 1 19 0 14 1 19 0 19 0 178 0 25 1 19 0 29 0 178 0 30 1 19 0 31 1 19 0 35 1 19 0 37 19 69 0 43 1 19 0 46 1 19 0 71 1 19 0 73 0 178 0 104 1 19 0 105 1 19 0 108 0 178 0 127] 
#[0 6 246 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 6 250 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 6 254 0 14 0 19 0 46] 
#[1 7 2 0 14 19 77 0 19 19 81 1 62] 
#[0 7 6 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 7 10 0 46 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 19 85 0 19 7 14 0 46 19 81 1 62] 
#[0 7 18 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 89 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 7 22 0 14 7 22 0 19 7 22 0 29 7 22 0 31 7 22 0 35 7 22 0 37 19 93 0 43 7 22 0 46 7 22 0 71 7 22 0 73 7 22 0 105 7 22 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 97 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 7 26 0 14 7 26 0 19 7 26 0 29 7 26 0 31 7 26 0 35 7 26 0 37 7 26 0 46 7 26 0 71 7 26 0 73 1 23 0 105 7 26 0 108 13 173 1 41] 
#[0 7 30 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 1 125 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 19 101 0 252] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 19 105 0 135 19 105 0 136 19 105 0 138 4 233 0 249 4 237 0 250 19 105 1 43 19 105 1 44 19 105 1 45 19 105 1 46 19 105 1 47 19 105 1 48 19 105 1 49 19 105 1 50 5 21 1 51 19 105 1 52 19 105 1 53 19 105 1 60 19 105 1 64 19 105 1 66 19 105 1 67 19 105 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 7 34 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 1 157 0 123 1 161 0 125 19 109 0 249 19 113 0 250] 
#[1 2 61 0 5 2 61 0 44 2 61 0 53 2 61 0 60 2 61 0 77 2 61 0 87 2 61 0 90 2 61 0 112 2 61 0 113 2 61 1 108 4 121 1 112 2 61 1 113 2 61 1 132] 
#[0 2 214 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 2 230 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 2 246 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 2 254 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 7 38 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 66 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 3 74 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 7 42 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 7 46 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 7 50 0 14 19 117 0 19 13 121 1 62 19 121 1 63] 
#[0 19 125 0 14] 
#[0 7 54 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 0 37 0 3 19 129 0 24 19 145 0 53 19 145 0 77 19 133 0 81 19 137 0 85 19 145 0 112 19 145 0 113 19 141 0 123 5 165 0 239 19 141 1 7 19 145 1 132] 
#[0 19 149 0 108] 
#[1 19 153 0 19 7 58 0 108] 
#[1 7 62 0 19 7 62 0 108 19 157 1 57] 
#[0 7 66 0 108] 
#[0 7 70 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 19 161 0 135 19 161 0 136 19 161 0 138 2 105 0 239 19 161 0 245 19 161 0 246 19 161 0 247 19 161 0 248 19 161 0 249 19 161 0 250 19 161 0 251 19 161 0 252 19 161 0 255 19 161 1 0 19 161 1 8 19 161 1 9 19 161 1 15 19 161 1 19 19 161 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 19 161 1 30 19 161 1 31 19 161 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 19 161 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 89 0 71 1 93 0 74 1 125 0 104 19 165 0 252 19 169 1 30 19 173 1 31] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 19 177 0 64 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 1 27 0 3 7 74 0 5 7 74 0 9 7 74 0 13 7 74 0 20 7 74 0 24 7 74 0 30 7 74 0 44 7 74 0 45 7 74 0 49 7 74 0 53 7 74 0 56 7 74 0 60 7 74 0 67 7 74 0 77 7 74 0 81 7 74 0 85 7 74 0 87 7 74 0 90 7 74 0 92 7 74 0 105 19 181 0 108 7 74 0 112 7 74 0 113 7 74 0 117 7 74 0 118 7 74 0 120 7 74 0 121 7 74 0 122 7 74 0 123 7 74 0 125 7 74 0 127 7 74 0 129 2 141 0 238 19 185 1 33 19 189 1 35 7 74 1 137] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 19 193 0 135 19 193 0 136 19 193 0 138 3 57 0 236 19 193 1 71 19 193 1 72 19 193 1 73 19 193 1 74 19 193 1 75 19 193 1 78 19 193 1 79 19 193 1 80 19 193 1 81 19 193 1 82 3 101 1 83 19 193 1 92 19 193 1 94 19 193 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 19 193 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 7 78 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 7 78 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 7 78 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 7 78 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 7 78 0 46 6 25 0 47 6 29 0 48 6 33 0 51 7 78 0 64 7 78 0 104 6 37 0 106 6 41 0 107 7 78 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 7 78 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 19 197 0 22 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 19 201 0 135 19 201 0 136 19 201 0 138 2 105 0 239 19 201 0 245 19 201 0 246 19 201 0 247 19 201 0 248 19 201 0 249 19 201 0 250 19 201 0 251 19 201 0 252 19 201 0 255 19 201 1 0 19 201 1 8 19 201 1 9 19 201 1 15 19 201 1 19 19 201 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 19 201 1 30 19 201 1 31 19 201 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 19 201 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 125 0 104 19 205 0 252] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 19 209 0 135 19 209 0 136 19 209 0 138 2 105 0 239 19 209 0 245 19 209 0 246 19 209 0 247 19 209 0 248 19 209 0 249 19 209 0 250 19 209 0 251 19 209 0 252 19 209 0 255 19 209 1 0 19 209 1 8 19 209 1 9 19 209 1 15 19 209 1 19 19 209 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 19 209 1 30 19 209 1 31 19 209 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 19 209 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 7 82 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 7 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137] 
#[1 1 14 0 2 1 14 0 6 1 14 0 7 1 14 0 9 1 14 0 10 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 1 14 0 20 1 14 0 21 1 14 0 23 1 14 0 24 1 14 0 26 1 14 0 27 1 14 0 28 6 69 0 31 1 14 0 32 1 14 0 33 1 14 0 34 1 14 0 35 1 14 0 36 1 14 0 38 1 14 0 39 1 14 0 40 1 14 0 41 1 14 0 42 1 14 0 47 1 14 0 48 1 14 0 51 1 14 0 106 1 14 0 107 7 90 0 108 1 14 0 109 1 14 0 110 1 14 0 111 1 14 0 127 1 14 0 128 1 14 0 129] 
#[1 1 125 0 104 19 213 0 252] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 19 217 0 135 19 217 0 136 19 217 0 138 3 57 0 236 19 217 1 70 19 217 1 72 19 217 1 73 19 217 1 74 19 217 1 75 19 217 1 78 19 217 1 79 19 217 1 80 19 217 1 81 19 217 1 82 3 101 1 83 19 217 1 91 19 217 1 92 19 217 1 93 19 217 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 19 217 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 19 221 0 135 19 221 0 136 19 221 0 138 3 57 0 236 19 221 1 71 19 221 1 72 19 221 1 73 19 221 1 74 19 221 1 75 19 221 1 78 19 221 1 79 19 221 1 80 19 221 1 81 19 221 1 82 3 101 1 83 19 221 1 92 19 221 1 94 19 221 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 19 221 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 7 94 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 7 94 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 7 94 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 7 94 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 7 94 0 46 6 25 0 47 6 29 0 48 6 33 0 51 7 94 0 64 7 94 0 104 6 37 0 106 6 41 0 107 7 94 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 7 94 1 138] 
#[1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 13 0 14 0 20 0 14 0 24 0 14 0 30 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 67 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 1 31 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 127 0 14 0 129 5 125 0 180 19 225 1 23 0 14 1 137] 
#[0 7 102 0 19 0 105] 
#[0 7 106 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 19 229 0 128] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 19 233 0 135 19 233 0 136 19 233 0 138 3 57 0 236 19 233 1 70 19 233 1 72 19 233 1 73 19 233 1 74 19 233 1 75 19 233 1 78 19 233 1 79 19 233 1 80 19 233 1 81 19 233 1 82 3 101 1 83 19 233 1 91 19 233 1 92 19 233 1 93 19 233 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 19 233 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 7 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 19 237 0 135 19 237 0 136 19 237 0 138 2 105 0 239 19 237 0 245 19 237 0 246 19 237 0 247 19 237 0 248 19 237 0 249 19 237 0 250 19 237 0 251 19 237 0 252 19 237 0 255 19 237 1 0 19 237 1 8 19 237 1 9 19 237 1 15 19 237 1 19 19 237 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 19 237 1 30 19 237 1 31 19 237 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 19 237 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 19 241 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 10 57 0 135 10 57 0 136 10 57 0 138 2 105 0 239 10 57 0 245 10 57 0 246 10 57 0 247 10 57 0 248 10 57 0 249 10 57 0 250 10 57 0 251 10 57 0 252 10 57 0 255 10 57 1 0 10 57 1 8 10 57 1 9 10 57 1 15 19 245 1 18 10 57 1 19 10 57 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 10 57 1 30 10 57 1 31 10 57 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 10 57 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 7 114 0 14 19 249 0 19 19 253 1 16] 
#[0 7 118 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 7 122 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 20 1 0 14 20 5 0 19 19 253 1 16] 
#[0 6 121 0 1] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 20 9 0 135 20 9 0 136 20 9 0 138 2 105 0 239 20 9 0 245 20 9 0 246 20 9 0 247 20 9 0 248 20 9 0 249 20 9 0 250 20 9 0 251 20 9 0 252 20 9 0 255 20 9 1 0 20 9 1 8 20 9 1 9 20 9 1 15 20 9 1 19 20 9 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 20 9 1 30 20 9 1 31 20 9 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 20 9 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 7 126 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 0 37 0 3 20 17 0 53 20 17 0 77 20 17 0 112 20 17 0 113 20 13 0 123 5 165 0 239 20 13 1 7 20 17 1 132] 
#[0 20 21 0 108] 
#[1 7 130 0 19 7 130 0 108 20 25 1 12] 
#[0 20 29 0 108] 
#[0 20 33 0 46] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 20 37 0 14 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[0 7 134 0 46] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 20 41 0 46 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[1 19 45 0 1 19 45 0 2 19 45 0 3 17 129 0 4 19 37 0 5 19 45 0 6 19 45 0 7 19 45 0 9 19 45 0 10 19 37 0 11 19 37 0 12 10 113 0 13 19 21 0 15 19 45 0 16 19 21 0 17 19 45 0 18 19 45 0 19 19 45 0 20 19 45 0 21 19 45 0 22 19 45 0 23 19 45 0 24 19 45 0 25 19 45 0 26 19 45 0 27 19 45 0 28 19 45 0 29 19 45 0 30 19 45 0 31 19 45 0 32 19 45 0 33 19 45 0 34 19 45 0 35 19 45 0 36 19 45 0 37 19 45 0 38 19 45 0 39 19 45 0 40 19 45 0 41 19 21 0 42 19 45 0 43 19 37 0 44 10 121 0 45 19 45 0 47 19 45 0 48 19 45 0 49 19 37 0 50 19 37 0 51 19 37 0 52 19 37 0 53 19 37 0 54 19 37 0 55 19 37 0 56 19 37 0 57 19 37 0 58 19 37 0 59 19 37 0 60 19 37 0 62 19 37 0 63 19 37 0 64 19 37 0 65 19 37 0 66 1 81 0 67 19 37 0 68 19 37 0 69 19 37 0 70 19 37 0 71 19 37 0 72 19 37 0 73 19 37 0 74 19 37 0 75 19 37 0 76 19 37 0 77 19 37 0 78 19 37 0 79 19 37 0 80 19 37 0 81 19 37 0 82 19 37 0 83 19 37 0 84 19 37 0 85 19 37 0 86 19 37 0 87 19 37 0 88 19 37 0 89 19 37 0 90 19 37 0 91 1 113 0 92 19 37 0 93 19 37 0 94 19 37 0 95 19 37 0 96 19 37 0 97 19 37 0 98 19 37 0 99 19 37 0 100 19 37 0 101 19 37 0 102 19 37 0 103 10 125 0 104 19 45 0 105 19 45 0 106 19 45 0 107 20 45 0 108 19 37 0 112 19 37 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 19 37 0 126 19 45 0 127 19 45 0 128 19 45 0 129 19 13 0 139 19 13 0 140 19 13 0 141 19 21 0 156 19 13 0 248 19 13 0 249 19 13 0 250 19 37 1 132 19 37 1 133 19 37 1 134 19 13 1 135 19 45 1 136 2 73 1 137] 
#[1 6 197 0 101 2 42 0 104 20 49 0 211 20 49 0 230] 
#[1 2 42 0 31 6 197 0 101 20 53 0 211 20 53 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 20 57 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 20 61 0 133] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 20 65 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 20 69 0 216 7 57 0 236 20 73 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 20 77 0 104] 
#[0 7 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 20 81 0 135 20 81 0 136 20 81 0 138 2 105 0 239 20 81 0 245 20 81 0 246 20 81 0 247 20 81 0 248 20 81 0 249 20 81 0 250 20 81 0 251 20 81 0 252 20 81 0 255 20 81 1 0 20 81 1 8 20 81 1 9 20 81 1 15 20 81 1 19 20 81 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 20 81 1 30 20 81 1 31 20 81 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 20 81 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 7 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 20 85 0 135 20 85 0 136 20 85 0 138 2 105 0 239 20 85 0 245 20 85 0 246 20 85 0 247 20 85 0 248 20 85 0 249 20 85 0 250 20 85 0 251 20 85 0 252 20 85 0 255 20 85 1 0 20 85 1 8 20 85 1 9 20 85 1 15 20 85 1 19 20 85 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 20 85 1 30 20 85 1 31 20 85 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 20 85 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 7 146 0 69] 
#[0 7 150 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 20 89 0 19 7 154 0 31 7 154 0 35 7 154 0 104] 
#[0 7 158 0 19 0 31 0 35 0 104] 
#[0 7 162 0 19 0 31 0 35 0 104] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 20 93 0 135 20 93 0 136 20 93 0 138 3 57 0 236 20 93 1 70 20 93 1 72 20 93 1 73 20 93 1 74 20 93 1 75 20 93 1 78 20 93 1 79 20 93 1 80 20 93 1 81 20 93 1 82 20 97 1 83 20 93 1 91 20 93 1 92 20 93 1 93 20 93 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 20 93 1 122 20 101 1 125 3 153 1 126 2 49 1 132] 
#[0 20 105 0 29] 
#[1 2 18 0 17 1 35 0 29] 
#[0 0 30 0 53 0 77 0 112 0 113] 
#[0 20 113 0 53 0 77 0 112 0 113 1 132] 
#[1 20 117 0 13 7 166 0 19 20 121 0 35 20 125 0 104 7 166 0 108 20 129 0 203 20 133 0 204 20 137 0 205] 
#[0 7 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 20 141 0 19 7 174 0 108 20 145 0 200] 
#[0 7 178 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 20 149 0 108] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 20 153 0 108 0 14 0 112 0 14 0 113 10 189 0 180 20 157 0 199 10 197 0 202] 
#[0 7 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 20 161 0 108] 
#[0 7 186 0 31] 
#[0 7 190 0 31] 
#[0 7 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 7 198 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 202 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 206 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[1 0 49 0 52 10 225 0 58 0 65 0 61 2 153 0 66 0 10 0 69 0 97 0 88 10 229 0 97 20 165 0 171 0 185 0 172 0 189 0 173 0 193 0 174 20 169 0 208] 
#[0 7 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 7 214 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 218 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 222 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 7 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 20 173 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 15 53 0 222 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 20 177 0 211 20 177 0 230] 
#[1 1 39 0 14 6 10 0 17 6 10 0 19] 
#[0 7 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 7 234 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 7 238 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 20 185 0 46 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 20 189 0 135 20 189 0 136 20 189 0 138 3 57 0 236 20 189 1 70 20 189 1 72 20 189 1 73 20 189 1 74 20 189 1 75 20 189 1 78 20 189 1 79 20 189 1 80 20 189 1 81 20 189 1 82 3 101 1 83 20 189 1 91 20 189 1 92 20 189 1 93 20 189 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 20 189 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 20 193 0 211 20 193 0 230] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 20 197 1 125 3 153 1 126 3 137 1 132] 
#[0 15 81 0 14] 
#[0 15 85 0 14] 
#[0 20 201 0 29] 
#[1 7 242 0 11 7 242 0 12 7 242 0 19 7 242 0 126 7 242 0 128 20 205 1 101 20 209 1 103] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 7 246 0 19 6 237 0 30 20 213 0 35 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 133 0 126 7 246 0 128 7 57 0 236 20 217 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 20 221 0 135 20 221 0 136 20 221 0 138 3 57 0 236 20 221 1 70 20 221 1 72 20 221 1 73 20 221 1 74 20 221 1 75 20 221 1 78 20 221 1 79 20 221 1 80 20 221 1 81 20 221 1 82 3 101 1 83 20 221 1 91 20 221 1 92 20 221 1 93 20 221 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 20 221 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 46 0 3 6 46 0 53 6 46 0 58 6 46 0 77 6 46 0 112 6 46 0 113 6 46 0 126 20 225 0 128] 
#[0 7 250 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 7 254 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 8 2 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 20 229 0 135 20 229 0 136 20 229 0 138 3 57 0 236 20 229 1 70 20 229 1 72 20 229 1 73 20 229 1 74 20 229 1 75 20 229 1 78 20 229 1 79 20 229 1 80 20 229 1 81 20 229 1 82 3 101 1 83 20 229 1 91 20 229 1 92 20 229 1 93 20 229 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 20 229 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 20 233 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 20 237 0 135 20 237 0 136 20 237 0 138 3 57 0 236 20 237 1 70 20 237 1 72 20 237 1 73 20 237 1 74 20 237 1 75 20 237 1 78 20 237 1 79 20 237 1 80 20 237 1 81 20 237 1 82 3 101 1 83 20 237 1 91 20 237 1 92 20 237 1 93 20 237 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 20 237 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 20 241 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 20 245 0 212 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 20 249 0 133] 
#[1 6 197 0 101 2 42 0 104 20 253 0 211 20 253 0 230] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 21 1 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 15 221 0 180 21 5 1 85 15 229 1 86 15 233 1 89 15 237 1 90] 
#[0 8 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 8 10 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 21 9 0 142 21 13 0 171 0 185 0 172 0 189 0 173 0 193 0 174 21 17 0 186 21 21 0 207 3 249 0 239 1 1 1 105 1 5 1 108 21 25 1 131 1 5 1 132] 
#[0 8 14 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 18 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 8 22 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 21 29 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 33 0 237 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 8 26 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 49 0 52 0 57 0 58 0 65 0 61 2 153 0 66 0 10 0 69 0 113 0 94 10 229 0 97 21 37 0 171 0 185 0 172 0 189 0 173 0 193 0 174 21 41 0 186 21 45 0 207] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 21 49 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 53 0 212 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 8 30 0 2 8 30 0 6 8 30 0 7 8 30 0 9 8 30 0 10 8 30 0 14 8 30 0 15 8 30 0 16 8 30 0 17 8 30 0 18 8 30 0 19 8 30 0 20 8 30 0 21 21 57 0 22 8 30 0 23 8 30 0 24 8 30 0 26 8 30 0 27 8 30 0 28 8 30 0 29 8 30 0 30 8 30 0 31 8 30 0 32 8 30 0 33 8 30 0 34 8 30 0 35 8 30 0 36 8 30 0 37 8 30 0 38 8 30 0 39 8 30 0 40 8 30 0 41 8 30 0 42 8 30 0 46 8 30 0 47 8 30 0 48 8 30 0 51 8 30 0 64 8 30 0 70 8 30 0 101 8 30 0 104 8 30 0 105 8 30 0 106 8 30 0 107 8 30 0 108 8 30 0 109 8 30 0 110 8 30 0 111 8 30 0 127 8 30 0 128 8 30 0 129 21 61 1 84 8 30 1 138] 
#[1 5 149 0 1 0 37 0 3 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 21 65 0 49 21 73 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 21 73 0 77 2 49 0 87 2 49 0 90 3 33 0 97 21 73 0 112 21 73 0 113 3 133 0 126 1 169 0 127 3 45 0 129 21 69 0 135 21 69 0 136 21 69 0 138 3 57 0 236 5 165 0 239 21 69 1 70 21 69 1 72 21 69 1 73 21 69 1 74 21 69 1 75 21 69 1 78 21 69 1 79 21 69 1 80 21 69 1 81 21 69 1 82 3 101 1 83 21 69 1 91 21 69 1 92 21 69 1 93 21 69 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 21 69 1 122 5 157 1 125 3 153 1 126 21 73 1 132] 
#[0 21 77 0 14] 
#[0 8 34 0 14] 
#[1 8 38 0 14 8 38 0 19 21 81 1 88] 
#[0 8 42 0 14] 
#[0 8 46 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 21 85 0 135 21 85 0 136 21 85 0 138 3 57 0 236 21 85 1 70 21 85 1 72 21 85 1 73 21 85 1 74 21 85 1 75 21 85 1 78 21 85 1 79 21 85 1 80 21 85 1 81 21 85 1 82 3 101 1 83 21 85 1 91 21 85 1 92 21 85 1 93 21 85 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 21 85 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 8 50 0 14 21 89 0 19 21 93 1 129] 
#[1 8 54 0 2 8 54 0 6 8 54 0 7 8 54 0 9 8 54 0 10 8 54 0 14 8 54 0 15 8 54 0 16 8 54 0 17 8 54 0 18 8 54 0 19 8 54 0 20 8 54 0 21 21 97 0 22 8 54 0 23 8 54 0 24 8 54 0 26 8 54 0 27 8 54 0 28 8 54 0 29 8 54 0 30 8 54 0 31 8 54 0 32 8 54 0 33 8 54 0 34 8 54 0 35 8 54 0 36 8 54 0 37 8 54 0 38 8 54 0 39 8 54 0 40 8 54 0 41 8 54 0 42 8 54 0 46 8 54 0 47 8 54 0 48 8 54 0 51 8 54 0 64 8 54 0 70 8 54 0 101 8 54 0 104 8 54 0 105 8 54 0 106 8 54 0 107 8 54 0 108 8 54 0 109 8 54 0 110 8 54 0 111 8 54 0 127 8 54 0 128 8 54 0 129 8 54 1 138] 
#[0 8 58 0 19 0 128] 
#[1 21 101 0 19 21 105 0 128 21 109 1 115] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 21 113 0 135 21 113 0 136 21 113 0 138 3 57 0 236 21 113 1 70 21 113 1 72 21 113 1 73 21 113 1 74 21 113 1 75 21 113 1 78 21 113 1 79 21 113 1 80 21 113 1 81 21 113 1 82 3 101 1 83 21 113 1 91 21 113 1 92 21 113 1 93 21 113 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 21 113 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 21 117 0 104] 
#[1 8 62 0 1 8 62 0 2 8 62 0 3 8 62 0 4 8 62 0 5 8 62 0 6 8 62 0 7 8 62 0 9 8 62 0 10 8 62 0 11 8 62 0 12 8 62 0 13 8 62 0 14 8 62 0 15 8 62 0 16 8 62 0 17 8 62 0 18 8 62 0 19 8 62 0 20 8 62 0 21 8 62 0 22 8 62 0 23 8 62 0 24 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 28 8 62 0 29 8 62 0 30 8 62 0 31 8 62 0 32 8 62 0 33 8 62 0 34 8 62 0 35 8 62 0 36 8 62 0 37 8 62 0 38 8 62 0 39 8 62 0 40 8 62 0 41 8 62 0 42 8 62 0 43 8 62 0 44 8 62 0 45 8 62 0 47 8 62 0 48 8 62 0 49 8 62 0 50 8 62 0 51 8 62 0 52 8 62 0 53 8 62 0 54 8 62 0 55 8 62 0 56 8 62 0 57 8 62 0 58 8 62 0 59 8 62 0 60 8 62 0 62 8 62 0 63 8 62 0 64 8 62 0 65 8 62 0 66 8 62 0 67 8 62 0 68 8 62 0 69 8 62 0 70 8 62 0 71 8 62 0 72 8 62 0 73 8 62 0 74 8 62 0 75 8 62 0 76 8 62 0 77 8 62 0 78 8 62 0 79 8 62 0 80 8 62 0 81 8 62 0 82 8 62 0 83 8 62 0 84 8 62 0 85 8 62 0 86 8 62 0 87 8 62 0 88 8 62 0 89 8 62 0 90 8 62 0 91 8 62 0 92 8 62 0 93 8 62 0 94 8 62 0 95 8 62 0 96 8 62 0 97 8 62 0 98 8 62 0 99 8 62 0 100 8 62 0 101 8 62 0 102 8 62 0 103 8 62 0 104 8 62 0 105 8 62 0 106 8 62 0 107 8 62 0 112 8 62 0 113 8 62 0 117 8 62 0 118 8 62 0 120 8 62 0 121 8 62 0 122 8 62 0 123 8 62 0 125 8 62 0 126 8 62 0 127 8 62 0 128 8 62 0 129 21 121 0 150 8 62 1 137] 
#[1 8 62 0 1 8 62 0 2 8 62 0 3 8 62 0 4 8 62 0 5 8 62 0 6 8 62 0 7 8 62 0 9 8 62 0 10 8 62 0 11 8 62 0 12 8 62 0 13 8 62 0 15 8 62 0 16 8 62 0 17 8 62 0 18 8 62 0 19 8 62 0 20 8 62 0 21 8 62 0 22 8 62 0 23 8 62 0 24 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 28 8 62 0 29 8 62 0 30 8 62 0 31 8 62 0 32 8 62 0 33 8 62 0 34 8 62 0 35 8 62 0 36 8 62 0 37 8 62 0 38 8 62 0 39 8 62 0 40 8 62 0 41 8 62 0 42 8 62 0 43 8 62 0 44 8 62 0 45 8 62 0 46 8 62 0 47 8 62 0 48 8 62 0 49 8 62 0 50 8 62 0 51 8 62 0 52 8 62 0 53 8 62 0 54 8 62 0 55 8 62 0 56 8 62 0 57 8 62 0 58 8 62 0 59 8 62 0 60 8 62 0 62 8 62 0 63 8 62 0 64 8 62 0 65 8 62 0 66 8 62 0 67 8 62 0 68 8 62 0 69 8 62 0 70 8 62 0 71 8 62 0 72 8 62 0 73 8 62 0 74 8 62 0 75 8 62 0 76 8 62 0 77 8 62 0 78 8 62 0 79 8 62 0 80 8 62 0 81 8 62 0 82 8 62 0 83 8 62 0 84 8 62 0 85 8 62 0 86 8 62 0 87 8 62 0 88 8 62 0 89 8 62 0 90 8 62 0 91 8 62 0 92 8 62 0 93 8 62 0 94 8 62 0 95 8 62 0 96 8 62 0 97 8 62 0 98 8 62 0 99 8 62 0 100 8 62 0 101 8 62 0 102 8 62 0 103 8 62 0 104 8 62 0 105 8 62 0 106 8 62 0 107 8 62 0 112 8 62 0 113 8 62 0 117 8 62 0 118 8 62 0 120 8 62 0 121 8 62 0 122 8 62 0 123 8 62 0 125 8 62 0 126 8 62 0 127 8 62 0 128 8 62 0 129 21 125 0 150 8 62 1 137] 
#[1 8 62 0 1 8 62 0 2 8 62 0 3 8 62 0 4 8 62 0 5 8 62 0 6 8 62 0 7 8 62 0 9 8 62 0 10 8 62 0 11 8 62 0 12 8 62 0 13 8 62 0 15 8 62 0 16 8 62 0 17 8 62 0 18 8 62 0 19 8 62 0 20 8 62 0 21 8 62 0 22 8 62 0 23 8 62 0 24 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 28 8 62 0 29 8 62 0 30 8 62 0 31 8 62 0 32 8 62 0 33 8 62 0 34 8 62 0 35 8 62 0 36 8 62 0 37 8 62 0 38 8 62 0 39 8 62 0 40 8 62 0 41 8 62 0 42 8 62 0 43 8 62 0 44 8 62 0 45 8 62 0 47 8 62 0 48 8 62 0 49 8 62 0 50 8 62 0 51 8 62 0 52 8 62 0 53 8 62 0 54 8 62 0 55 8 62 0 56 8 62 0 57 8 62 0 58 8 62 0 59 8 62 0 60 8 62 0 62 8 62 0 63 8 62 0 64 8 62 0 65 8 62 0 66 8 62 0 67 8 62 0 68 8 62 0 69 8 62 0 70 8 62 0 71 8 62 0 72 8 62 0 73 8 62 0 74 8 62 0 75 8 62 0 76 8 62 0 77 8 62 0 78 8 62 0 79 8 62 0 80 8 62 0 81 8 62 0 82 8 62 0 83 8 62 0 84 8 62 0 85 8 62 0 86 8 62 0 87 8 62 0 88 8 62 0 89 8 62 0 90 8 62 0 91 8 62 0 92 8 62 0 93 8 62 0 94 8 62 0 95 8 62 0 96 8 62 0 97 8 62 0 98 8 62 0 99 8 62 0 100 8 62 0 101 8 62 0 102 8 62 0 103 8 62 0 104 8 62 0 105 8 62 0 106 8 62 0 107 8 62 0 108 8 62 0 112 8 62 0 113 8 62 0 117 8 62 0 118 8 62 0 120 8 62 0 121 8 62 0 122 8 62 0 123 8 62 0 125 8 62 0 126 8 62 0 127 8 62 0 128 8 62 0 129 21 129 0 150 8 62 1 137] 
#[0 21 133 0 14] 
#[1 8 66 0 14 8 66 0 31 8 66 0 46 8 66 0 108 21 137 0 147] 
#[0 21 141 0 37] 
#[0 21 145 0 46] 
#[0 21 149 0 108] 
#[0 8 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 21 153 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 6 125 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[0 8 74 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 42 0 44 0 45 0 49 0 52 0 53 0 58 0 60 0 61 0 63 0 65 0 66 0 69 0 70 0 72 0 77 0 79 0 87 0 88 0 89 0 90 0 91 0 94 0 96 0 97 0 99 0 112 0 113 0 126 0 127 0 129] 
#[1 21 157 0 31 21 161 0 35] 
#[0 8 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 21 165 0 135 21 165 0 136 21 165 0 138 2 105 0 239 21 165 0 245 21 165 0 246 21 165 0 247 21 165 0 248 21 165 0 249 21 165 0 250 21 165 0 251 21 165 0 252 21 165 0 255 21 165 1 0 21 165 1 8 21 165 1 9 21 165 1 15 21 165 1 19 21 165 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 21 165 1 30 21 165 1 31 21 165 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 21 165 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 8 82 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 21 169 0 31] 
#[0 8 86 0 14 0 19] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 21 173 0 135 21 173 0 136 21 173 0 138 3 57 0 236 21 173 1 70 21 173 1 72 21 173 1 73 21 173 1 74 21 173 1 75 21 173 1 78 21 173 1 79 21 173 1 80 21 173 1 81 21 173 1 82 3 101 1 83 21 173 1 91 21 173 1 92 21 173 1 93 21 173 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 21 173 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 21 177 0 31 6 197 0 101 21 181 0 230] 
#[1 8 90 0 14 21 185 0 19 21 189 0 195] 
#[0 21 193 0 53 0 77 0 112 0 113 1 132] 
#[0 21 197 0 29] 
#[0 8 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 21 201 0 19 8 98 0 108 21 205 0 191] 
#[1 21 209 0 31 6 197 0 101 21 213 0 230] 
#[0 21 217 0 14] 
#[0 8 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 21 221 0 108] 
#[0 8 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 21 225 0 108 0 14 0 112 0 14 0 113 12 93 0 180 21 229 0 190 12 101 0 193] 
#[0 8 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 21 233 0 108] 
#[0 21 237 0 104] 
#[0 8 114 0 31 0 101] 
#[0 21 241 0 31] 
#[1 2 42 0 31 6 197 0 101 21 245 0 211 21 245 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 21 253 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 22 1 0 211 22 1 0 230] 
#[1 2 42 0 31 6 197 0 101 22 5 0 211 22 5 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 22 9 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 22 13 0 133] 
#[0 8 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 22 17 0 135 22 17 0 136 22 17 0 138 3 57 0 236 22 17 1 70 22 17 1 72 22 17 1 73 22 17 1 74 22 17 1 75 22 17 1 78 22 17 1 79 22 17 1 80 22 17 1 81 22 17 1 82 3 101 1 83 22 17 1 91 22 17 1 92 22 17 1 93 22 17 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 22 17 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 22 21 0 31 22 25 0 35] 
#[0 8 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 22 29 0 31 22 33 0 35 6 197 0 101 22 37 0 230] 
#[0 22 41 0 31] 
#[0 8 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 22 45 0 135 22 45 0 136 22 45 0 138 3 57 0 236 22 45 1 70 22 45 1 72 22 45 1 73 22 45 1 74 22 45 1 75 22 45 1 78 22 45 1 79 22 45 1 80 22 45 1 81 22 45 1 82 3 101 1 83 22 45 1 91 22 45 1 92 22 45 1 93 22 45 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 22 45 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 22 49 0 31] 
#[0 8 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 22 53 0 108] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 0 14 0 112 0 14 0 113 12 93 0 180 22 57 0 190 12 101 0 193] 
#[0 22 61 0 108] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 22 65 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 22 69 0 216 7 57 0 236 22 73 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 22 77 0 104] 
#[1 22 81 0 29 22 85 0 35 6 197 0 101 2 42 0 104 22 89 0 211 22 89 0 230] 
#[0 8 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 22 93 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 15 53 0 222 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 22 97 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 22 101 0 221 11 1 0 222 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 22 105 0 135 22 105 0 136 22 105 0 138 3 57 0 236 22 105 1 70 22 105 1 72 22 105 1 73 22 105 1 74 22 105 1 75 22 105 1 78 22 105 1 79 22 105 1 80 22 105 1 81 22 105 1 82 3 101 1 83 22 105 1 91 22 105 1 92 22 105 1 93 22 105 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 22 105 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 22 109 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 22 113 0 135 22 113 0 136 22 113 0 138 3 57 0 236 22 113 1 70 22 113 1 72 22 113 1 73 22 113 1 74 22 113 1 75 22 113 1 78 22 113 1 79 22 113 1 80 22 113 1 81 22 113 1 82 3 101 1 83 22 113 1 91 22 113 1 92 22 113 1 93 22 113 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 22 113 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 22 117 0 70] 
#[1 3 137 0 5 6 237 0 30 3 137 0 44 3 137 0 53 3 137 0 60 3 137 0 77 3 137 0 87 3 137 0 90 3 137 0 112 3 137 0 113 3 137 1 108 3 137 1 113 22 121 1 125 3 153 1 126 3 137 1 132] 
#[0 22 125 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 22 129 0 135 22 129 0 136 22 129 0 138 3 57 0 236 22 129 1 70 22 129 1 72 22 129 1 73 22 129 1 74 22 129 1 75 22 129 1 78 22 129 1 79 22 129 1 80 22 129 1 81 22 129 1 82 3 101 1 83 22 129 1 91 22 129 1 92 22 129 1 93 22 129 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 22 129 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 22 133 0 211 22 133 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 22 137 0 108 1 5 0 112 1 5 0 113 22 141 0 134 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 2 137 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 22 145 0 211 22 145 0 230] 
#[1 2 42 0 31 6 197 0 101 22 149 0 211 22 149 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 22 153 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 22 157 0 133] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 22 161 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 22 165 0 216 7 57 0 236 22 169 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 22 173 0 104] 
#[1 17 73 0 19 6 198 0 108 17 77 0 168 22 177 0 170] 
#[1 1 5 0 5 3 217 0 15 3 221 0 30 1 5 0 53 1 5 0 60 1 5 0 77 1 5 0 87 1 5 0 90 3 225 0 104 8 142 0 108 1 5 0 112 1 5 0 113 22 181 0 167 3 233 1 105 1 5 1 108 1 5 1 132] 
#[0 8 146 0 19 0 108] 
#[0 22 185 0 108] 
#[0 8 150 0 19 0 31 0 108] 
#[1 4 86 0 19 4 86 0 108 22 189 0 169] 
#[1 22 193 0 22 22 197 0 31 6 197 0 101 1 125 0 104 22 201 0 185 22 205 0 230 22 209 0 252] 
#[0 22 213 0 14] 
#[1 8 154 0 14 22 217 0 19] 
#[1 5 149 0 1 0 37 0 3 2 49 0 5 4 157 0 9 3 133 0 11 3 133 0 12 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 225 0 25 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 3 17 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 3 29 0 72 5 61 0 77 22 241 0 81 4 193 0 85 22 245 0 87 2 49 0 90 4 197 0 92 3 33 0 97 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 3 133 0 126 1 169 0 127 22 249 0 129 22 253 0 135 22 253 0 136 22 253 0 138 23 1 0 181 23 5 0 182 23 9 0 184 3 57 0 236 5 165 0 239 4 233 0 249 4 237 0 250 23 13 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 23 17 1 70 23 17 1 72 23 17 1 73 23 17 1 74 23 17 1 75 23 17 1 78 23 17 1 79 23 17 1 80 23 17 1 81 23 17 1 82 3 101 1 83 23 17 1 91 23 17 1 92 23 17 1 93 23 17 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 23 17 1 122 5 157 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[1 8 158 0 14 8 158 0 19 23 29 0 178] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 11 0 14 0 12 0 14 0 13 23 33 0 14 0 14 0 15 0 14 0 20 0 14 0 24 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 67 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 97 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 126 0 14 0 127 0 14 0 129 23 37 0 176 17 101 0 179 17 105 0 180 17 109 0 183 0 14 1 137] 
#[0 8 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 206 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 8 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 8 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 9 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 10 94 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 10 98 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 101 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 10 102 0 46 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 10 106 0 46 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 23 41 0 135 23 41 0 136 23 41 0 138 2 105 0 239 23 41 0 245 23 41 0 246 23 41 0 247 23 41 0 248 23 41 0 249 23 41 0 250 23 41 0 251 23 41 0 252 23 41 0 255 23 41 1 0 23 41 1 8 23 41 1 9 23 41 1 15 23 41 1 19 23 41 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 23 41 1 30 23 41 1 31 23 41 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 23 41 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 10 110 0 19 0 46] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 23 45 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 10 114 0 14 0 19 0 46] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 10 118 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 10 122 0 14 0 19 0 46] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 10 126 0 46 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 10 130 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 23 49 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 10 134 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 10 138 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 10 142 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 4 166 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 4 174 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 10 146 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 10 150 0 14 23 53 0 19 19 81 1 62] 
#[0 10 154 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 10 158 0 108] 
#[0 23 57 0 53 0 77 0 112 0 113 1 132] 
#[1 23 65 0 53 23 65 0 77 23 61 0 81 23 65 0 112 23 65 0 113 23 65 1 132] 
#[0 23 69 0 29] 
#[1 10 162 0 19 23 73 0 29 10 162 0 108] 
#[0 10 166 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 0 14 0 3 0 14 0 24 10 170 0 108 23 77 0 180 23 81 1 59] 
#[1 1 43 0 19 10 174 0 108 23 89 1 56] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 19 177 0 64 1 125 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 23 93 0 252] 
#[0 10 178 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 10 182 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 10 186 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 1 125 0 104 23 97 0 252] 
#[0 10 190 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 23 101 0 108] 
#[1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 13 0 14 0 20 0 14 0 24 0 14 0 30 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 67 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 127 0 14 0 129 23 105 0 180 23 109 1 34 23 113 1 37 0 14 1 137] 
#[1 1 125 0 104 23 117 0 252] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 23 121 0 135 23 121 0 136 23 121 0 138 3 57 0 236 23 121 1 71 23 121 1 72 23 121 1 73 23 121 1 74 23 121 1 75 23 121 1 78 23 121 1 79 23 121 1 80 23 121 1 81 23 121 1 82 3 101 1 83 23 121 1 92 23 121 1 94 23 121 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 23 121 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 10 194 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 10 194 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 10 194 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 10 194 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 10 194 0 46 6 25 0 47 6 29 0 48 6 33 0 51 10 194 0 64 10 194 0 104 6 37 0 106 6 41 0 107 10 194 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 10 194 1 138] 
#[0 10 198 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 19 177 0 64 1 125 0 104 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129 23 125 0 252] 
#[0 10 202 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 10 206 0 19 0 105] 
#[1 1 125 0 104 23 129 0 252] 
#[0 10 210 0 19 0 105] 
#[0 10 214 0 30] 
#[1 23 133 0 31 23 137 0 35] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 23 141 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 10 218 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 23 145 0 14] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 10 222 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 23 149 0 135 23 149 0 136 23 149 0 138 2 105 0 239 23 149 0 245 23 149 0 246 23 149 0 247 23 149 0 248 23 149 0 249 23 149 0 250 23 149 0 251 23 149 0 252 23 149 0 255 23 149 1 0 23 149 1 8 23 149 1 9 23 149 1 15 23 149 1 19 23 149 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 23 149 1 30 23 149 1 31 23 149 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 23 149 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 10 226 0 14 0 19] 
#[0 10 230 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 23 153 0 14 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 23 149 0 135 23 149 0 136 23 149 0 138 2 105 0 239 23 149 0 245 23 149 0 246 23 149 0 247 23 149 0 248 23 149 0 249 23 149 0 250 23 149 0 251 23 149 0 252 23 149 0 255 23 149 1 0 23 149 1 8 23 149 1 9 23 149 1 15 23 149 1 19 23 149 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 23 149 1 30 23 149 1 31 23 149 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 23 149 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 10 234 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 23 157 0 29] 
#[1 10 238 0 19 23 161 0 29 10 238 0 108] 
#[0 10 242 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 23 165 0 19 10 246 0 108 23 169 1 11] 
#[0 10 250 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 10 254 0 1 0 3 0 5 0 8 0 9 0 13 0 14 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 46 0 49 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 129 1 137 1 138] 
#[0 11 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 11 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 11 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 23 173 0 104] 
#[0 23 177 0 31] 
#[1 2 42 0 31 6 197 0 101 23 181 0 211 23 181 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 23 185 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 23 189 0 211 23 189 0 230] 
#[1 2 42 0 31 6 197 0 101 23 193 0 211 23 193 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 23 197 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 23 201 0 133] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 23 205 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 23 209 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 11 14 0 1 0 5 0 11 0 12 0 13 0 15 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 104 0 112 0 113 0 126 0 127 0 129] 
#[0 23 213 0 29] 
#[0 23 217 0 69] 
#[1 1 47 0 17 1 51 0 29] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 11 18 0 19 6 237 0 30 11 18 0 31 11 18 0 35 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 11 18 0 104 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 23 221 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 7 242 0 11 7 242 0 12 7 242 0 19 7 242 0 31 7 242 0 35 7 242 0 104 7 242 0 126 23 225 1 101 20 209 1 103] 
#[1 20 117 0 13 11 22 0 19 20 121 0 35 20 125 0 104 11 22 0 108 23 229 0 203 23 233 0 204 23 237 0 205] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 23 241 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 84 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 12 77 0 180 23 245 0 194 12 85 0 197] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 23 249 0 135 23 249 0 136 23 249 0 138 2 105 0 239 23 249 0 245 23 249 0 246 23 249 0 247 23 249 0 248 23 249 0 249 23 249 0 250 23 249 0 251 23 249 0 252 23 249 0 255 23 249 1 0 23 249 1 8 23 249 1 9 23 249 1 15 23 249 1 19 23 249 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 23 249 1 30 23 249 1 31 23 249 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 23 249 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 23 253 0 108 0 14 0 112 0 14 0 113 12 93 0 180 24 1 0 190 12 101 0 193] 
#[0 11 26 0 19 0 108] 
#[0 11 30 0 19 0 108] 
#[0 11 34 0 19 0 108] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 11 38 0 108 0 14 0 112 0 14 0 113 10 189 0 180 24 5 0 202] 
#[0 11 42 0 19 0 108] 
#[0 11 46 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 50 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 24 9 0 108] 
#[0 11 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 58 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 11 62 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 88 0 90 0 97 0 108 0 112 0 113] 
#[0 11 66 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 24 13 0 104] 
#[0 11 70 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 11 74 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 6 197 0 101 2 42 0 104 24 17 0 211 24 17 0 230] 
#[0 24 21 0 104] 
#[0 20 181 0 14] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 25 0 135 24 25 0 136 24 25 0 138 3 57 0 236 24 25 1 70 24 25 1 72 24 25 1 73 24 25 1 74 24 25 1 75 24 25 1 78 24 25 1 79 24 25 1 80 24 25 1 81 24 25 1 82 3 101 1 83 24 25 1 91 24 25 1 92 24 25 1 93 24 25 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 25 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 11 78 0 19 0 128] 
#[1 24 33 0 11 24 33 0 12 11 82 0 19 11 82 0 31 11 82 0 35 11 82 0 104 24 33 0 126 11 82 0 128 24 29 1 102 24 33 1 104] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 37 0 135 24 37 0 136 24 37 0 138 3 57 0 236 24 37 1 70 24 37 1 72 24 37 1 73 24 37 1 74 24 37 1 75 24 37 1 78 24 37 1 79 24 37 1 80 24 37 1 81 24 37 1 82 3 101 1 83 24 37 1 91 24 37 1 92 24 37 1 93 24 37 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 37 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 11 86 0 19 24 41 0 35 11 86 0 128] 
#[0 11 90 0 19 0 128] 
#[0 11 94 0 1 0 5 0 11 0 12 0 13 0 15 0 29 0 30 0 31 0 35 0 42 0 44 0 45 0 49 0 53 0 58 0 60 0 63 0 66 0 69 0 70 0 72 0 77 0 87 0 90 0 97 0 101 0 104 0 112 0 113 0 126 0 127 0 129] 
#[1 6 197 0 101 2 42 0 104 24 45 0 211 24 45 0 230] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 49 0 135 24 49 0 136 24 49 0 138 3 57 0 236 24 49 1 70 24 49 1 72 24 49 1 73 24 49 1 74 24 49 1 75 24 49 1 78 24 49 1 79 24 49 1 80 24 49 1 81 24 49 1 82 3 101 1 83 24 49 1 91 24 49 1 92 24 49 1 93 24 49 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 49 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 24 53 0 211 24 53 0 230] 
#[0 11 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 24 57 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 33 0 237 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 24 61 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 24 65 0 212 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 24 69 0 104] 
#[1 11 102 0 2 11 102 0 6 11 102 0 7 11 102 0 9 11 102 0 10 11 102 0 14 11 102 0 15 11 102 0 16 11 102 0 17 11 102 0 18 11 102 0 19 11 102 0 20 11 102 0 21 21 57 0 22 11 102 0 23 11 102 0 24 11 102 0 26 11 102 0 27 11 102 0 28 11 102 0 29 11 102 0 30 11 102 0 31 11 102 0 32 11 102 0 33 11 102 0 34 11 102 0 35 11 102 0 36 11 102 0 37 11 102 0 38 11 102 0 39 11 102 0 40 11 102 0 41 11 102 0 42 11 102 0 46 11 102 0 47 11 102 0 48 11 102 0 51 11 102 0 64 11 102 0 70 11 102 0 101 11 102 0 104 11 102 0 105 11 102 0 106 11 102 0 107 11 102 0 108 11 102 0 109 11 102 0 110 11 102 0 111 11 102 0 127 11 102 0 128 11 102 0 129 24 73 1 84 11 102 1 138] 
#[0 24 77 0 14] 
#[0 11 106 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 110 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 114 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 118 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[1 0 49 0 52 0 57 0 58 0 65 0 61 2 153 0 66 0 10 0 69 0 113 0 94 10 229 0 97 24 81 0 171 0 185 0 172 0 189 0 173 0 193 0 174 24 85 0 186 24 89 0 207] 
#[0 11 122 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 126 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 130 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 134 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 138 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 11 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 24 93 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 33 0 237 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 24 97 0 135 24 97 0 136 24 97 0 138 3 57 0 236 24 97 1 71 24 97 1 72 24 97 1 73 24 97 1 74 24 97 1 75 24 97 1 78 24 97 1 79 24 97 1 80 24 97 1 81 24 97 1 82 3 101 1 83 24 97 1 92 24 97 1 94 24 97 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 97 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 11 146 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 186 0 14 1 186 0 19 24 101 0 29] 
#[0 11 150 0 14 0 19] 
#[1 0 178 0 1 0 178 0 13 0 178 0 14 0 178 0 17 0 178 0 19 24 105 0 29 0 178 0 30 0 178 0 127] 
#[1 11 154 0 2 11 154 0 6 11 154 0 7 11 154 0 9 11 154 0 10 11 154 0 14 11 154 0 15 11 154 0 16 11 154 0 17 11 154 0 18 11 154 0 19 11 154 0 20 11 154 0 21 21 57 0 22 11 154 0 23 11 154 0 24 11 154 0 26 11 154 0 27 11 154 0 28 11 154 0 29 11 154 0 30 11 154 0 31 11 154 0 32 11 154 0 33 11 154 0 34 11 154 0 35 11 154 0 36 11 154 0 37 11 154 0 38 11 154 0 39 11 154 0 40 11 154 0 41 11 154 0 42 11 154 0 46 11 154 0 47 11 154 0 48 11 154 0 51 11 154 0 64 11 154 0 70 11 154 0 101 11 154 0 104 11 154 0 105 11 154 0 106 11 154 0 107 11 154 0 108 11 154 0 109 11 154 0 110 11 154 0 111 11 154 0 127 11 154 0 128 11 154 0 129 24 109 1 84 11 154 1 138] 
#[1 11 158 0 14 24 113 0 19 24 117 1 87] 
#[0 11 162 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 11 166 0 14 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 121 0 135 24 121 0 136 24 121 0 138 3 57 0 236 24 121 1 70 24 121 1 72 24 121 1 73 24 121 1 74 24 121 1 75 24 121 1 78 24 121 1 79 24 121 1 80 24 121 1 81 24 121 1 82 3 101 1 83 24 121 1 91 24 121 1 92 24 121 1 93 24 121 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 121 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 11 170 0 14 0 19] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 125 0 135 24 125 0 136 24 125 0 138 3 57 0 236 24 125 1 70 24 125 1 72 24 125 1 73 24 125 1 74 24 125 1 75 24 125 1 78 24 125 1 79 24 125 1 80 24 125 1 81 24 125 1 82 3 101 1 83 24 125 1 91 24 125 1 92 24 125 1 93 24 125 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 125 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 11 253 0 5 11 249 0 11 11 249 0 12 2 245 0 13 2 249 0 15 11 229 0 20 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 12 13 0 53 11 253 0 60 3 17 0 63 3 21 0 66 1 81 0 67 0 42 0 69 3 25 0 70 3 29 0 72 12 13 0 77 11 253 0 87 11 253 0 90 1 113 0 92 3 33 0 97 1 125 0 104 12 13 0 112 12 13 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 11 249 0 126 1 169 0 127 24 129 0 128 3 45 0 129 24 133 0 135 24 133 0 136 24 133 0 138 3 57 0 236 24 133 0 248 24 133 0 249 24 133 0 250 24 133 0 252 24 133 1 70 24 133 1 72 24 133 1 73 24 133 1 74 24 133 1 75 24 133 1 78 24 133 1 79 24 133 1 80 24 133 1 81 24 133 1 82 3 101 1 83 24 133 1 91 24 133 1 92 24 133 1 93 24 133 1 95 3 121 1 96 3 125 1 99 3 129 1 100 11 249 1 104 1 1 1 105 11 253 1 108 3 137 1 113 24 133 1 117 24 133 1 118 24 133 1 119 3 141 1 121 24 133 1 122 5 157 1 125 3 153 1 126 12 13 1 132 2 73 1 137] 
#[0 11 174 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 11 178 0 19 0 128] 
#[0 11 182 0 19 0 128] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 24 137 0 133] 
#[1 24 173 0 1 24 173 0 2 24 173 0 3 24 141 0 4 24 165 0 5 24 173 0 6 24 173 0 7 24 173 0 9 24 173 0 10 24 165 0 11 24 165 0 12 16 17 0 13 24 145 0 14 24 161 0 15 24 173 0 16 24 161 0 17 24 173 0 18 24 173 0 19 24 173 0 20 24 173 0 21 24 173 0 22 24 173 0 23 24 173 0 24 24 173 0 25 24 173 0 26 24 173 0 27 24 173 0 28 24 173 0 29 24 173 0 30 24 173 0 31 24 173 0 32 24 173 0 33 24 173 0 34 24 173 0 35 24 173 0 36 24 173 0 37 24 173 0 38 24 173 0 39 24 173 0 40 24 173 0 41 24 161 0 42 24 173 0 43 24 165 0 44 16 21 0 45 24 173 0 47 24 173 0 48 24 173 0 49 24 165 0 50 24 165 0 51 24 165 0 52 24 165 0 53 24 165 0 54 24 165 0 55 24 165 0 56 24 165 0 57 24 165 0 58 24 165 0 59 24 165 0 60 24 165 0 62 24 165 0 63 24 165 0 64 24 165 0 65 24 165 0 66 1 81 0 67 24 165 0 68 24 165 0 69 24 165 0 70 24 165 0 71 24 165 0 72 24 165 0 73 24 165 0 74 24 165 0 75 24 165 0 76 24 165 0 77 24 165 0 78 24 165 0 79 24 165 0 80 24 165 0 81 24 165 0 82 24 165 0 83 24 165 0 84 24 165 0 85 24 165 0 86 24 165 0 87 24 165 0 88 24 165 0 89 24 165 0 90 24 165 0 91 1 113 0 92 24 165 0 93 24 165 0 94 24 165 0 95 24 165 0 96 24 165 0 97 24 165 0 98 24 165 0 99 24 165 0 100 24 165 0 101 24 165 0 102 24 165 0 103 16 25 0 104 24 173 0 105 24 173 0 106 24 173 0 107 24 165 0 112 24 165 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 24 165 0 126 24 173 0 127 24 173 0 128 24 173 0 129 24 149 0 149 24 153 0 151 24 157 0 153 24 161 0 156 24 157 0 248 24 157 0 249 24 157 0 250 24 165 1 132 24 165 1 133 24 165 1 134 24 157 1 135 24 173 1 136 2 73 1 137] 
#[1 24 173 0 1 24 173 0 2 24 173 0 3 24 141 0 4 24 165 0 5 24 173 0 6 24 173 0 7 24 173 0 9 24 173 0 10 24 165 0 11 24 165 0 12 16 17 0 13 24 161 0 15 24 173 0 16 24 161 0 17 24 173 0 18 24 173 0 19 24 173 0 20 24 173 0 21 24 173 0 22 24 173 0 23 24 173 0 24 24 173 0 25 24 173 0 26 24 173 0 27 24 173 0 28 24 173 0 29 24 173 0 30 24 173 0 31 24 173 0 32 24 173 0 33 24 173 0 34 24 173 0 35 24 173 0 36 24 173 0 37 24 173 0 38 24 173 0 39 24 173 0 40 24 173 0 41 24 161 0 42 24 173 0 43 24 165 0 44 16 21 0 45 24 177 0 46 24 173 0 47 24 173 0 48 24 173 0 49 24 165 0 50 24 165 0 51 24 165 0 52 24 165 0 53 24 165 0 54 24 165 0 55 24 165 0 56 24 165 0 57 24 165 0 58 24 165 0 59 24 165 0 60 24 165 0 62 24 165 0 63 24 165 0 64 24 165 0 65 24 165 0 66 1 81 0 67 24 165 0 68 24 165 0 69 24 165 0 70 24 165 0 71 24 165 0 72 24 165 0 73 24 165 0 74 24 165 0 75 24 165 0 76 24 165 0 77 24 165 0 78 24 165 0 79 24 165 0 80 24 165 0 81 24 165 0 82 24 165 0 83 24 165 0 84 24 165 0 85 24 165 0 86 24 165 0 87 24 165 0 88 24 165 0 89 24 165 0 90 24 165 0 91 1 113 0 92 24 165 0 93 24 165 0 94 24 165 0 95 24 165 0 96 24 165 0 97 24 165 0 98 24 165 0 99 24 165 0 100 24 165 0 101 24 165 0 102 24 165 0 103 16 25 0 104 24 173 0 105 24 173 0 106 24 173 0 107 24 165 0 112 24 165 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 24 165 0 126 24 173 0 127 24 173 0 128 24 173 0 129 24 149 0 149 24 153 0 151 24 157 0 153 24 161 0 156 24 157 0 248 24 157 0 249 24 157 0 250 24 165 1 132 24 165 1 133 24 165 1 134 24 157 1 135 24 173 1 136 2 73 1 137] 
#[1 24 173 0 1 24 173 0 2 24 173 0 3 24 141 0 4 24 165 0 5 24 173 0 6 24 173 0 7 24 173 0 9 24 173 0 10 24 165 0 11 24 165 0 12 16 17 0 13 24 161 0 15 24 173 0 16 24 161 0 17 24 173 0 18 24 173 0 19 24 173 0 20 24 173 0 21 24 173 0 22 24 173 0 23 24 173 0 24 24 173 0 25 24 173 0 26 24 173 0 27 24 173 0 28 24 173 0 29 24 173 0 30 24 173 0 31 24 173 0 32 24 173 0 33 24 173 0 34 24 173 0 35 24 173 0 36 24 173 0 37 24 173 0 38 24 173 0 39 24 173 0 40 24 173 0 41 24 161 0 42 24 173 0 43 24 165 0 44 16 21 0 45 24 173 0 47 24 173 0 48 24 173 0 49 24 165 0 50 24 165 0 51 24 165 0 52 24 165 0 53 24 165 0 54 24 165 0 55 24 165 0 56 24 165 0 57 24 165 0 58 24 165 0 59 24 165 0 60 24 165 0 62 24 165 0 63 24 165 0 64 24 165 0 65 24 165 0 66 1 81 0 67 24 165 0 68 24 165 0 69 24 165 0 70 24 165 0 71 24 165 0 72 24 165 0 73 24 165 0 74 24 165 0 75 24 165 0 76 24 165 0 77 24 165 0 78 24 165 0 79 24 165 0 80 24 165 0 81 24 165 0 82 24 165 0 83 24 165 0 84 24 165 0 85 24 165 0 86 24 165 0 87 24 165 0 88 24 165 0 89 24 165 0 90 24 165 0 91 1 113 0 92 24 165 0 93 24 165 0 94 24 165 0 95 24 165 0 96 24 165 0 97 24 165 0 98 24 165 0 99 24 165 0 100 24 165 0 101 24 165 0 102 24 165 0 103 16 25 0 104 24 173 0 105 24 173 0 106 24 173 0 107 24 181 0 108 24 165 0 112 24 165 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 24 165 0 126 24 173 0 127 24 173 0 128 24 173 0 129 24 149 0 149 24 153 0 151 24 157 0 153 24 161 0 156 24 157 0 248 24 157 0 249 24 157 0 250 24 165 1 132 24 165 1 133 24 165 1 134 24 157 1 135 24 173 1 136 2 73 1 137] 
#[0 24 185 0 31] 
#[1 11 186 0 14 24 189 0 31 11 186 0 46 11 186 0 108 24 193 0 146] 
#[1 10 113 0 13 10 121 0 45 10 125 0 104 24 201 0 139 24 201 0 157] 
#[0 24 205 0 31] 
#[0 11 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 24 209 0 135 24 209 0 136 24 209 0 138 2 105 0 239 24 209 0 245 24 209 0 246 24 209 0 247 24 209 0 248 24 209 0 249 24 209 0 250 24 209 0 251 24 209 0 252 24 209 0 255 24 209 1 0 24 209 1 8 24 209 1 9 24 209 1 15 24 209 1 19 24 209 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 24 209 1 30 24 209 1 31 24 209 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 24 209 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 24 213 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 11 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 206 0 14 0 19] 
#[0 11 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 24 217 0 31] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 11 214 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 84 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 12 77 0 180 24 221 0 197] 
#[0 11 218 0 14 0 19] 
#[0 24 225 0 29] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 24 229 0 135 24 229 0 136 24 229 0 138 3 57 0 236 24 229 1 70 24 229 1 72 24 229 1 73 24 229 1 74 24 229 1 75 24 229 1 78 24 229 1 79 24 229 1 80 24 229 1 81 24 229 1 82 3 101 1 83 24 229 1 91 24 229 1 92 24 229 1 93 24 229 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 24 229 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 0 14 0 3 0 14 0 53 0 14 0 60 0 14 0 77 0 14 0 84 11 222 0 108 0 14 0 112 0 14 0 113 12 93 0 180 24 233 0 193] 
#[0 11 226 0 19 0 108] 
#[0 11 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 24 237 0 31] 
#[1 24 241 0 31 6 197 0 101 24 245 0 230] 
#[0 11 234 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 11 238 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 24 249 0 108] 
#[0 11 242 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 24 253 0 133] 
#[0 11 246 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 25 1 0 31] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 11 250 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 33 0 237 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 25 5 0 108] 
#[0 25 9 0 104] 
#[0 25 13 0 31] 
#[1 2 42 0 31 6 197 0 101 25 17 0 211 25 17 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 25 21 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 25 25 0 31] 
#[0 11 254 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 29 0 135 25 29 0 136 25 29 0 138 3 57 0 236 25 29 1 70 25 29 1 72 25 29 1 73 25 29 1 74 25 29 1 75 25 29 1 78 25 29 1 79 25 29 1 80 25 29 1 81 25 29 1 82 3 101 1 83 25 29 1 91 25 29 1 92 25 29 1 93 25 29 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 29 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 12 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 33 0 135 25 33 0 136 25 33 0 138 3 57 0 236 25 33 1 70 25 33 1 72 25 33 1 73 25 33 1 74 25 33 1 75 25 33 1 78 25 33 1 79 25 33 1 80 25 33 1 81 25 33 1 82 3 101 1 83 25 33 1 91 25 33 1 92 25 33 1 93 25 33 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 33 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 25 37 0 31 25 41 0 35] 
#[0 12 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 25 45 0 31] 
#[0 12 10 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 12 14 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 25 49 0 108] 
#[0 12 18 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 6 197 0 101 2 42 0 104 25 53 0 211 25 53 0 230] 
#[1 2 42 0 31 6 197 0 101 25 57 0 211 25 57 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 25 61 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 65 0 133] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 6 237 0 30 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 62 0 101 4 62 0 104 3 137 0 112 3 137 0 113 3 133 0 126 25 69 0 210 7 57 0 236 12 133 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 137 0 29 6 237 0 30 4 66 0 31 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 4 66 0 101 3 137 0 112 3 137 0 113 3 133 0 126 12 141 0 215 25 73 0 216 7 57 0 236 25 77 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 25 81 0 104] 
#[0 12 22 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 12 26 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 10 225 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 0 97 0 88 1 5 0 90 10 229 0 97 25 85 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 10 237 0 142 10 241 0 159 10 245 0 171 0 185 0 172 0 189 0 173 0 193 0 174 10 249 0 208 15 53 0 222 0 253 0 239 1 1 1 105 1 5 1 108 11 5 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 25 89 0 211 25 89 0 230] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 93 0 135 25 93 0 136 25 93 0 138 3 57 0 236 25 93 1 70 25 93 1 72 25 93 1 73 25 93 1 74 25 93 1 75 25 93 1 78 25 93 1 79 25 93 1 80 25 93 1 81 25 93 1 82 3 101 1 83 25 93 1 91 25 93 1 92 25 93 1 93 25 93 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 93 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 25 97 0 211 25 97 0 230] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 101 0 135 25 101 0 136 25 101 0 138 3 57 0 236 25 101 1 70 25 101 1 72 25 101 1 73 25 101 1 74 25 101 1 75 25 101 1 78 25 101 1 79 25 101 1 80 25 101 1 81 25 101 1 82 3 101 1 83 25 101 1 91 25 101 1 92 25 101 1 93 25 101 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 101 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 25 105 0 70] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 109 0 135 25 109 0 136 25 109 0 138 3 57 0 236 25 109 1 70 25 109 1 72 25 109 1 73 25 109 1 74 25 109 1 75 25 109 1 78 25 109 1 79 25 109 1 80 25 109 1 81 25 109 1 82 3 101 1 83 25 109 1 91 25 109 1 92 25 109 1 93 25 109 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 109 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 25 113 0 211 25 113 0 230] 
#[0 25 117 0 104] 
#[0 12 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 0 53 0 53 0 57 0 58 0 61 0 60 0 65 0 61 0 69 0 65 0 73 0 66 0 10 0 69 0 77 0 72 0 81 0 77 0 85 0 79 0 89 0 84 1 5 0 87 0 97 0 88 0 101 0 89 1 5 0 90 0 109 0 91 0 113 0 94 0 117 0 96 0 121 0 97 0 125 0 99 25 121 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 0 165 0 142 0 165 0 143 6 125 0 158 0 157 0 159 0 161 0 160 0 165 0 161 0 169 0 162 0 173 0 163 0 177 0 166 0 181 0 171 0 185 0 172 0 189 0 173 0 193 0 174 0 197 0 186 0 201 0 187 0 205 0 188 0 209 0 189 0 213 0 198 0 217 0 206 0 221 0 207 0 225 0 208 0 229 0 209 0 233 0 214 0 237 0 217 0 241 0 218 0 245 0 219 0 249 0 220 0 253 0 239 1 1 1 105 1 5 1 108 1 9 1 131 1 5 1 132] 
#[0 25 125 0 104] 
#[0 25 129 0 31] 
#[1 2 42 0 31 6 197 0 101 25 133 0 211 25 133 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 25 137 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 25 141 0 211 25 141 0 230] 
#[1 2 42 0 31 6 197 0 101 25 145 0 211 25 145 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 25 149 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 25 153 0 133] 
#[0 25 157 0 108] 
#[0 12 34 0 19 0 108] 
#[0 12 38 0 19 0 31 0 108] 
#[1 17 73 0 19 6 198 0 108 17 77 0 168 25 161 0 170] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 25 165 0 135 25 165 0 136 25 165 0 138 3 57 0 236 25 165 1 70 25 165 1 72 25 165 1 73 25 165 1 74 25 165 1 75 25 165 1 78 25 165 1 79 25 165 1 80 25 165 1 81 25 165 1 82 3 101 1 83 25 165 1 91 25 165 1 92 25 165 1 93 25 165 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 25 165 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 12 42 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 25 169 0 31 6 197 0 101 1 125 0 104 25 173 0 230 25 177 0 252] 
#[1 25 181 0 31 1 125 0 104 25 185 0 252] 
#[0 12 46 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 22 193 0 22 25 189 0 31 6 197 0 101 1 125 0 104 25 193 0 185 25 197 0 230 25 201 0 252] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 11 0 14 0 12 0 14 0 13 12 50 0 14 0 14 0 15 0 14 0 20 0 14 0 24 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 67 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 97 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 126 0 14 0 127 0 14 0 129 25 205 0 180 25 209 0 183 0 14 1 137] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 3 133 0 11 3 133 0 12 22 221 0 13 25 213 0 14 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 6 253 0 42 23 21 0 44 22 233 0 45 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 3 17 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 3 29 0 72 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 3 33 0 97 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 3 133 0 126 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 7 1 0 236 4 233 0 249 4 237 0 250 8 237 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 8 241 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 8 245 1 65 4 245 1 66 4 245 1 67 4 245 1 69 7 5 1 70 7 5 1 72 7 5 1 73 7 5 1 74 7 5 1 75 7 9 1 76 7 13 1 77 7 5 1 78 7 5 1 79 7 5 1 80 7 5 1 81 7 5 1 82 3 101 1 83 7 5 1 91 7 5 1 92 7 5 1 93 7 5 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 7 5 1 122 7 17 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[0 12 54 0 14 0 19] 
#[1 4 117 0 5 23 21 0 44 4 117 0 53 4 117 0 60 4 117 0 77 4 117 0 87 4 117 0 90 4 117 0 112 4 117 0 113 4 117 1 108 4 121 1 112 23 21 1 113 7 29 1 126 4 117 1 132] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 3 133 0 11 3 133 0 12 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 9 1 0 46 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 3 17 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 3 29 0 72 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 3 33 0 97 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 3 133 0 126 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 3 57 0 236 4 233 0 249 4 237 0 250 9 5 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 9 9 1 68 4 245 1 69 7 41 1 70 7 41 1 72 7 41 1 73 7 41 1 74 7 41 1 75 7 41 1 78 7 41 1 79 7 41 1 80 7 41 1 81 7 41 1 82 3 101 1 83 7 41 1 91 7 41 1 92 7 41 1 93 7 41 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 7 41 1 122 5 157 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[1 1 55 0 14 1 55 0 19 2 198 0 29 1 186 0 31 1 55 0 46 2 198 0 105] 
#[1 9 17 0 53 9 17 0 77 25 221 0 87 9 17 0 112 9 17 0 113 9 17 1 132] 
#[1 0 54 0 1 0 54 0 13 1 59 0 14 0 54 0 17 1 59 0 19 0 54 0 24 0 54 0 25 0 54 0 26 1 63 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 25 237 0 11 25 237 0 12 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 7 113 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 7 117 0 72 5 61 0 77 25 229 0 81 4 193 0 85 25 233 0 87 2 49 0 90 4 197 0 92 3 33 0 97 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 25 237 0 126 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 3 57 0 236 4 233 0 249 4 237 0 250 9 37 1 44 9 37 1 45 9 37 1 46 9 37 1 47 9 37 1 48 9 37 1 50 8 229 1 51 9 37 1 52 9 37 1 53 9 37 1 60 9 37 1 64 9 37 1 66 9 37 1 67 9 37 1 69 7 125 1 71 7 125 1 72 7 125 1 73 7 125 1 74 7 125 1 75 7 125 1 78 7 125 1 79 7 125 1 80 7 125 1 81 7 125 1 82 3 101 1 83 7 125 1 92 7 125 1 94 7 125 1 95 7 137 1 100 25 237 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 7 125 1 122 5 157 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[1 1 67 0 14 1 67 0 19 2 238 0 29 1 202 0 31 1 67 0 46 2 238 0 105] 
#[0 12 62 0 14 0 19] 
#[0 12 66 0 14 0 19] 
#[0 12 70 0 14 0 19] 
#[0 25 241 0 29] 
#[0 12 74 0 14 0 19] 
#[1 1 71 0 13 1 75 0 14 2 22 0 17 1 75 0 19 1 114 0 24 1 114 0 25 1 114 0 26 1 114 0 29 1 79 0 30 2 22 0 31 1 75 0 46 1 114 0 104 1 114 0 105 7 193 0 127 7 197 1 114 7 201 1 127] 
#[1 25 249 0 30 6 101 1 110 6 113 1 111 7 209 1 123 7 213 1 124] 
#[1 12 78 0 14 25 253 0 19 26 1 0 177] 
#[1 22 193 0 22 26 5 0 31 6 197 0 101 1 125 0 104 26 9 0 185 26 13 0 230 26 17 0 252] 
#[0 26 21 0 14] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 12 82 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 12 82 0 46 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 1 83 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[0 12 86 0 14 0 19 0 29 0 31 0 35 0 37 0 46 0 71 0 73 0 105 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 12 90 0 14 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 19 73 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 12 94 0 19 0 108] 
#[0 26 25 0 53 0 77 0 112 0 113 1 132] 
#[0 12 98 0 19 0 108] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 26 29 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 26 33 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 0 37 0 3 19 129 0 24 5 165 0 239] 
#[0 12 102 0 108] 
#[1 0 14 0 3 0 14 0 53 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 112 0 14 0 113 0 14 0 123 26 37 0 180 26 41 1 58] 
#[0 12 106 0 19 0 108] 
#[1 12 110 0 1 12 110 0 2 12 110 0 3 12 110 0 5 12 110 0 6 12 110 0 7 12 110 0 8 12 110 0 9 12 110 0 10 12 110 0 13 12 110 0 14 12 110 0 15 12 110 0 16 12 110 0 17 12 110 0 18 12 110 0 19 12 110 0 20 12 110 0 21 12 110 0 23 12 110 0 24 12 110 0 26 12 110 0 27 12 110 0 28 12 110 0 30 12 110 0 31 12 110 0 32 12 110 0 33 12 110 0 34 12 110 0 35 12 110 0 36 12 110 0 37 12 110 0 38 12 110 0 39 12 110 0 40 12 110 0 41 12 110 0 42 12 110 0 44 12 110 0 45 12 110 0 46 12 110 0 47 12 110 0 48 12 110 0 49 12 110 0 51 12 110 0 52 12 110 0 53 12 110 0 56 12 110 0 57 12 110 0 58 12 110 0 59 12 110 0 60 12 110 0 61 1 87 0 64 12 110 0 65 12 110 0 66 12 110 0 67 12 110 0 69 12 110 0 70 12 110 0 71 12 110 0 72 12 110 0 74 12 110 0 75 12 110 0 77 12 110 0 78 12 110 0 79 12 110 0 80 12 110 0 81 12 110 0 84 12 110 0 85 12 110 0 86 12 110 0 87 12 110 0 88 12 110 0 89 12 110 0 90 12 110 0 91 12 110 0 92 12 110 0 94 12 110 0 96 12 110 0 97 12 110 0 99 12 110 0 102 12 110 0 104 12 110 0 105 12 110 0 106 12 110 0 107 12 110 0 108 12 110 0 109 12 110 0 110 12 110 0 111 12 110 0 112 12 110 0 113 12 110 0 117 12 110 0 118 12 110 0 120 12 110 0 121 12 110 0 122 12 110 0 123 12 110 0 125 12 110 0 126 12 110 0 127 12 110 0 128 12 110 0 129 12 110 1 137 12 110 1 138] 
#[0 12 114 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 12 118 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 0 37 0 3 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 5 165 0 239 4 233 0 249 4 237 0 250 26 49 1 38 5 81 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[0 12 122 0 3 0 5 0 9 0 13 0 20 0 24 0 30 0 44 0 45 0 49 0 53 0 56 0 60 0 67 0 77 0 81 0 85 0 87 0 90 0 92 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 127 0 129 1 137] 
#[0 26 53 0 37] 
#[0 12 126 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 125 0 104 26 57 0 252] 
#[0 12 130 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 12 134 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 12 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 26 61 0 135 26 61 0 136 26 61 0 138 2 105 0 239 26 61 0 245 26 61 0 246 26 61 0 247 26 61 0 248 26 61 0 249 26 61 0 250 26 61 0 251 26 61 0 252 26 61 0 255 26 61 1 0 26 61 1 8 26 61 1 9 26 61 1 15 26 61 1 19 26 61 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 26 61 1 30 26 61 1 31 26 61 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 26 61 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 12 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 12 146 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 12 150 0 14 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 12 150 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 12 154 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 26 65 0 135 26 65 0 136 26 65 0 138 2 105 0 239 26 65 0 245 26 65 0 246 26 65 0 247 26 65 0 248 26 65 0 249 26 65 0 250 26 65 0 251 26 65 0 252 26 65 0 255 26 65 1 0 26 65 1 8 26 65 1 9 26 65 1 15 26 65 1 19 26 65 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 26 65 1 30 26 65 1 31 26 65 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 26 65 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 26 69 0 135 26 69 0 136 26 69 0 138 2 105 0 239 26 69 0 245 26 69 0 246 26 69 0 247 26 69 0 248 26 69 0 249 26 69 0 250 26 69 0 251 26 69 0 252 26 69 0 255 26 69 1 0 26 69 1 8 26 69 1 9 26 69 1 15 26 69 1 19 26 69 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 26 69 1 30 26 69 1 31 26 69 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 26 69 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[1 0 14 0 3 14 117 0 24 0 14 0 53 0 14 0 77 12 158 0 108 0 14 0 112 0 14 0 113 0 14 0 123 14 125 0 180 26 73 1 13 26 77 1 14] 
#[0 12 162 0 19 0 108] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 81 0 133] 
#[0 12 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 26 85 0 31] 
#[0 26 89 0 108] 
#[0 26 93 0 104] 
#[0 26 97 0 31] 
#[1 2 42 0 31 6 197 0 101 26 101 0 211 26 101 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 26 105 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 12 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 12 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 3 137 0 5 3 133 0 11 3 133 0 12 7 53 0 13 12 178 0 19 6 237 0 30 12 178 0 31 12 178 0 35 3 1 0 42 3 137 0 44 3 137 0 53 3 137 0 60 3 25 0 70 3 137 0 77 3 137 0 87 3 137 0 90 12 178 0 104 3 137 0 112 3 137 0 113 3 133 0 126 7 57 0 236 26 109 1 96 3 125 1 99 3 125 1 100 3 133 1 104 3 137 1 108 3 137 1 113 7 69 1 125 3 153 1 126 3 137 1 132] 
#[0 26 113 0 13] 
#[0 12 182 0 19 0 31 0 35 0 104] 
#[0 12 186 0 19 0 31 0 35 0 104] 
#[0 12 190 0 19 0 108] 
#[0 12 194 0 19 0 108] 
#[0 12 198 0 19 0 108] 
#[0 12 202 0 19 0 108] 
#[0 26 117 0 14] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 12 206 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 12 206 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 12 210 0 19 0 108] 
#[0 26 121 0 108] 
#[0 12 214 0 19 0 108] 
#[0 12 218 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 125 0 133] 
#[0 26 129 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 133 0 133] 
#[0 12 222 0 19 0 128] 
#[0 12 226 0 11 0 12 0 19 0 31 0 35 0 104 0 126 0 128] 
#[1 26 137 0 17 12 230 0 19 12 230 0 31 12 230 0 35 12 230 0 104 12 230 0 128] 
#[0 12 234 0 19 0 128] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 26 141 0 135 26 141 0 136 26 141 0 138 3 57 0 236 26 141 1 70 26 141 1 72 26 141 1 73 26 141 1 74 26 141 1 75 26 141 1 78 26 141 1 79 26 141 1 80 26 141 1 81 26 141 1 82 3 101 1 83 26 141 1 91 26 141 1 92 26 141 1 93 26 141 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 26 141 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 26 145 0 104] 
#[1 6 197 0 101 2 42 0 104 26 149 0 211 26 149 0 230] 
#[0 26 153 0 104] 
#[0 12 238 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 12 242 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 37 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 26 157 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 33 0 237 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 161 0 133] 
#[0 12 246 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 12 250 0 2 12 250 0 6 12 250 0 7 12 250 0 9 12 250 0 10 12 250 0 14 12 250 0 15 12 250 0 16 12 250 0 17 12 250 0 18 12 250 0 19 12 250 0 20 12 250 0 21 21 57 0 22 12 250 0 23 12 250 0 24 12 250 0 26 12 250 0 27 12 250 0 28 12 250 0 29 12 250 0 30 12 250 0 31 12 250 0 32 12 250 0 33 12 250 0 34 12 250 0 35 12 250 0 36 12 250 0 37 12 250 0 38 12 250 0 39 12 250 0 40 12 250 0 41 12 250 0 42 12 250 0 46 12 250 0 47 12 250 0 48 12 250 0 51 12 250 0 64 12 250 0 70 12 250 0 101 12 250 0 104 12 250 0 105 12 250 0 106 12 250 0 107 12 250 0 108 12 250 0 109 12 250 0 110 12 250 0 111 12 250 0 127 12 250 0 128 12 250 0 129 26 165 1 84 12 250 1 138] 
#[0 12 254 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 13 2 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 13 6 0 3 0 5 0 30 0 52 0 53 0 58 0 60 0 61 0 66 0 69 0 77 0 84 0 87 0 90 0 94 0 97 0 108 0 112 0 113] 
#[0 13 10 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 14 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 26 169 0 135 26 169 0 136 26 169 0 138 3 57 0 236 26 169 1 70 26 169 1 72 26 169 1 73 26 169 1 74 26 169 1 75 26 169 1 78 26 169 1 79 26 169 1 80 26 169 1 81 26 169 1 82 3 101 1 83 26 169 1 91 26 169 1 92 26 169 1 93 26 169 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 26 169 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 26 173 0 135 26 173 0 136 26 173 0 138 3 57 0 236 26 173 1 70 26 173 1 72 26 173 1 73 26 173 1 74 26 173 1 75 26 173 1 78 26 173 1 79 26 173 1 80 26 173 1 81 26 173 1 82 3 101 1 83 26 173 1 91 26 173 1 92 26 173 1 93 26 173 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 26 173 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 13 18 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 13 22 0 14 0 14 0 15 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 26 177 0 180 26 181 1 89] 
#[0 13 26 0 14 0 19] 
#[0 13 30 0 14 0 19] 
#[0 13 34 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 13 38 0 2 0 6 0 7 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 71 0 73 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 13 42 0 19 0 128] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 26 185 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 26 189 0 13 26 197 0 53 26 197 0 77 26 193 0 87 26 197 0 112 26 197 0 113 26 197 1 132] 
#[0 13 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 13 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 16 17 0 13 13 90 0 14 16 21 0 45 13 90 0 46 16 25 0 104 13 90 0 108 26 201 0 148 16 37 0 149] 
#[0 13 94 0 14 0 31 0 46 0 108] 
#[0 13 98 0 14 0 31 0 46 0 108] 
#[0 13 102 0 14 0 31 0 46 0 108] 
#[0 13 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 26 205 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 13 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 118 0 14 0 19] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 26 209 0 135 26 209 0 136 26 209 0 138 3 57 0 236 26 209 1 70 26 209 1 72 26 209 1 73 26 209 1 74 26 209 1 75 26 209 1 78 26 209 1 79 26 209 1 80 26 209 1 81 26 209 1 82 3 101 1 83 26 209 1 91 26 209 1 92 26 209 1 93 26 209 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 26 209 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 13 122 0 19 0 108] 
#[0 13 126 0 19 0 108] 
#[0 13 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 26 213 0 31] 
#[0 13 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 26 217 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 13 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 26 221 0 133] 
#[0 13 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 26 225 0 31] 
#[0 26 229 0 108] 
#[0 13 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 26 233 0 31] 
#[0 26 237 0 31] 
#[0 13 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 26 241 0 135 26 241 0 136 26 241 0 138 3 57 0 236 26 241 1 70 26 241 1 72 26 241 1 73 26 241 1 74 26 241 1 75 26 241 1 78 26 241 1 79 26 241 1 80 26 241 1 81 26 241 1 82 3 101 1 83 26 241 1 91 26 241 1 92 26 241 1 93 26 241 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 26 241 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 13 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 26 245 0 104] 
#[0 26 249 0 31] 
#[1 2 42 0 31 6 197 0 101 26 253 0 211 26 253 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 27 1 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 6 197 0 101 2 42 0 104 27 5 0 211 27 5 0 230] 
#[1 2 42 0 31 6 197 0 101 27 9 0 211 27 9 0 230] 
#[1 12 137 0 29 4 66 0 31 4 66 0 101 12 141 0 215 27 13 0 216] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 17 0 133] 
#[0 13 170 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 27 21 0 104] 
#[1 6 197 0 101 2 42 0 104 27 25 0 211 27 25 0 230] 
#[0 27 29 0 104] 
#[1 6 197 0 101 2 42 0 104 27 33 0 211 27 33 0 230] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 27 37 0 135 27 37 0 136 27 37 0 138 3 57 0 236 27 37 1 70 27 37 1 72 27 37 1 73 27 37 1 74 27 37 1 75 27 37 1 78 27 37 1 79 27 37 1 80 27 37 1 81 27 37 1 82 3 101 1 83 27 37 1 91 27 37 1 92 27 37 1 93 27 37 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 27 37 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 6 197 0 101 2 42 0 104 27 41 0 211 27 41 0 230] 
#[0 27 45 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 49 0 133] 
#[0 13 174 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 53 0 133] 
#[0 13 178 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 27 57 0 31] 
#[0 27 61 0 108] 
#[0 27 65 0 104] 
#[0 27 69 0 31] 
#[1 2 42 0 31 6 197 0 101 27 73 0 211 27 73 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 27 77 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 13 182 0 19 0 31 0 108] 
#[0 27 81 0 108] 
#[0 13 186 0 31 0 101 0 104] 
#[0 13 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 27 85 0 31 1 125 0 104 27 89 0 252] 
#[0 13 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 13 206 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 27 93 0 31 6 197 0 101 1 125 0 104 27 97 0 230 27 101 0 252] 
#[1 27 105 0 31 1 125 0 104 27 109 0 252] 
#[0 13 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 149 0 1 0 37 0 3 2 49 0 5 4 157 0 9 3 133 0 11 3 133 0 12 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 225 0 25 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 3 17 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 3 29 0 72 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 3 33 0 97 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 3 133 0 126 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 23 9 0 184 3 57 0 236 5 165 0 239 4 233 0 249 4 237 0 250 23 13 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 23 17 1 70 23 17 1 72 23 17 1 73 23 17 1 74 23 17 1 75 23 17 1 78 23 17 1 79 23 17 1 80 23 17 1 81 23 17 1 82 3 101 1 83 23 17 1 91 23 17 1 92 23 17 1 93 23 17 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 23 17 1 122 5 157 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[1 8 158 0 14 8 158 0 19 27 113 0 178] 
#[1 1 91 0 14 1 91 0 19 4 154 0 29 3 218 0 31 1 91 0 46 4 154 0 105] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 7 141 0 11 7 141 0 12 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 5 61 0 53 4 181 0 56 2 49 0 60 7 113 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 7 117 0 72 5 61 0 77 27 117 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 3 33 0 97 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 7 141 0 126 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 3 57 0 236 4 233 0 249 4 237 0 250 9 37 1 44 9 37 1 45 9 37 1 46 9 37 1 47 9 37 1 48 9 37 1 50 8 229 1 51 9 37 1 52 9 37 1 53 9 37 1 60 9 37 1 64 9 37 1 66 9 37 1 67 9 37 1 69 7 125 1 71 7 125 1 72 7 125 1 73 7 125 1 74 7 125 1 75 7 125 1 78 7 125 1 79 7 125 1 80 7 125 1 81 7 125 1 82 3 101 1 83 7 125 1 92 7 125 1 94 7 125 1 95 7 137 1 100 7 141 1 104 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 7 125 1 122 5 157 1 125 3 153 1 126 5 61 1 132 5 65 1 137] 
#[1 13 214 0 14 13 214 0 19 27 121 0 29] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 27 125 0 135 27 125 0 136 27 125 0 138 3 57 0 236 27 125 1 70 27 125 1 72 27 125 1 73 27 125 1 74 27 125 1 75 27 125 1 78 27 125 1 79 27 125 1 80 27 125 1 81 27 125 1 82 3 101 1 83 27 125 1 91 27 125 1 92 27 125 1 93 27 125 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 27 125 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 13 109 0 53 4 181 0 56 2 49 0 60 7 113 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 7 117 0 72 13 109 0 77 4 189 0 81 4 193 0 85 27 129 0 87 2 49 0 90 4 197 0 92 3 33 0 97 13 109 0 112 13 109 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 3 57 0 236 4 233 0 249 4 237 0 250 13 161 1 44 13 161 1 45 13 161 1 46 13 161 1 47 13 161 1 48 13 161 1 50 8 229 1 51 13 161 1 52 13 161 1 53 13 161 1 60 13 161 1 64 13 161 1 66 13 161 1 67 13 161 1 69 11 149 1 71 11 149 1 72 11 149 1 73 11 149 1 74 11 149 1 75 11 149 1 78 11 149 1 79 11 149 1 80 11 149 1 81 11 149 1 82 3 101 1 83 11 149 1 92 11 149 1 94 11 149 1 95 7 137 1 100 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 11 149 1 122 5 157 1 125 3 153 1 126 13 109 1 132 5 65 1 137] 
#[1 0 54 0 1 0 54 0 13 1 95 0 14 1 95 0 19 0 54 0 25 0 54 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 27 133 0 81 27 137 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 11 157 0 135 11 157 0 136 11 157 0 138 3 57 0 236 11 157 1 71 11 157 1 72 11 157 1 73 11 157 1 74 11 157 1 75 11 157 1 78 11 157 1 79 11 157 1 80 11 157 1 81 11 157 1 82 3 101 1 83 11 157 1 92 11 157 1 94 11 157 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 11 157 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 27 141 0 25 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 27 145 0 135 27 145 0 136 27 145 0 138 3 57 0 236 27 145 1 70 27 145 1 72 27 145 1 73 27 145 1 74 27 145 1 75 27 145 1 78 27 145 1 79 27 145 1 80 27 145 1 81 27 145 1 82 3 101 1 83 27 145 1 91 27 145 1 92 27 145 1 93 27 145 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 27 145 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 7 185 0 13 4 30 0 14 4 30 0 17 4 30 0 19 4 30 0 30 4 30 0 31 4 30 0 46 7 193 0 127 27 149 1 114 11 225 1 127] 
#[1 23 21 0 5 23 21 0 44 23 21 0 53 23 21 0 60 23 21 0 77 23 21 0 87 23 21 0 90 23 21 0 112 23 21 0 113 23 21 1 108 10 93 1 112 23 21 1 113 12 17 1 126 23 21 1 132] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 11 0 14 0 12 0 14 0 13 13 222 0 14 0 14 0 15 0 14 0 20 0 14 0 24 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 67 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 97 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 126 0 14 0 127 0 14 0 129 25 205 0 180 27 153 0 183 0 14 1 137] 
#[0 13 226 0 14 0 19] 
#[0 13 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 27 157 0 31 6 197 0 101 1 125 0 104 27 161 0 230 27 165 0 252] 
#[1 27 169 0 31 1 125 0 104 27 173 0 252] 
#[0 13 234 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 22 193 0 22 27 177 0 31 6 197 0 101 1 125 0 104 27 181 0 185 27 185 0 230 27 189 0 252] 
#[0 13 238 0 19 0 108] 
#[0 13 242 0 19 0 108] 
#[0 13 246 0 19 0 108] 
#[1 0 37 0 3 19 145 0 53 19 145 0 77 19 133 0 81 19 137 0 85 19 145 0 112 19 145 0 113 19 141 0 123 5 165 0 239 19 141 1 7 19 145 1 132] 
#[0 13 250 0 19 0 108] 
#[1 1 89 0 71 1 93 0 74 1 125 0 104 27 193 0 252 27 197 1 30 27 201 1 31] 
#[1 13 254 0 37 27 205 0 71 27 209 1 39] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 27 213 0 135 27 213 0 136 27 213 0 138 2 105 0 239 1 213 0 245 27 213 0 246 27 217 0 247 27 213 0 248 27 213 0 249 27 213 0 250 27 213 0 251 27 217 0 252 27 217 0 255 27 217 1 0 27 213 1 8 27 213 1 9 27 213 1 15 27 213 1 19 27 217 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 27 217 1 30 27 217 1 31 27 217 1 32 27 221 1 36 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 27 213 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 14 2 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 104 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 27 225 0 31 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 14 6 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 14 6 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 14 10 0 19 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 14 10 0 108 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 14 14 0 19 0 108] 
#[0 14 18 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 27 229 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 22 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 26 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 27 233 0 133] 
#[0 14 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 27 237 0 31] 
#[0 27 241 0 108] 
#[0 14 34 0 19 0 31 0 35 0 104] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 11 0 14 0 12 0 14 0 13 27 245 0 14 0 14 0 15 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 87 0 14 0 90 0 14 0 97 0 14 0 112 0 14 0 113 0 14 0 126 0 14 0 127 0 14 0 129 15 221 0 180 27 249 1 85 15 229 1 86 15 233 1 89 15 237 1 90] 
#[0 14 38 0 19 0 108] 
#[0 14 42 0 19 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 27 253 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 1 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 5 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 46 0 11 0 12 0 19 0 31 0 35 0 104 0 126 0 128] 
#[0 14 50 0 19 0 128] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 9 0 133] 
#[0 28 13 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 17 0 133] 
#[0 14 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 21 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 58 0 2 0 6 0 7 0 9 0 10 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 46 0 47 0 48 0 51 0 64 0 70 0 101 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 127 0 128 0 129 1 138] 
#[0 14 62 0 14 0 19] 
#[0 14 66 0 14 0 19] 
#[1 5 149 0 1 0 37 0 3 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 28 25 0 25 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 21 65 0 49 21 73 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 21 73 0 77 2 49 0 87 2 49 0 90 3 33 0 97 21 73 0 112 21 73 0 113 3 133 0 126 1 169 0 127 3 45 0 129 21 69 0 135 21 69 0 136 21 69 0 138 3 57 0 236 5 165 0 239 21 69 1 70 21 69 1 72 21 69 1 73 21 69 1 74 21 69 1 75 21 69 1 78 21 69 1 79 21 69 1 80 21 69 1 81 21 69 1 82 3 101 1 83 21 69 1 91 21 69 1 92 21 69 1 93 21 69 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 21 69 1 122 5 157 1 125 3 153 1 126 21 73 1 132] 
#[0 14 70 0 14 0 19] 
#[0 28 29 0 108] 
#[1 24 173 0 1 24 173 0 2 24 173 0 3 24 141 0 4 24 165 0 5 24 173 0 6 24 173 0 7 24 173 0 9 24 173 0 10 24 165 0 11 24 165 0 12 16 17 0 13 24 161 0 15 24 173 0 16 24 161 0 17 24 173 0 18 24 173 0 19 24 173 0 20 24 173 0 21 24 173 0 22 24 173 0 23 24 173 0 24 24 173 0 25 24 173 0 26 24 173 0 27 24 173 0 28 24 173 0 29 24 173 0 30 24 173 0 31 24 173 0 32 24 173 0 33 24 173 0 34 24 173 0 35 24 173 0 36 24 173 0 37 24 173 0 38 24 173 0 39 24 173 0 40 24 173 0 41 24 161 0 42 24 173 0 43 24 165 0 44 16 21 0 45 24 173 0 47 24 173 0 48 24 173 0 49 24 165 0 50 24 165 0 51 24 165 0 52 24 165 0 53 24 165 0 54 24 165 0 55 24 165 0 56 24 165 0 57 24 165 0 58 24 165 0 59 24 165 0 60 24 165 0 62 24 165 0 63 24 165 0 64 24 165 0 65 24 165 0 66 1 81 0 67 24 165 0 68 24 165 0 69 24 165 0 70 24 165 0 71 24 165 0 72 24 165 0 73 24 165 0 74 24 165 0 75 24 165 0 76 24 165 0 77 24 165 0 78 24 165 0 79 24 165 0 80 24 165 0 81 24 165 0 82 24 165 0 83 24 165 0 84 24 165 0 85 24 165 0 86 24 165 0 87 24 165 0 88 24 165 0 89 24 165 0 90 24 165 0 91 1 113 0 92 24 165 0 93 24 165 0 94 24 165 0 95 24 165 0 96 24 165 0 97 24 165 0 98 24 165 0 99 24 165 0 100 24 165 0 101 24 165 0 102 24 165 0 103 16 25 0 104 24 173 0 105 24 173 0 106 24 173 0 107 24 165 0 112 24 165 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 24 165 0 126 24 173 0 127 24 173 0 128 24 173 0 129 24 149 0 149 28 33 0 151 28 37 0 152 24 157 0 153 24 161 0 156 24 157 0 248 24 157 0 249 24 157 0 250 24 165 1 132 24 165 1 133 24 165 1 134 24 157 1 135 24 173 1 136 2 73 1 137] 
#[0 28 41 0 29] 
#[0 28 45 0 29] 
#[0 14 74 0 14 0 31 0 46 0 108] 
#[0 14 78 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 82 0 19 0 108] 
#[0 14 86 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 28 49 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 53 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 90 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 28 57 0 31] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 61 0 133] 
#[0 14 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 28 65 0 31] 
#[0 28 69 0 108] 
#[0 28 73 0 104] 
#[0 28 77 0 31] 
#[1 2 42 0 31 6 197 0 101 28 81 0 211 28 81 0 230] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 85 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 89 0 133] 
#[0 28 93 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 97 0 133] 
#[0 28 101 0 104] 
#[1 6 197 0 101 2 42 0 104 28 105 0 211 28 105 0 230] 
#[0 28 109 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 113 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 117 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 121 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 110 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 114 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 125 0 133] 
#[0 14 118 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 28 129 0 31] 
#[0 28 133 0 108] 
#[0 14 122 0 19 0 31 0 108] 
#[0 14 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 28 137 0 31 1 125 0 104 28 141 0 252] 
#[0 14 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 14 150 0 14 28 145 0 19 26 1 0 177] 
#[1 5 149 0 1 2 49 0 5 4 157 0 9 22 221 0 13 2 249 0 15 4 165 0 20 4 169 0 24 22 229 0 30 3 1 0 42 23 21 0 44 22 233 0 45 22 237 0 49 13 109 0 53 4 181 0 56 2 49 0 60 7 113 0 63 3 21 0 66 4 185 0 67 0 42 0 69 3 25 0 70 7 117 0 72 13 109 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 3 33 0 97 13 109 0 112 13 109 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 25 217 0 129 22 253 0 135 22 253 0 136 22 253 0 138 3 57 0 236 4 233 0 249 4 237 0 250 13 161 1 44 13 161 1 45 13 161 1 46 13 161 1 47 13 161 1 48 13 161 1 50 8 229 1 51 13 161 1 52 13 161 1 53 13 161 1 60 13 161 1 64 13 161 1 66 13 161 1 67 13 161 1 69 11 149 1 71 11 149 1 72 11 149 1 73 11 149 1 74 11 149 1 75 11 149 1 78 11 149 1 79 11 149 1 80 11 149 1 81 11 149 1 82 3 101 1 83 11 149 1 92 11 149 1 94 11 149 1 95 7 137 1 100 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 23 21 1 113 5 57 1 120 23 25 1 121 11 149 1 122 5 157 1 125 3 153 1 126 13 109 1 132 5 65 1 137] 
#[1 5 149 0 1 2 49 0 5 3 133 0 11 3 133 0 12 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 3 17 0 63 3 21 0 66 0 42 0 69 3 25 0 70 3 29 0 72 2 49 0 77 2 49 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 3 133 0 126 1 169 0 127 3 45 0 129 28 149 0 135 28 149 0 136 28 149 0 138 3 57 0 236 28 149 1 70 28 149 1 72 28 149 1 73 28 149 1 74 28 149 1 75 28 149 1 78 28 149 1 79 28 149 1 80 28 149 1 81 28 149 1 82 3 101 1 83 28 149 1 91 28 149 1 92 28 149 1 93 28 149 1 95 3 121 1 96 3 125 1 99 3 129 1 100 3 133 1 104 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 28 149 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[0 14 154 0 14 0 19] 
#[1 0 54 0 1 0 54 0 13 1 99 0 14 1 99 0 19 0 54 0 25 0 54 0 29 0 54 0 30 0 54 0 104 0 54 0 105 0 54 0 127] 
#[1 5 149 0 1 2 49 0 5 2 245 0 13 2 249 0 15 2 253 0 30 3 1 0 42 3 137 0 44 3 5 0 45 3 9 0 49 2 49 0 53 2 49 0 60 7 113 0 63 3 21 0 66 0 42 0 69 3 25 0 70 7 117 0 72 2 49 0 77 28 153 0 87 2 49 0 90 3 33 0 97 2 49 0 112 2 49 0 113 1 169 0 127 3 45 0 129 15 145 0 135 15 145 0 136 15 145 0 138 3 57 0 236 15 145 1 71 15 145 1 72 15 145 1 73 15 145 1 74 15 145 1 75 15 145 1 78 15 145 1 79 15 145 1 80 15 145 1 81 15 145 1 82 3 101 1 83 15 145 1 92 15 145 1 94 15 145 1 95 7 137 1 100 1 1 1 105 2 49 1 108 3 137 1 113 3 141 1 121 15 145 1 122 5 157 1 125 3 153 1 126 2 49 1 132] 
#[1 0 54 0 1 0 54 0 13 1 103 0 14 1 103 0 19 0 54 0 30 0 54 0 127] 
#[0 14 166 0 14 0 19] 
#[0 14 170 0 14 0 19] 
#[1 5 166 0 13 1 107 0 14 6 82 0 17 1 107 0 19 5 166 0 24 5 166 0 25 5 166 0 26 5 166 0 29 1 107 0 30 6 82 0 31 1 107 0 46 5 166 0 104 5 166 0 105] 
#[0 14 174 0 14 0 19] 
#[0 14 178 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 28 157 0 31 1 125 0 104 28 161 0 252] 
#[0 14 182 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 186 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 28 165 0 31 6 197 0 101 1 125 0 104 28 169 0 230 28 173 0 252] 
#[1 28 177 0 31 1 125 0 104 28 181 0 252] 
#[0 14 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 202 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 14 206 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[0 14 210 0 1 0 2 0 3 0 5 0 6 0 7 0 8 0 9 0 10 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 23 0 24 0 26 0 27 0 28 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 64 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 81 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 106 0 107 0 108 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 28 185 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 28 189 0 135 28 189 0 136 28 189 0 138 2 105 0 239 28 189 0 245 28 189 0 246 28 189 0 247 28 189 0 248 28 189 0 249 28 189 0 250 28 189 0 251 28 189 0 252 28 189 0 255 28 189 1 0 28 189 1 8 28 189 1 9 28 189 1 15 28 189 1 19 28 189 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 28 189 1 30 28 189 1 31 28 189 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 28 189 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 14 214 0 37] 
#[1 1 14 0 2 1 14 0 6 1 14 0 7 1 14 0 9 1 14 0 10 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 28 193 0 19 1 14 0 20 1 14 0 21 1 14 0 23 1 14 0 24 1 14 0 26 1 14 0 27 1 14 0 28 1 14 0 32 1 14 0 33 1 14 0 34 1 14 0 35 1 14 0 36 1 14 0 38 1 14 0 39 1 14 0 40 1 14 0 41 1 14 0 42 1 14 0 47 1 14 0 48 1 14 0 51 1 14 0 106 1 14 0 107 14 218 0 108 1 14 0 109 1 14 0 110 1 14 0 111 1 14 0 127 1 14 0 128 1 14 0 129] 
#[1 1 22 0 2 14 222 0 3 14 222 0 5 1 22 0 6 1 22 0 7 1 111 0 9 1 22 0 10 14 222 0 13 1 22 0 15 1 22 0 16 1 22 0 17 1 22 0 18 28 197 0 19 1 111 0 20 1 22 0 21 1 22 0 23 1 111 0 24 1 22 0 26 1 22 0 27 1 22 0 28 14 222 0 30 1 22 0 32 1 22 0 33 1 22 0 34 1 22 0 35 1 22 0 36 1 22 0 38 1 22 0 39 1 22 0 40 1 22 0 41 1 22 0 42 14 222 0 44 14 222 0 45 1 22 0 47 1 22 0 48 14 222 0 49 1 22 0 51 14 222 0 53 14 222 0 56 14 222 0 60 14 222 0 67 14 222 0 77 14 222 0 81 14 222 0 85 14 222 0 87 14 222 0 90 14 222 0 92 14 222 0 105 1 22 0 106 1 22 0 107 14 226 0 108 1 22 0 109 1 22 0 110 1 22 0 111 14 222 0 112 14 222 0 113 14 222 0 117 14 222 0 118 14 222 0 120 14 222 0 121 14 222 0 122 14 222 0 123 14 222 0 125 1 111 0 127 1 22 0 128 1 111 0 129 14 222 1 137] 
#[0 14 230 0 3 0 5 0 9 0 13 0 20 0 24 0 30 0 44 0 45 0 49 0 53 0 56 0 60 0 67 0 77 0 81 0 85 0 87 0 90 0 92 0 105 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 127 0 129 1 137] 
#[0 14 234 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 28 201 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 205 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 14 238 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 242 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 21 57 0 22 1 115 0 29 28 209 1 84] 
#[0 28 213 0 14] 
#[0 28 217 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 221 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 28 225 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 229 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 28 233 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 28 237 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 28 241 0 108] 
#[0 14 246 0 14] 
#[0 14 250 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 14 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[1 24 173 0 1 24 173 0 2 24 173 0 3 24 141 0 4 24 165 0 5 24 173 0 6 24 173 0 7 24 173 0 9 24 173 0 10 24 165 0 11 24 165 0 12 16 17 0 13 28 245 0 14 24 161 0 15 24 173 0 16 24 161 0 17 24 173 0 18 24 173 0 19 24 173 0 20 24 173 0 21 24 173 0 22 24 173 0 23 24 173 0 24 24 173 0 25 24 173 0 26 24 173 0 27 24 173 0 28 24 173 0 29 24 173 0 30 24 173 0 31 24 173 0 32 24 173 0 33 24 173 0 34 24 173 0 35 24 173 0 36 24 173 0 37 24 173 0 38 24 173 0 39 24 173 0 40 24 173 0 41 24 161 0 42 24 173 0 43 24 165 0 44 16 21 0 45 24 173 0 47 24 173 0 48 24 173 0 49 24 165 0 50 24 165 0 51 24 165 0 52 24 165 0 53 24 165 0 54 24 165 0 55 24 165 0 56 24 165 0 57 24 165 0 58 24 165 0 59 24 165 0 60 24 165 0 62 24 165 0 63 24 165 0 64 24 165 0 65 24 165 0 66 1 81 0 67 24 165 0 68 24 165 0 69 24 165 0 70 24 165 0 71 24 165 0 72 24 165 0 73 24 165 0 74 24 165 0 75 24 165 0 76 24 165 0 77 24 165 0 78 24 165 0 79 24 165 0 80 24 165 0 81 24 165 0 82 24 165 0 83 24 165 0 84 24 165 0 85 24 165 0 86 24 165 0 87 24 165 0 88 24 165 0 89 24 165 0 90 24 165 0 91 1 113 0 92 24 165 0 93 24 165 0 94 24 165 0 95 24 165 0 96 24 165 0 97 24 165 0 98 24 165 0 99 24 165 0 100 24 165 0 101 24 165 0 102 24 165 0 103 16 25 0 104 24 173 0 105 24 173 0 106 24 173 0 107 24 165 0 112 24 165 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 24 165 0 126 24 173 0 127 24 173 0 128 24 173 0 129 24 149 0 149 28 249 0 151 24 157 0 153 24 161 0 156 24 157 0 248 24 157 0 249 24 157 0 250 24 165 1 132 24 165 1 133 24 165 1 134 24 157 1 135 24 173 1 136 2 73 1 137] 
#[0 28 253 0 53 0 77 0 112 0 113 0 154 1 132] 
#[0 29 5 0 53 0 77 0 112 0 113 0 154 1 132] 
#[0 15 2 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 9 0 108] 
#[0 15 6 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 13 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 15 10 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 14 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 17 0 133] 
#[0 15 18 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 21 0 31] 
#[0 29 25 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 29 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 33 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 37 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 41 0 133] 
#[0 29 45 0 104] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 49 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 53 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 29 57 0 108] 
#[0 29 61 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 65 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 15 22 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 26 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 30 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 34 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 0 14 0 1 0 14 0 3 0 14 0 5 0 14 0 9 0 14 0 11 0 14 0 12 0 14 0 13 15 38 0 14 0 14 0 15 0 14 0 20 0 14 0 24 0 14 0 25 0 14 0 30 0 14 0 42 0 14 0 44 0 14 0 45 0 14 0 49 0 14 0 53 0 14 0 56 0 14 0 60 0 14 0 63 0 14 0 66 0 14 0 67 0 14 0 69 0 14 0 70 0 14 0 72 0 14 0 77 0 14 0 81 0 14 0 85 0 14 0 87 0 14 0 90 0 14 0 92 0 14 0 97 0 14 0 105 0 14 0 112 0 14 0 113 0 14 0 117 0 14 0 118 0 14 0 120 0 14 0 121 0 14 0 122 0 14 0 123 0 14 0 125 0 14 0 126 0 14 0 127 0 14 0 129 25 205 0 180 27 153 0 183 0 14 1 137] 
#[0 15 42 0 14 0 19] 
#[1 0 54 0 1 0 54 0 13 1 119 0 14 1 119 0 19 0 54 0 30 0 54 0 127] 
#[0 15 50 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 54 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 58 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 29 69 0 31 1 125 0 104 29 73 0 252] 
#[0 15 62 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 66 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 70 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 2 49 0 5 4 157 0 9 4 161 0 13 4 165 0 20 4 169 0 24 1 49 0 30 2 61 0 44 4 173 0 45 4 177 0 49 5 61 0 53 4 181 0 56 2 49 0 60 4 185 0 67 5 61 0 77 4 189 0 81 4 193 0 85 2 49 0 87 2 49 0 90 4 197 0 92 4 201 0 105 5 61 0 112 5 61 0 113 4 205 0 117 4 209 0 118 4 213 0 120 4 217 0 121 4 221 0 122 1 157 0 123 1 161 0 125 1 169 0 127 4 225 0 129 4 245 0 135 4 245 0 136 4 245 0 138 4 233 0 249 4 237 0 250 29 77 1 38 5 81 1 40 4 245 1 43 4 245 1 44 4 245 1 45 4 245 1 46 4 245 1 47 4 245 1 48 4 245 1 49 4 245 1 50 5 21 1 51 4 245 1 52 4 245 1 53 4 245 1 60 4 245 1 64 4 245 1 66 4 245 1 67 4 245 1 69 1 1 1 105 2 49 1 108 5 53 1 109 2 57 1 112 2 61 1 113 5 57 1 120 2 69 1 121 5 61 1 132 5 65 1 137] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 15 74 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[1 15 78 0 3 15 78 0 5 15 78 0 9 15 78 0 13 15 78 0 20 15 78 0 24 15 78 0 30 15 78 0 44 15 78 0 45 15 78 0 49 15 78 0 53 15 78 0 56 15 78 0 60 15 78 0 67 15 78 0 77 15 78 0 81 15 78 0 85 15 78 0 87 15 78 0 90 15 78 0 92 15 78 0 105 15 82 0 108 15 78 0 112 15 78 0 113 15 78 0 117 15 78 0 118 15 78 0 120 15 78 0 121 15 78 0 122 15 78 0 123 15 78 0 125 15 78 0 127 15 78 0 129 15 78 1 137] 
#[1 15 86 0 3 15 86 0 5 15 86 0 9 15 86 0 13 15 86 0 20 15 86 0 24 15 86 0 30 15 86 0 44 15 86 0 45 15 86 0 49 15 86 0 53 15 86 0 56 15 86 0 60 15 86 0 67 15 86 0 77 15 86 0 81 15 86 0 85 15 86 0 87 15 86 0 90 15 86 0 92 15 86 0 105 15 90 0 108 15 86 0 112 15 86 0 113 15 86 0 117 15 86 0 118 15 86 0 120 15 86 0 121 15 86 0 122 15 86 0 123 15 86 0 125 15 86 0 127 15 86 0 129 15 86 1 137] 
#[0 15 94 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 81 0 108] 
#[0 1 123 0 29] 
#[1 21 57 0 22 1 127 0 29 29 85 1 84] 
#[0 15 98 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 89 0 108] 
#[0 15 102 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 93 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 97 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 29 101 0 108] 
#[0 15 106 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 29 125 0 1 29 125 0 2 29 125 0 3 29 105 0 4 29 117 0 5 29 125 0 6 29 125 0 7 29 125 0 9 29 125 0 10 29 117 0 11 29 117 0 12 29 113 0 15 29 125 0 16 29 113 0 17 29 125 0 18 29 125 0 19 29 125 0 20 29 125 0 21 29 125 0 22 29 125 0 23 29 125 0 24 29 125 0 25 29 125 0 26 29 125 0 27 29 125 0 28 29 125 0 29 29 125 0 30 29 125 0 31 29 125 0 32 29 125 0 33 29 125 0 34 29 125 0 35 29 125 0 36 29 125 0 37 29 125 0 38 29 125 0 39 29 125 0 40 29 125 0 41 29 113 0 42 29 125 0 43 29 117 0 44 29 125 0 47 29 125 0 48 29 125 0 49 29 117 0 50 29 117 0 51 29 117 0 52 29 117 0 53 29 117 0 54 29 117 0 55 29 117 0 56 29 117 0 57 29 117 0 58 29 117 0 59 29 117 0 60 29 117 0 62 29 117 0 63 29 117 0 64 29 117 0 65 29 117 0 66 1 81 0 67 29 117 0 68 29 117 0 69 29 117 0 70 29 117 0 71 29 117 0 72 29 117 0 73 29 117 0 74 29 117 0 75 29 117 0 76 29 117 0 77 29 117 0 78 29 117 0 79 29 117 0 80 29 117 0 81 29 117 0 82 29 117 0 83 29 117 0 84 29 117 0 85 29 117 0 86 29 117 0 87 29 117 0 88 29 117 0 89 29 117 0 90 29 117 0 91 1 113 0 92 29 117 0 93 29 117 0 94 29 117 0 95 29 117 0 96 29 117 0 97 29 117 0 98 29 117 0 99 29 117 0 100 29 117 0 101 29 117 0 102 29 117 0 103 29 125 0 105 29 125 0 106 29 125 0 107 29 117 0 112 29 117 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 29 117 0 126 29 125 0 127 29 125 0 128 29 125 0 129 29 109 0 155 29 113 0 156 29 109 0 248 29 109 0 249 29 109 0 250 29 117 1 132 29 117 1 133 29 117 1 134 29 109 1 135 29 125 1 136 2 73 1 137] 
#[0 15 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 126 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 129 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 133 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 15 130 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 134 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 137 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 141 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 29 145 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 149 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[1 0 6 0 3 0 6 0 5 0 6 0 30 0 6 0 52 0 6 0 53 0 6 0 58 0 6 0 60 0 6 0 61 0 6 0 66 0 6 0 69 0 6 0 77 0 6 0 84 0 6 0 87 0 6 0 90 0 6 0 94 0 6 0 97 0 6 0 108 0 6 0 112 0 6 0 113 29 153 0 133] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 157 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 29 161 0 108] 
#[0 15 138 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 142 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 165 0 108] 
#[0 15 146 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 150 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 169 0 35] 
#[0 15 154 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 1 131 0 29] 
#[0 15 158 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 162 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 173 0 108] 
#[0 15 166 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 170 0 15 0 17 0 42] 
#[0 29 177 0 15 0 17 0 42 0 156] 
#[0 15 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 178 0 15 0 17 0 42] 
#[0 15 182 0 15 0 17 0 42] 
#[0 15 186 0 15 0 17 0 42] 
#[0 15 190 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 181 0 108] 
#[0 15 194 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 185 0 108] 
#[0 15 198 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 189 0 108] 
#[1 2 129 0 3 1 5 0 5 0 45 0 30 0 49 0 52 1 5 0 53 0 57 0 58 0 61 0 60 0 65 0 61 2 153 0 66 0 10 0 69 1 5 0 77 0 89 0 84 1 5 0 87 1 5 0 90 0 113 0 94 10 229 0 97 8 118 0 108 1 5 0 112 1 5 0 113 0 137 0 136 0 141 0 138 15 181 0 142 15 185 0 159 15 189 0 171 0 185 0 172 0 189 0 173 0 193 0 174 15 193 0 186 15 197 0 207 21 249 0 212 29 193 0 213 15 205 0 237 2 141 0 238 0 253 0 239 1 1 1 105 1 5 1 108 15 209 1 131 1 5 1 132] 
#[0 29 197 0 108] 
#[0 15 202 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 206 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 1 17 0 1 0 37 0 3 2 49 0 5 1 21 0 8 1 25 0 9 1 29 0 13 1 33 0 15 1 37 0 20 1 41 0 24 1 45 0 26 1 49 0 30 2 61 0 44 1 61 0 45 2 77 0 52 2 49 0 53 1 69 0 56 1 73 0 57 1 77 0 59 2 49 0 60 1 81 0 67 1 85 0 70 1 89 0 71 1 93 0 74 1 97 0 75 2 49 0 77 1 101 0 78 1 105 0 80 1 109 0 86 2 49 0 87 2 49 0 90 1 113 0 92 2 93 0 97 1 121 0 102 1 125 0 104 1 129 0 105 1 133 0 107 2 49 0 112 2 49 0 113 1 137 0 117 1 141 0 118 1 145 0 120 1 149 0 121 1 153 0 122 1 157 0 123 1 161 0 125 1 165 0 126 1 169 0 127 29 201 0 135 29 201 0 136 29 201 0 138 2 105 0 239 29 201 0 245 29 201 0 246 29 201 0 247 29 201 0 248 29 201 0 249 29 201 0 250 29 201 0 251 29 201 0 252 29 201 0 255 29 201 1 0 29 201 1 8 29 201 1 9 29 201 1 15 29 201 1 19 29 201 1 24 2 17 1 25 2 21 1 26 2 25 1 27 2 29 1 28 2 33 1 29 29 201 1 30 29 201 1 31 29 201 1 32 1 1 1 105 2 49 1 108 2 53 1 109 2 57 1 112 2 61 1 113 29 201 1 120 2 69 1 121 2 49 1 132 2 73 1 137] 
#[0 15 210 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 74 0 75 0 76 0 77 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 93 0 94 0 95 0 96 0 97 0 98 0 99 0 100 0 101 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 0 128 0 129 1 137] 
#[0 15 218 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 222 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 15 226 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[0 29 205 0 108] 
#[0 15 230 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138] 
#[1 5 177 0 2 5 181 0 6 5 185 0 7 5 189 0 9 5 193 0 10 5 197 0 15 5 201 0 16 5 205 0 17 5 209 0 18 5 213 0 20 5 217 0 21 5 221 0 23 5 225 0 24 5 229 0 26 5 233 0 27 5 237 0 28 5 241 0 32 5 245 0 33 5 249 0 34 5 253 0 35 6 1 0 36 15 234 0 37 6 5 0 38 6 9 0 39 6 13 0 40 6 17 0 41 6 21 0 42 6 25 0 47 6 29 0 48 6 33 0 51 19 177 0 64 6 37 0 106 6 41 0 107 6 45 0 109 6 49 0 110 6 53 0 111 6 57 0 127 6 61 0 128 6 65 0 129] 
#[0 15 238 0 1 0 3 0 5 0 8 0 9 0 13 0 15 0 20 0 24 0 26 0 30 0 31 0 44 0 45 0 52 0 53 0 56 0 57 0 58 0 59 0 60 0 61 0 65 0 66 0 67 0 69 0 70 0 71 0 72 0 74 0 75 0 77 0 78 0 79 0 80 0 84 0 86 0 87 0 88 0 89 0 90 0 91 0 92 0 94 0 96 0 97 0 99 0 102 0 104 0 105 0 107 0 108 0 112 0 113 0 117 0 118 0 120 0 121 0 122 0 123 0 125 0 126 0 127 1 137 1 138]
	).
]

{ #category : #private }
RustParser >> actionsForCurrentToken [
	| actions |
	actions := super actionsForCurrentToken.
	(actions isEmpty and: [ currentToken value size > 1 ])
		ifTrue:
			[ currentToken value first = $<
				ifTrue:
					[ currentToken := currentToken class
						value: '<'
						start: currentToken startPosition
						ids: {scanner ltId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			currentToken value first = $>
				ifTrue:
					[ currentToken := currentToken class
						value: '>'
						start: currentToken startPosition
						ids: {scanner gtId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			currentToken value first = $&
				ifTrue:
					[ currentToken := currentToken class
						value: '&'
						start: currentToken startPosition
						ids: {scanner ampId}.
					self position: currentToken startPosition.
					^ super actionsForCurrentToken ].
			(currentToken ids includes: scanner FLOAT_LITERALId)
				ifTrue:
					[ | index |
					index := currentToken source indexOf: $..
					index > 0
						ifTrue:
							[ currentToken := currentToken class
								value: (currentToken source first: index - 1)
								start: currentToken startPosition
								ids: {scanner INTEGER_LITERALId}.
							self position: currentToken startPosition + index - 2.
							^ super actionsForCurrentToken ] ] ].
	^ actions
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment_1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	result at: 3 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__pathExprSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__simplePathSegment__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__simplePathSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment_1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self add: ((nodes at: 2) at: 8) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment__1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self add: ((nodes at: 1) at: 5) to: (result at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_______separator__typePathSegment__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds__1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds__2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______colon__typeParamBounds___1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam_1: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	result at: 7 put: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam__1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__functionParam__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 4).
	self add: ((nodes at: 2) at: 7) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam_1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam__1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__maybeNamedParam__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__pattern__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______comma__pattern__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor______plus__typeParamBound__typeBound___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi___2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi____1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor__extern___externToken__abi__abi____2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFor_matchArm__arm________arrow__matchArmExpression__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForarrayElements3: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForarrayType1: nodes [
	| result |
	result := RustArrayTypeNode new.
	result leftBracket: (nodes at: 1).
	result type: (nodes at: 2).
	result semicolon: (nodes at: 3).
	result length: (nodes at: 4).
	result rightBracket: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem10: nodes [
	| result |
	result := RustConstantNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result constToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result colon: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result semicolon: ((nodes at: 3) at: 5).
	result equalsToken: ((nodes at: 3) at: 6).
	result value: ((nodes at: 3) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem5: nodes [
	| result |
	result := RustTypeAliasNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result typeToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result equalsToken: ((nodes at: 2) at: 4).
	result type: ((nodes at: 2) at: 5).
	result where: ((nodes at: 2) at: 6).
	result colon: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 9) to: result pluses.
	result lt: ((nodes at: 2) at: 10).
	result gt: ((nodes at: 2) at: 11).
	result addNodes: ((nodes at: 2) at: 12) to: result params.
	result addTokens: ((nodes at: 2) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem6: nodes [
	| result |
	result := RustTypeAliasNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result typeToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result semicolon: ((nodes at: 3) at: 3).
	result equalsToken: ((nodes at: 3) at: 4).
	result type: ((nodes at: 3) at: 5).
	result where: ((nodes at: 3) at: 6).
	result colon: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 9) to: result pluses.
	result lt: ((nodes at: 3) at: 10).
	result gt: ((nodes at: 3) at: 11).
	result addNodes: ((nodes at: 3) at: 12) to: result params.
	result addTokens: ((nodes at: 3) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForassociatedItem9: nodes [
	| result |
	result := RustConstantNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result constToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForasyncBlockExpression1: nodes [
	| result |
	result := RustAsyncBlockExpressionNode new.
	result asyncToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForasyncBlockExpression2: nodes [
	| result |
	result := RustAsyncBlockExpressionNode new.
	result asyncToken: (nodes at: 1).
	result moveToken: (nodes at: 2).
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattr2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForattrInput2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType1: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType2: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result arrow: ((nodes at: 5) at: 1).
	result addNode: ((nodes at: 5) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType3: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result attrs.
	result addNodes: ((nodes at: 4) at: 2) to: result types.
	result addTokens: ((nodes at: 4) at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 4) to: result colons.
	result addTokens: ((nodes at: 4) at: 5) to: result commas.
	result ellipsis: ((nodes at: 4) at: 6).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType4: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result fnToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result attrs.
	result addNodes: ((nodes at: 4) at: 2) to: result types.
	result addTokens: ((nodes at: 4) at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 4) to: result colons.
	result addTokens: ((nodes at: 4) at: 5) to: result commas.
	result ellipsis: ((nodes at: 4) at: 6).
	result rightParen: (nodes at: 5).
	result arrow: ((nodes at: 6) at: 1).
	result addNode: ((nodes at: 6) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType5: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType6: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result arrow: ((nodes at: 6) at: 1).
	result addNode: ((nodes at: 6) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType7: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result attrs.
	result addNodes: ((nodes at: 5) at: 2) to: result types.
	result addTokens: ((nodes at: 5) at: 3) to: result names.
	result addTokens: ((nodes at: 5) at: 4) to: result colons.
	result addTokens: ((nodes at: 5) at: 5) to: result commas.
	result ellipsis: ((nodes at: 5) at: 6).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForbareFunctionType8: nodes [
	| result |
	result := RustFunctionTypeNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result fnToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result attrs.
	result addNodes: ((nodes at: 5) at: 2) to: result types.
	result addTokens: ((nodes at: 5) at: 3) to: result names.
	result addTokens: ((nodes at: 5) at: 4) to: result colons.
	result addTokens: ((nodes at: 5) at: 5) to: result commas.
	result ellipsis: ((nodes at: 5) at: 6).
	result rightParen: (nodes at: 6).
	result arrow: ((nodes at: 7) at: 1).
	result addNode: ((nodes at: 7) at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForblockExpression1: nodes [
	| result |
	result := RustBlockExpressionNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForblockExpression2: nodes [
	| result |
	result := RustBlockExpressionNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: (nodes at: 3) to: result statements.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression10: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addToken: (nodes at: 3) to: result bars.
	result arrow: (nodes at: 4).
	result type: (nodes at: 5).
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression11: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result bars.
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression12: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result bars.
	result arrow: (nodes at: 5).
	result type: (nodes at: 6).
	result expression: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression1: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression2: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result arrow: (nodes at: 2).
	result type: (nodes at: 3).
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression3: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addToken: (nodes at: 2) to: result bars.
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression4: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addToken: (nodes at: 2) to: result bars.
	result arrow: (nodes at: 3).
	result type: (nodes at: 4).
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression5: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addNodes: ((nodes at: 2) at: 1) to: result parameters.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addToken: (nodes at: 3) to: result bars.
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression6: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result addToken: (nodes at: 1) to: result bars.
	result addNodes: ((nodes at: 2) at: 1) to: result parameters.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addToken: (nodes at: 3) to: result bars.
	result arrow: (nodes at: 4).
	result type: (nodes at: 5).
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression7: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression8: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result arrow: (nodes at: 3).
	result type: (nodes at: 4).
	result expression: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureExpression9: nodes [
	| result |
	result := RustClosureExpressionNode new.
	result moveToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result bars.
	result addToken: (nodes at: 3) to: result bars.
	result expression: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureParam1: nodes [
	| result |
	result := RustClosureParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForclosureParam2: nodes [
	| result |
	result := RustClosureParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstParam1: nodes [
	| result |
	result := RustConstParamNode new.
	result constToken: (nodes at: 1).
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstantItem3: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForconstantItem4: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate1: nodes [
	| result |
	result := RustCrateNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate2: nodes [
	| result |
	result := RustCrateNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result items.
	result addNodes: ((nodes at: 2) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate3: nodes [
	| result |
	result := RustCrateNode new.
	result shebang: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForcrate4: nodes [
	| result |
	result := RustCrateNode new.
	result shebang: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result items.
	result addNodes: ((nodes at: 3) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFordelimTokenTree1: nodes [
	| result |
	result := RustMacroTokenTreeNode new.
	result left: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result tokens.
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem1: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem2: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result leftParen: ((nodes at: 3) at: 1).
	result rightParen: ((nodes at: 3) at: 2).
	result addNodes: ((nodes at: 3) at: 3) to: result fields.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem3: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result leftBrace: ((nodes at: 3) at: 1).
	result rightBrace: ((nodes at: 3) at: 2).
	result addNodes: ((nodes at: 3) at: 3) to: result fields.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem4: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result equalsToken: ((nodes at: 3) at: 1).
	result value: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem5: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem6: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result fields.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem7: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result leftBrace: ((nodes at: 4) at: 1).
	result rightBrace: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result fields.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItem8: nodes [
	| result |
	result := RustEnumItemNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result equalsToken: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumItemTuple2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration1: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration2: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration3: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration4: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration5: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration6: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration7: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForenumeration8: nodes [
	| result |
	result := Array new: 10.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock10: nodes [
	| result |
	result := RustCallExpressionNode new.
	result expression: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result args.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock11: nodes [
	| result |
	result := RustIndexExpressionNode new.
	result expression: (nodes at: 1).
	result leftBracket: (nodes at: 2).
	result index: (nodes at: 3).
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock12: nodes [
	| result |
	result := RustErrorPropogationExpressionNode new.
	result expression: (nodes at: 1).
	result question: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock13: nodes [
	| result |
	result := RustBorrowExpressionNode new.
	result amp: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock14: nodes [
	| result |
	result := RustBorrowExpressionNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result expression: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock19: nodes [
	| result |
	result := RustUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock1: nodes [
	| result |
	result := RustAttributedExpressionNode new.
	result attr: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock20: nodes [
	| result |
	result := RustTypeCastExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock33: nodes [
	| result |
	result := RustBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock40: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock41: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock42: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result operator: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock43: nodes [
	| result |
	result := RustRangeExpressionNode new.
	result operator: (nodes at: 1).
	result to: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock4: nodes [
	| result |
	result := RustMethodCallExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: ((nodes at: 3) at: 1).
	result separator: ((nodes at: 3) at: 2).
	result genericArgs: ((nodes at: 3) at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock51: nodes [
	| result |
	result := RustAssignmentExpressionNode new.
	result lhs: (nodes at: 1).
	result operator: (nodes at: 2).
	result rhs: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock57: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock58: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock59: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock5: nodes [
	| result |
	result := RustMethodCallExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: ((nodes at: 3) at: 1).
	result separator: ((nodes at: 3) at: 2).
	result genericArgs: ((nodes at: 3) at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result args.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock60: nodes [
	| result |
	result := RustContinueExpressionNode new.
	result continueToken: (nodes at: 1).
	result label: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock61: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock62: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock63: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result label: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock64: nodes [
	| result |
	result := RustBreakExpressionNode new.
	result breakToken: (nodes at: 1).
	result label: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock65: nodes [
	| result |
	result := RustReturnExpressionNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock66: nodes [
	| result |
	result := RustReturnExpressionNode new.
	result returnToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock67: nodes [
	| result |
	result := RustGroupedExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result expression: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock68: nodes [
	| result |
	result := RustArrayExpressionNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock69: nodes [
	| result |
	result := RustArrayExpressionNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result elements.
	result addTokens: ((nodes at: 3) at: 2) to: result separators.
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock6: nodes [
	| result |
	result := RustFieldExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock70: nodes [
	| result |
	result := RustTupleExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock71: nodes [
	| result |
	result := RustTupleExpressionNode new.
	result leftParen: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result attrs.
	result addNodes: ((nodes at: 3) at: 1) to: result elements.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock75: nodes [
	| result |
	result := RustBoxExpressionNode new.
	result boxToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock7: nodes [
	| result |
	result := RustTupleIndexExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result index: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock8: nodes [
	| result |
	result := RustAwaitExpressionNode new.
	result expression: (nodes at: 1).
	result period: (nodes at: 2).
	result awaitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexpressionWithoutBlock9: nodes [
	| result |
	result := RustCallExpressionNode new.
	result expression: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock1: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock2: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock4: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock5: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock6: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 3).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock7: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 3).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternBlock8: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 3).
	self addAll: (nodes at: 6) to: (result at: 5).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternCrate1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternCrate2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 5 put: ((nodes at: 4) at: 1).
	result at: 6 put: ((nodes at: 4) at: 2).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem10: nodes [
	| result |
	result := RustFunctionNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result externToken: ((nodes at: 3) at: 1).
	result abi: ((nodes at: 3) at: 2).
	result unsafeToken: ((nodes at: 3) at: 3).
	result asyncToken: ((nodes at: 3) at: 4).
	result constToken: ((nodes at: 3) at: 5).
	result defaultToken: ((nodes at: 3) at: 6).
	result fnToken: ((nodes at: 3) at: 7).
	result name: ((nodes at: 3) at: 8).
	result leftParen: ((nodes at: 3) at: 9).
	result rightParen: ((nodes at: 3) at: 10).
	result block: ((nodes at: 3) at: 11).
	result semicolon: ((nodes at: 3) at: 12).
	result where: ((nodes at: 3) at: 13).
	result arrow: ((nodes at: 3) at: 14).
	result addNodes: ((nodes at: 3) at: 15) to: result types.
	result addNodes: ((nodes at: 3) at: 16) to: result attrs.
	result selfToken: ((nodes at: 3) at: 17).
	result mutToken: ((nodes at: 3) at: 18).
	result amp: ((nodes at: 3) at: 19).
	result lifetime: ((nodes at: 3) at: 20).
	result addTokens: ((nodes at: 3) at: 21) to: result colons.
	result addTokens: ((nodes at: 3) at: 22) to: result commas.
	result addNodes: ((nodes at: 3) at: 23) to: result patterns.
	result addTokens: ((nodes at: 3) at: 24) to: result bars.
	result addTokens: ((nodes at: 3) at: 25) to: result ellipsises.
	result lt: ((nodes at: 3) at: 26).
	result gt: ((nodes at: 3) at: 27).
	result addNodes: ((nodes at: 3) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem1: nodes [
	| result |
	result := RustAttributedMacroInvocationNode new.
	result macro: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem2: nodes [
	| result |
	result := RustAttributedMacroInvocationNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result macro: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem5: nodes [
	| result |
	result := RustStaticNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result staticToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	result mutToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem6: nodes [
	| result |
	result := RustStaticNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result staticToken: ((nodes at: 3) at: 1).
	result name: ((nodes at: 3) at: 2).
	result colon: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result semicolon: ((nodes at: 3) at: 5).
	result equalsToken: ((nodes at: 3) at: 6).
	result value: ((nodes at: 3) at: 7).
	result mutToken: ((nodes at: 3) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForexternalItem9: nodes [
	| result |
	result := RustFunctionNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result asyncToken: ((nodes at: 2) at: 4).
	result constToken: ((nodes at: 2) at: 5).
	result defaultToken: ((nodes at: 2) at: 6).
	result fnToken: ((nodes at: 2) at: 7).
	result name: ((nodes at: 2) at: 8).
	result leftParen: ((nodes at: 2) at: 9).
	result rightParen: ((nodes at: 2) at: 10).
	result block: ((nodes at: 2) at: 11).
	result semicolon: ((nodes at: 2) at: 12).
	result where: ((nodes at: 2) at: 13).
	result arrow: ((nodes at: 2) at: 14).
	result addNodes: ((nodes at: 2) at: 15) to: result types.
	result addNodes: ((nodes at: 2) at: 16) to: result attrs.
	result selfToken: ((nodes at: 2) at: 17).
	result mutToken: ((nodes at: 2) at: 18).
	result amp: ((nodes at: 2) at: 19).
	result lifetime: ((nodes at: 2) at: 20).
	result addTokens: ((nodes at: 2) at: 21) to: result colons.
	result addTokens: ((nodes at: 2) at: 22) to: result commas.
	result addNodes: ((nodes at: 2) at: 23) to: result patterns.
	result addTokens: ((nodes at: 2) at: 24) to: result bars.
	result addTokens: ((nodes at: 2) at: 25) to: result ellipsises.
	result lt: ((nodes at: 2) at: 26).
	result gt: ((nodes at: 2) at: 27).
	result addNodes: ((nodes at: 2) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForforLifetimes1: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction10: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction11: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction12: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction13: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction14: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction15: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction16: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction17: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction18: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction19: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction1: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 11 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction20: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction21: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction22: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction23: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction24: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	result at: 10 put: (nodes at: 6).
	result at: 14 put: ((nodes at: 7) at: 1).
	self add: ((nodes at: 7) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction25: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction26: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction27: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 13 put: (nodes at: 8).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction28: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 13 put: (nodes at: 8).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction29: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction2: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 12 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction30: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction31: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 9).
	result at: 11 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction32: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 26 put: ((nodes at: 4) at: 1).
	result at: 27 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 28).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 22).
	result at: 9 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 6) at: 2).
	result at: 18 put: ((nodes at: 6) at: 3).
	result at: 19 put: ((nodes at: 6) at: 4).
	result at: 20 put: ((nodes at: 6) at: 5).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 7).
	result at: 14 put: ((nodes at: 8) at: 1).
	self add: ((nodes at: 8) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 9).
	result at: 12 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction3: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 13 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction4: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 13 put: (nodes at: 6).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction5: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction6: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 12 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction7: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 7).
	result at: 11 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction8: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	result at: 10 put: (nodes at: 5).
	result at: 14 put: ((nodes at: 6) at: 1).
	self add: ((nodes at: 6) at: 2) to: (result at: 15).
	result at: 13 put: (nodes at: 7).
	result at: 12 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunction9: nodes [
	| result |
	result := Array new: 28.
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 28 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	result at: 6 put: ((nodes at: 1) at: 6).
	result at: 7 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 16).
	result at: 17 put: ((nodes at: 5) at: 2).
	result at: 18 put: ((nodes at: 5) at: 3).
	result at: 19 put: ((nodes at: 5) at: 4).
	result at: 20 put: ((nodes at: 5) at: 5).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 21).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 22).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 23).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 24).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 25).
	result at: 10 put: (nodes at: 6).
	result at: 11 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 6 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParam3: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 5 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParamPattern1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParamPattern2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters1: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters2: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters3: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self add: ((nodes at: 1) at: 4) to: (result at: 6).
	self add: ((nodes at: 1) at: 5) to: (result at: 7).
	self add: ((nodes at: 1) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters4: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self add: ((nodes at: 1) at: 4) to: (result at: 6).
	self add: ((nodes at: 1) at: 5) to: (result at: 7).
	self add: ((nodes at: 1) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 10).
	self add: (nodes at: 3) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters5: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParameters6: nodes [
	| result |
	result := Array new: 11.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self add: ((nodes at: 1) at: 6) to: (result at: 6).
	self add: ((nodes at: 1) at: 7) to: (result at: 7).
	self add: (nodes at: 2) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 10).
	self add: (nodes at: 5) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionParametersMaybeNamedVariadic1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers10: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers11: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers12: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers13: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers14: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers15: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers16: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 1 put: ((nodes at: 5) at: 1).
	result at: 2 put: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers3: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers6: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers7: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: ((nodes at: 3) at: 1).
	result at: 2 put: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers8: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: ((nodes at: 4) at: 1).
	result at: 2 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionQualifiers9: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	result at: 1 put: ((nodes at: 2) at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers1: nodes [
	| result |
	result := Array new: 3.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForfunctionTypeQualifiers6: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs1: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result gt: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs2: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result addNode: (nodes at: 2) to: result genericArgs.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result genericArgs.
	result gt: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgs3: nodes [
	| result |
	result := RustGenericArgsNode new.
	result lt: (nodes at: 1).
	result addNode: (nodes at: 2) to: result genericArgs.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result genericArgs.
	result addToken: (nodes at: 4) to: result commas.
	result gt: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgsBinding1: nodes [
	| result |
	result := RustGenericArgBindingNode new.
	result name: (nodes at: 1).
	result equalsToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericArgsConst4: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParam1: nodes [
	| result |
	result := RustGenericParamNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result param: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	self add: (nodes at: 3) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgenericParams5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 3).
	self add: (nodes at: 4) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForgroupedPattern1: nodes [
	| result |
	result := RustGroupedPatternNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern1: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern2: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result name: (nodes at: 1).
	result atToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern3: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result mutToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern4: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result mutToken: (nodes at: 1).
	result name: (nodes at: 2).
	result atToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern5: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern6: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result name: (nodes at: 2).
	result atToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern7: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForidentifierPattern8: nodes [
	| result |
	result := RustIdentifierPatternNode new.
	result refToken: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	result atToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result patterns.
	result addTokens: ((nodes at: 5) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifExpression1: nodes [
	| result |
	result := RustIfExpressionNode new.
	result ifToken: (nodes at: 1).
	result conditional: (nodes at: 2).
	result thenValue: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifExpression2: nodes [
	| result |
	result := RustIfExpressionNode new.
	result ifToken: (nodes at: 1).
	result conditional: (nodes at: 2).
	result thenValue: (nodes at: 3).
	result elseToken: (nodes at: 4).
	result elseValue: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression1: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result ifToken: (nodes at: 1).
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result matchValue: (nodes at: 5).
	result thenValue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression2: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result ifToken: (nodes at: 1).
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result matchValue: (nodes at: 5).
	result thenValue: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result elseValue: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForifLetExpression5: nodes [
	| result |
	result := RustIfLetExpressionNode new.
	result letToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result equalsToken: (nodes at: 3).
	result matchValue: (nodes at: 4).
	result elseToken: (nodes at: 5).
	result elseValue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplTraitType1: nodes [
	| result |
	result := RustImplTraitTypeNode new.
	result implToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplTraitTypeOneBound1: nodes [
	| result |
	result := RustImplTraitTypeNode new.
	result implToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplementation1: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	result at: 7 put: ((nodes at: 1) at: 7).
	result at: 8 put: ((nodes at: 1) at: 8).
	result at: 9 put: ((nodes at: 1) at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForimplementation2: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	result at: 12 put: ((nodes at: 1) at: 3).
	result at: 7 put: ((nodes at: 1) at: 4).
	result at: 3 put: ((nodes at: 1) at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	result at: 5 put: ((nodes at: 1) at: 8).
	result at: 13 put: ((nodes at: 1) at: 9).
	result at: 14 put: ((nodes at: 1) at: 10).
	result at: 8 put: ((nodes at: 1) at: 11).
	result at: 9 put: ((nodes at: 1) at: 12).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 11).
	result at: 15 put: ((nodes at: 1) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinferredType1: nodes [
	| result |
	result := RustInferredTypeNode new.
	result underscore: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl1: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl2: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 4).
	self addAll: (nodes at: 5) to: (result at: 6).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl3: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl4: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl5: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl6: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 4).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl7: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinherentImpl8: nodes [
	| result |
	result := Array new: 11.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: ((nodes at: 2) at: 1).
	result at: 9 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	result at: 2 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 4).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute1: nodes [
	| result |
	result := RustAttributeNode new.
	result hashToken: (nodes at: 1).
	result bang: (nodes at: 2).
	result leftBracket: (nodes at: 3).
	result path: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	result equalsToken: ((nodes at: 4) at: 3).
	result rightBracket: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute__attr__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForinnerAttribute__attr__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem3: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem_1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForitem_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForiteratorLoopExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement1: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result semicolon: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement2: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result equalsToken: (nodes at: 4).
	result value: (nodes at: 5).
	result semicolon: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement3: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	result semicolon: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForletStatement4: nodes [
	| result |
	result := RustLetStatementNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result letToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	result equalsToken: (nodes at: 6).
	result value: (nodes at: 7).
	result semicolon: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeParam1: nodes [
	| result |
	result := RustLifetimeParamNode new.
	result lifetime: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeParam2: nodes [
	| result |
	result := RustLifetimeParamNode new.
	result lifetime: (nodes at: 1).
	result colon: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result lifetimeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForlifetimeWhereClauseItem1: nodes [
	| result |
	result := RustLifetimeWhereClauseItemNode new.
	result lifetime: (nodes at: 1).
	result colon: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result lifetimeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForliteralExpression10: nodes [
	| result |
	result := RustLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression1: nodes [
	| result |
	result := RustLoopExpressionNode new.
	result loopToken: ((nodes at: 1) at: 1).
	result block: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression2: nodes [
	| result |
	result := RustLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result loopToken: ((nodes at: 2) at: 1).
	result block: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression3: nodes [
	| result |
	result := RustWhileLoopExpressionNode new.
	result whileToken: ((nodes at: 1) at: 1).
	result condition: ((nodes at: 1) at: 2).
	result block: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression4: nodes [
	| result |
	result := RustWhileLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result whileToken: ((nodes at: 2) at: 1).
	result condition: ((nodes at: 2) at: 2).
	result block: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression5: nodes [
	| result |
	result := RustWhileLetLoopExpressionNode new.
	result whileToken: ((nodes at: 1) at: 1).
	result letToken: ((nodes at: 1) at: 2).
	result addNodes: ((nodes at: 1) at: 3) to: result patterns.
	result addTokens: ((nodes at: 1) at: 4) to: result bars.
	result equalsToken: ((nodes at: 1) at: 5).
	result value: ((nodes at: 1) at: 6).
	result block: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression6: nodes [
	| result |
	result := RustWhileLetLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result whileToken: ((nodes at: 2) at: 1).
	result letToken: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result patterns.
	result addTokens: ((nodes at: 2) at: 4) to: result bars.
	result equalsToken: ((nodes at: 2) at: 5).
	result value: ((nodes at: 2) at: 6).
	result block: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression7: nodes [
	| result |
	result := RustForIteratorLoopExpressionNode new.
	result forToken: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result patterns.
	result addTokens: ((nodes at: 1) at: 3) to: result bars.
	result inToken: ((nodes at: 1) at: 4).
	result value: ((nodes at: 1) at: 5).
	result block: ((nodes at: 1) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForloopExpression8: nodes [
	| result |
	result := RustForIteratorLoopExpressionNode new.
	result label: ((nodes at: 1) at: 1).
	result colon: ((nodes at: 1) at: 2).
	result forToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result patterns.
	result addTokens: ((nodes at: 2) at: 3) to: result bars.
	result inToken: ((nodes at: 2) at: 4).
	result value: ((nodes at: 2) at: 5).
	result block: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationSemi1: nodes [
	| result |
	result := RustMacroInvocationStatementNode new.
	result macroInvocation: (nodes at: 1).
	result semicolon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationSemi2: nodes [
	| result |
	result := RustMacroInvocationStatementNode new.
	result macroInvocation: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroInvocationWithoutBlock1: nodes [
	| result |
	result := RustMacroInvocationNode new.
	result name: (nodes at: 1).
	result bang: (nodes at: 2).
	result left: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result tokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch1: nodes [
	| result |
	result := RustMacroMatchNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch2: nodes [
	| result |
	result := RustMacroMatchNode new.
	result left: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result matches.
	result right: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch4: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result fragment: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch5: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result matches.
	result rightParen: (nodes at: 4).
	result op: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatch6: nodes [
	| result |
	result := RustMacroMatchNode new.
	result dollar: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result matches.
	result rightParen: (nodes at: 4).
	result token: (nodes at: 5).
	result op: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroMatcher1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRule1: nodes [
	| result |
	result := RustMacroRuleNode new.
	result left: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result matches.
	result right: ((nodes at: 1) at: 3).
	result arrow: (nodes at: 2).
	result tokens: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDef1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDef3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormacroRulesDefinition1: nodes [
	| result |
	result := RustMacroRulesDefinitionNode new.
	result macroRulesToken: (nodes at: 1).
	result bang: (nodes at: 2).
	result name: (nodes at: 3).
	result left: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result rules.
	result addTokens: ((nodes at: 4) at: 3) to: result semicolons.
	result right: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArm1: nodes [
	| result |
	result := RustMatchArmNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArm2: nodes [
	| result |
	result := RustMatchArmNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result ifToken: ((nodes at: 3) at: 1).
	result condition: ((nodes at: 3) at: 2).
	result letToken: ((nodes at: 3) at: 3).
	result addNodes: ((nodes at: 3) at: 4) to: result patterns.
	result addTokens: ((nodes at: 3) at: 5) to: result bars.
	result equalsToken: ((nodes at: 3) at: 6).
	result matchValue: ((nodes at: 3) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArmGuard1: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArmGuard2: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 4).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArms1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchArms2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 3).
	self add: (nodes at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchExpression1: nodes [
	| result |
	result := RustMatchExpressionNode new.
	result matchToken: (nodes at: 1).
	result value: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attrs.
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormatchExpression2: nodes [
	| result |
	result := RustMatchExpressionNode new.
	result matchToken: (nodes at: 1).
	result value: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attrs.
	result addNodes: ((nodes at: 5) at: 1) to: result arms.
	result addTokens: ((nodes at: 5) at: 2) to: result arrows.
	result addNodes: ((nodes at: 5) at: 3) to: result armValues.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result rightBrace: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParameters1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParameters2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedFunctionParametersVariadic1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self add: (nodes at: 3) to: (result at: 5).
	self addAll: (nodes at: 4) to: (result at: 1).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedParam1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormaybeNamedParam3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule1: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule2: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule3: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule4: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule5: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFormodule6: nodes [
	| result |
	result := Array new: 8.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForneverType1: nodes [
	| result |
	result := RustNeverTypeNode new.
	result bang: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForobsoleteRangePattern1: nodes [
	| result |
	result := RustRangePatternNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForouterAttribute1: nodes [
	| result |
	result := RustAttributeNode new.
	result hashToken: (nodes at: 1).
	result leftBracket: (nodes at: 2).
	result path: ((nodes at: 3) at: 1).
	result value: ((nodes at: 3) at: 2).
	result equalsToken: ((nodes at: 3) at: 3).
	result rightBracket: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForouterAttribute__attr__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForparenthesizedType1: nodes [
	| result |
	result := RustParenthesizedTypeNode new.
	result leftParen: (nodes at: 1).
	result type: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathExprSegment1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression1: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addToken: ((nodes at: 1) at: 2) to: result separators.
	result addNode: ((nodes at: 1) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression2: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addToken: ((nodes at: 1) at: 2) to: result separators.
	result addNode: ((nodes at: 1) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression3: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 2) to: result separators.
	result addNode: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpathInExpression4: nodes [
	| result |
	result := RustPathExpressionNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 2) to: result separators.
	result addNode: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addNodes: ((nodes at: 3) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpattern2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpatternWithoutRange14: nodes [
	| result |
	result := RustBoxPatternNode new.
	result boxToken: (nodes at: 1).
	result pattern: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForpredicatePatternLoopExpression1: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathInExpression1: nodes [
	| result |
	result := RustPathExpressionNode new.
	result lt: ((nodes at: 1) at: 1).
	result type: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result asToken: ((nodes at: 1) at: 4).
	result typePath: ((nodes at: 1) at: 5).
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathInType1: nodes [
	| result |
	result := RustQualifiedPathInTypeNode new.
	result lt: ((nodes at: 1) at: 1).
	result addNode: ((nodes at: 1) at: 2) to: result types.
	result gt: ((nodes at: 1) at: 3).
	result asToken: ((nodes at: 1) at: 4).
	result typePath: ((nodes at: 1) at: 5).
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result arrows.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathType1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForqualifiedPathType2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrangePattern2: nodes [
	| result |
	result := RustRangePatternNode new.
	result from: (nodes at: 1).
	result operator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrawPointerType1: nodes [
	| result |
	result := RustRawPointerTypeNode new.
	result star: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrawPointerType2: nodes [
	| result |
	result := RustRawPointerTypeNode new.
	result star: (nodes at: 1).
	result constToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferencePattern3: nodes [
	| result |
	result := RustReferencePatternNode new.
	result amp: (nodes at: 1).
	result pattern: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferencePattern4: nodes [
	| result |
	result := RustReferencePatternNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType1: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType2: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result mutToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType3: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result lifetime: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForreferenceType4: nodes [
	| result |
	result := RustReferenceTypeNode new.
	result amp: (nodes at: 1).
	result lifetime: (nodes at: 2).
	result mutToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForrestPattern1: nodes [
	| result |
	result := RustRestPatternNode new.
	result operator: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForselfParam1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForselfParam2: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 6 put: ((nodes at: 2) at: 2).
	result at: 7 put: ((nodes at: 2) at: 3).
	result at: 3 put: ((nodes at: 2) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForshorthandSelf6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath1: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath2: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath3: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsimplePath4: nodes [
	| result |
	result := RustPathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: (nodes at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePattern1: nodes [
	| result |
	result := RustSlicePatternNode new.
	result leftBracket: (nodes at: 1).
	result rightBracket: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePattern2: nodes [
	| result |
	result := RustSlicePatternNode new.
	result leftBracket: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForslicePatternItems4: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForsliceType1: nodes [
	| result |
	result := RustSliceTypeNode new.
	result leftBracket: (nodes at: 1).
	result type: (nodes at: 2).
	result rightBracket: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement1: nodes [
	| result |
	result := RustEmptyStatementNode new.
	result semicolon: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement2: nodes [
	| result |
	result := RustItemStatementNode new.
	result item: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result attrs.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstatement4: nodes [
	| result |
	result := RustExpressionStatementNode new.
	result expression: ((nodes at: 1) at: 1).
	result semicolon: ((nodes at: 1) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem1: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem2: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 7 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem3: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstaticItem4: nodes [
	| result |
	result := Array new: 8.
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	result at: 3 put: ((nodes at: 1) at: 3).
	result at: 4 put: ((nodes at: 1) at: 4).
	result at: 7 put: ((nodes at: 1) at: 5).
	result at: 8 put: ((nodes at: 1) at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 6).
	result at: 9 put: ((nodes at: 1) at: 9).
	result at: 10 put: ((nodes at: 1) at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprField1: nodes [
	| result |
	result := RustStructExprFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprField3: nodes [
	| result |
	result := RustStructExprFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprFields3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct1: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct2: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result addNodes: ((nodes at: 4) at: 1) to: result fields.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result dotDot: ((nodes at: 4) at: 3).
	result from: ((nodes at: 4) at: 4).
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprStruct3: nodes [
	| result |
	result := RustStructExprStructNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result attrs.
	result dotDot: ((nodes at: 4) at: 1).
	result from: ((nodes at: 4) at: 2).
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple1: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple2: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNode: (nodes at: 3) to: result args.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result args.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructExprTuple3: nodes [
	| result |
	result := RustStructExprTupleNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNode: (nodes at: 3) to: result args.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result args.
	result addToken: (nodes at: 5) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructField1: nodes [
	| result |
	result := RustStructFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructField2: nodes [
	| result |
	result := RustStructFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result name: (nodes at: 3).
	result colon: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPattern1: nodes [
	| result |
	result := RustStructPatternNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPattern2: nodes [
	| result |
	result := RustStructPatternNode new.
	result path: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result fields.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements3: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternElements4: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternEtCetera1: nodes [
	| result |
	result := RustStructPatternEtCeteraNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result dotDot: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField1: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	result colon: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result patterns.
	result addTokens: ((nodes at: 4) at: 2) to: result bars.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField3: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField4: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result mutToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField5: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result refToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructPatternField6: nodes [
	| result |
	result := RustStructPatternFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result refToken: (nodes at: 2).
	result mutToken: (nodes at: 3).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct10: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct11: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct12: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 8 put: (nodes at: 4).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct1: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct3: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct4: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct5: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct6: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct7: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct8: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForstructStruct9: nodes [
	| result |
	result := Array new: 11.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortokenTreeToken5: nodes [
	| result |
	result := RustMacroTokenNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait10: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait11: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait12: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait13: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait14: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait15: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 11 put: ((nodes at: 5) at: 1).
	result at: 12 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait16: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 15 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 11 put: ((nodes at: 5) at: 1).
	result at: 12 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 6).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 8).
	result at: 4 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 5).
	self addAll: (nodes at: 11) to: (result at: 6).
	result at: 7 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait1: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	self addAll: (nodes at: 5) to: (result at: 5).
	self addAll: (nodes at: 6) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait2: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait3: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait4: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait5: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait6: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 8 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 5).
	self addAll: (nodes at: 9) to: (result at: 6).
	result at: 7 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait7: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	self addAll: (nodes at: 8) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait8: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 11 put: ((nodes at: 4) at: 1).
	result at: 12 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 14).
	result at: 8 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	result at: 3 put: (nodes at: 7).
	result at: 4 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 5).
	self addAll: (nodes at: 10) to: (result at: 6).
	result at: 7 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortrait9: nodes [
	| result |
	result := Array new: 16.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 16 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	self addAll: (nodes at: 7) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias10: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias11: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias12: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias13: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias14: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias15: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 9 put: ((nodes at: 5) at: 1).
	result at: 10 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias16: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 13 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 9 put: ((nodes at: 5) at: 1).
	result at: 10 put: ((nodes at: 5) at: 2).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 6).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 8) at: 1).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 9).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias1: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: ((nodes at: 4) at: 1).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 5).
	result at: 8 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias2: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias3: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias4: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias5: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias6: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias7: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: ((nodes at: 6) at: 1).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 7).
	result at: 8 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias8: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 9 put: ((nodes at: 4) at: 1).
	result at: 10 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 12).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 6).
	result at: 4 put: ((nodes at: 7) at: 1).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 8).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitAlias9: nodes [
	| result |
	result := Array new: 14.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 14 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: ((nodes at: 5) at: 1).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	result at: 7 put: (nodes at: 6).
	result at: 8 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound1: nodes [
	| result |
	result := RustTraitBoundNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound2: nodes [
	| result |
	result := RustTraitBoundNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound3: nodes [
	| result |
	result := RustTraitBoundNode new.
	result question: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound4: nodes [
	| result |
	result := RustTraitBoundNode new.
	result question: (nodes at: 1).
	result forToken: ((nodes at: 2) at: 1).
	result lt: ((nodes at: 2) at: 2).
	result gt: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result params.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound5: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result type: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound6: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result forToken: ((nodes at: 2) at: 1).
	result lt: ((nodes at: 2) at: 2).
	result gt: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result params.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound7: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result question: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitBound8: nodes [
	| result |
	result := RustTraitBoundNode new.
	result leftParen: (nodes at: 1).
	result question: (nodes at: 2).
	result forToken: ((nodes at: 3) at: 1).
	result lt: ((nodes at: 3) at: 2).
	result gt: ((nodes at: 3) at: 3).
	result addNodes: ((nodes at: 3) at: 4) to: result params.
	result addTokens: ((nodes at: 3) at: 5) to: result commas.
	result type: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl10: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl11: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 10 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl12: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 10 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl13: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl14: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl15: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl16: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 11 put: ((nodes at: 3) at: 1).
	result at: 12 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 4).
	result at: 9 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 3 put: (nodes at: 7).
	self add: (nodes at: 8) to: (result at: 2).
	result at: 4 put: (nodes at: 9).
	result at: 5 put: (nodes at: 10).
	self addAll: (nodes at: 11) to: (result at: 6).
	self addAll: (nodes at: 12) to: (result at: 7).
	result at: 8 put: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl1: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 6).
	self addAll: (nodes at: 8) to: (result at: 7).
	result at: 8 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl2: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 9 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl3: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 10 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl4: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 10 put: (nodes at: 2).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl5: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl6: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 9 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl7: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	result at: 3 put: (nodes at: 5).
	self add: (nodes at: 6) to: (result at: 2).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	self addAll: (nodes at: 9) to: (result at: 6).
	self addAll: (nodes at: 10) to: (result at: 7).
	result at: 8 put: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl8: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 11 put: ((nodes at: 2) at: 1).
	result at: 12 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 14).
	result at: 10 put: (nodes at: 3).
	result at: 9 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 3 put: (nodes at: 6).
	self add: (nodes at: 7) to: (result at: 2).
	result at: 4 put: (nodes at: 8).
	result at: 5 put: (nodes at: 9).
	self addAll: (nodes at: 10) to: (result at: 6).
	self addAll: (nodes at: 11) to: (result at: 7).
	result at: 8 put: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitImpl9: nodes [
	| result |
	result := Array new: 15.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 2).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	self addAll: (nodes at: 8) to: (result at: 6).
	self addAll: (nodes at: 9) to: (result at: 7).
	result at: 8 put: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectType1: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectType2: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result dynToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectTypeOneBound1: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result addNode: (nodes at: 1) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortraitObjectTypeOneBound2: nodes [
	| result |
	result := RustTraitObjectTypeNode new.
	result dynToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result typeBounds.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleElements2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleField1: nodes [
	| result |
	result := RustTupleFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleField2: nodes [
	| result |
	result := RustTupleFieldNode new.
	result addNodes: (nodes at: 1) to: result attrs.
	result visibility: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePattern1: nodes [
	| result |
	result := RustTuplePatternNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePattern2: nodes [
	| result |
	result := RustTuplePatternNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result patterns.
	result addTokens: ((nodes at: 2) at: 2) to: result bars.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result restPattern: ((nodes at: 2) at: 4).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortuplePatternItems4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct1: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct2: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 6 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct3: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct4: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct5: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct6: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 6 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct7: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStruct8: nodes [
	| result |
	result := Array new: 11.
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 9 put: ((nodes at: 3) at: 1).
	result at: 10 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 8).
	result at: 4 put: (nodes at: 6).
	result at: 6 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStructPattern1: nodes [
	| result |
	result := RustTupleStructPatternNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleStructPattern2: nodes [
	| result |
	result := RustTupleStructPatternNode new.
	result path: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result patterns.
	result addTokens: ((nodes at: 3) at: 2) to: result bars.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType1: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType2: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result types.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortupleType3: nodes [
	| result |
	result := RustTupleTypeNode new.
	result leftParen: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result types.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNode: (nodes at: 3) to: result types.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias10: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias11: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 6 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias12: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 6 put: (nodes at: 4).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias13: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias14: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	result at: 3 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias15: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias16: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 7 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	result at: 5 put: (nodes at: 8).
	result at: 3 put: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias1: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias2: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 5 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias3: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias4: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 5 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias5: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias6: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 4 put: (nodes at: 5).
	result at: 5 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias7: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias8: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 6 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	result at: 5 put: (nodes at: 7).
	result at: 3 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeAlias9: nodes [
	| result |
	result := Array new: 13.
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 10 put: ((nodes at: 3) at: 1).
	result at: 11 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem1: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result type: (nodes at: 1).
	result colon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem2: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result type: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem3: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	result colon: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeBoundWhereClauseItem4: nodes [
	| result |
	result := RustTypeBoundWhereClauseItemNode new.
	result forToken: ((nodes at: 1) at: 1).
	result lt: ((nodes at: 1) at: 2).
	result gt: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result params.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result type: (nodes at: 2).
	result colon: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 4) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam1: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam2: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result equalsToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam3: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam4: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result equalsToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam5: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParam6: nodes [
	| result |
	result := RustTypeParamNode new.
	result name: (nodes at: 1).
	result colon: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result typeBounds.
	result addTokens: ((nodes at: 3) at: 2) to: result pluses.
	result equalsToken: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBound1: nodes [
	| result |
	result := RustLifetimeNode new.
	result lifetime: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBounds1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypeParamBounds2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath1: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addNode: ((nodes at: 1) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 1) at: 3) to: result leftParens.
	result addToken: ((nodes at: 1) at: 4) to: result rightParens.
	result addToken: ((nodes at: 1) at: 5) to: result arrows.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addToken: ((nodes at: 1) at: 8) to: result separators.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath2: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: ((nodes at: 1) at: 1) to: result names.
	result addNode: ((nodes at: 1) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 1) at: 3) to: result leftParens.
	result addToken: ((nodes at: 1) at: 4) to: result rightParens.
	result addToken: ((nodes at: 1) at: 5) to: result arrows.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addToken: ((nodes at: 1) at: 8) to: result separators.
	result addTokens: ((nodes at: 2) at: 1) to: result separators.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addNodes: ((nodes at: 2) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 2) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result arrows.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath3: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addNode: ((nodes at: 2) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 2) at: 3) to: result leftParens.
	result addToken: ((nodes at: 2) at: 4) to: result rightParens.
	result addToken: ((nodes at: 2) at: 5) to: result arrows.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	result addToken: ((nodes at: 2) at: 8) to: result separators.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePath4: nodes [
	| result |
	result := RustTypePathNode new.
	result addToken: (nodes at: 1) to: result separators.
	result addToken: ((nodes at: 2) at: 1) to: result names.
	result addNode: ((nodes at: 2) at: 2) to: result genericArgses.
	result addToken: ((nodes at: 2) at: 3) to: result leftParens.
	result addToken: ((nodes at: 2) at: 4) to: result rightParens.
	result addToken: ((nodes at: 2) at: 5) to: result arrows.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	result addToken: ((nodes at: 2) at: 8) to: result separators.
	result addTokens: ((nodes at: 3) at: 1) to: result separators.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addNodes: ((nodes at: 3) at: 3) to: result genericArgses.
	result addTokens: ((nodes at: 3) at: 4) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 6) to: result arrows.
	result addNodes: ((nodes at: 3) at: 7) to: result types.
	result addTokens: ((nodes at: 3) at: 8) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn1: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn2: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn3: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathFn4: nodes [
	| result |
	result := Array new: 5.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self add: (nodes at: 5) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment1: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment2: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment3: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: ((nodes at: 2) at: 1).
	result at: 4 put: ((nodes at: 2) at: 2).
	result at: 5 put: ((nodes at: 2) at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment4: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment5: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypePathSegment6: nodes [
	| result |
	result := Array new: 8.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 8 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	result at: 5 put: ((nodes at: 3) at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypedSelf1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionFortypedSelf2: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion1: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion2: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 7 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion3: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	result at: 3 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunion4: nodes [
	| result |
	result := Array new: 10.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 8 put: ((nodes at: 3) at: 1).
	result at: 9 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	result at: 6 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForunsafeBlockExpression1: nodes [
	| result |
	result := RustUnsafeBlockExpressionNode new.
	result unsafeToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseDeclaration1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree10: nodes [
	| result |
	result := RustUseTreeNode new.
	result path: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree12: nodes [
	| result |
	result := RustUseTreeNode new.
	result path: (nodes at: 1).
	result asToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree1: nodes [
	| result |
	result := RustUseTreeNode new.
	result star: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree2: nodes [
	| result |
	result := RustUseTreeNode new.
	result leftBrace: (nodes at: 1).
	result rightBrace: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree3: nodes [
	| result |
	result := RustUseTreeNode new.
	result leftBrace: (nodes at: 1).
	result addNode: (nodes at: 2) to: result uses.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result uses.
	result addToken: (nodes at: 4) to: result commas.
	result rightBrace: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree4: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree5: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree6: nodes [
	| result |
	result := RustUseTreeNode new.
	result colonColon: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNode: (nodes at: 3) to: result uses.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result uses.
	result addToken: (nodes at: 5) to: result commas.
	result rightBrace: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree7: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result star: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree8: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForuseTree9: nodes [
	| result |
	result := RustUseTreeNode new.
	result basePath: (nodes at: 1).
	result colonColon: (nodes at: 2).
	result leftBrace: (nodes at: 3).
	result addNode: (nodes at: 4) to: result uses.
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addNodes: ((nodes at: 5) at: 2) to: result uses.
	result addToken: (nodes at: 6) to: result commas.
	result rightBrace: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem10: nodes [
	| result |
	result := RustTypeAliasNode new.
	result visibility: (nodes at: 1).
	result typeToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result equalsToken: ((nodes at: 2) at: 4).
	result type: ((nodes at: 2) at: 5).
	result where: ((nodes at: 2) at: 6).
	result colon: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 9) to: result pluses.
	result lt: ((nodes at: 2) at: 10).
	result gt: ((nodes at: 2) at: 11).
	result addNodes: ((nodes at: 2) at: 12) to: result params.
	result addTokens: ((nodes at: 2) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem11: nodes [
	| result |
	result := RustStructNode new.
	result structToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result left: ((nodes at: 1) at: 3).
	result right: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result fields.
	result addTokens: ((nodes at: 1) at: 6) to: result commas.
	result semicolon: ((nodes at: 1) at: 7).
	result where: ((nodes at: 1) at: 8).
	result lt: ((nodes at: 1) at: 9).
	result gt: ((nodes at: 1) at: 10).
	result addNodes: ((nodes at: 1) at: 11) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem12: nodes [
	| result |
	result := RustStructNode new.
	result visibility: (nodes at: 1).
	result structToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result left: ((nodes at: 2) at: 3).
	result right: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result fields.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	result semicolon: ((nodes at: 2) at: 7).
	result where: ((nodes at: 2) at: 8).
	result lt: ((nodes at: 2) at: 9).
	result gt: ((nodes at: 2) at: 10).
	result addNodes: ((nodes at: 2) at: 11) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem13: nodes [
	| result |
	result := RustEnumNode new.
	result enumToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result leftBrace: ((nodes at: 1) at: 3).
	result rightBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result items.
	result addTokens: ((nodes at: 1) at: 6) to: result commas.
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem14: nodes [
	| result |
	result := RustEnumNode new.
	result visibility: (nodes at: 1).
	result enumToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result leftBrace: ((nodes at: 2) at: 3).
	result rightBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result items.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem15: nodes [
	| result |
	result := RustUnionNode new.
	result unionToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result leftBrace: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result fields.
	result addTokens: ((nodes at: 1) at: 5) to: result commas.
	result rightBrace: ((nodes at: 1) at: 6).
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem16: nodes [
	| result |
	result := RustUnionNode new.
	result visibility: (nodes at: 1).
	result unionToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result leftBrace: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result fields.
	result addTokens: ((nodes at: 2) at: 5) to: result commas.
	result rightBrace: ((nodes at: 2) at: 6).
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem17: nodes [
	| result |
	result := RustConstantNode new.
	result constToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result colon: ((nodes at: 1) at: 3).
	result type: ((nodes at: 1) at: 4).
	result semicolon: ((nodes at: 1) at: 5).
	result equalsToken: ((nodes at: 1) at: 6).
	result value: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem18: nodes [
	| result |
	result := RustConstantNode new.
	result visibility: (nodes at: 1).
	result constToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem19: nodes [
	| result |
	result := RustStaticNode new.
	result staticToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result colon: ((nodes at: 1) at: 3).
	result type: ((nodes at: 1) at: 4).
	result semicolon: ((nodes at: 1) at: 5).
	result equalsToken: ((nodes at: 1) at: 6).
	result value: ((nodes at: 1) at: 7).
	result mutToken: ((nodes at: 1) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem1: nodes [
	| result |
	result := RustModuleNode new.
	result modToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	result leftBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 6).
	result addNodes: ((nodes at: 1) at: 7) to: result items.
	result unsafeToken: ((nodes at: 1) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem20: nodes [
	| result |
	result := RustStaticNode new.
	result visibility: (nodes at: 1).
	result staticToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result colon: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result semicolon: ((nodes at: 2) at: 5).
	result equalsToken: ((nodes at: 2) at: 6).
	result value: ((nodes at: 2) at: 7).
	result mutToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem21: nodes [
	| result |
	result := RustTraitNode new.
	result traitToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result where: ((nodes at: 1) at: 3).
	result leftBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result attrs.
	result addNodes: ((nodes at: 1) at: 6) to: result items.
	result rightBrace: ((nodes at: 1) at: 7).
	result colon: ((nodes at: 1) at: 8).
	result addNodes: ((nodes at: 1) at: 9) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 10) to: result pluses.
	result lt: ((nodes at: 1) at: 11).
	result gt: ((nodes at: 1) at: 12).
	result addNodes: ((nodes at: 1) at: 13) to: result params.
	result addTokens: ((nodes at: 1) at: 14) to: result commas.
	result autoToken: ((nodes at: 1) at: 15).
	result unsafeToken: ((nodes at: 1) at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem22: nodes [
	| result |
	result := RustTraitNode new.
	result visibility: (nodes at: 1).
	result traitToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result where: ((nodes at: 2) at: 3).
	result leftBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attrs.
	result addNodes: ((nodes at: 2) at: 6) to: result items.
	result rightBrace: ((nodes at: 2) at: 7).
	result colon: ((nodes at: 2) at: 8).
	result addNodes: ((nodes at: 2) at: 9) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 10) to: result pluses.
	result lt: ((nodes at: 2) at: 11).
	result gt: ((nodes at: 2) at: 12).
	result addNodes: ((nodes at: 2) at: 13) to: result params.
	result addTokens: ((nodes at: 2) at: 14) to: result commas.
	result autoToken: ((nodes at: 2) at: 15).
	result unsafeToken: ((nodes at: 2) at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem23: nodes [
	| result |
	result := RustTraitAliasNode new.
	result traitToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result equalsToken: ((nodes at: 1) at: 3).
	result colon: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 6) to: result pluses.
	result where: ((nodes at: 1) at: 7).
	result semicolon: ((nodes at: 1) at: 8).
	result lt: ((nodes at: 1) at: 9).
	result gt: ((nodes at: 1) at: 10).
	result addNodes: ((nodes at: 1) at: 11) to: result params.
	result addTokens: ((nodes at: 1) at: 12) to: result commas.
	result autoToken: ((nodes at: 1) at: 13).
	result unsafeToken: ((nodes at: 1) at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem24: nodes [
	| result |
	result := RustTraitAliasNode new.
	result visibility: (nodes at: 1).
	result traitToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result equalsToken: ((nodes at: 2) at: 3).
	result colon: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result typeBounds.
	result addTokens: ((nodes at: 2) at: 6) to: result pluses.
	result where: ((nodes at: 2) at: 7).
	result semicolon: ((nodes at: 2) at: 8).
	result lt: ((nodes at: 2) at: 9).
	result gt: ((nodes at: 2) at: 10).
	result addNodes: ((nodes at: 2) at: 11) to: result params.
	result addTokens: ((nodes at: 2) at: 12) to: result commas.
	result autoToken: ((nodes at: 2) at: 13).
	result unsafeToken: ((nodes at: 2) at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem25: nodes [
	| result |
	result := RustImplementationNode new.
	result implToken: ((nodes at: 1) at: 1).
	result addNodes: ((nodes at: 1) at: 2) to: result types.
	result leftBrace: ((nodes at: 1) at: 3).
	result addNodes: ((nodes at: 1) at: 4) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 5).
	result addNodes: ((nodes at: 1) at: 6) to: result items.
	result where: ((nodes at: 1) at: 7).
	result lt: ((nodes at: 1) at: 8).
	result gt: ((nodes at: 1) at: 9).
	result addNodes: ((nodes at: 1) at: 10) to: result params.
	result addTokens: ((nodes at: 1) at: 11) to: result commas.
	result forToken: ((nodes at: 1) at: 12).
	result bang: ((nodes at: 1) at: 13).
	result constToken: ((nodes at: 1) at: 14).
	result unsafeToken: ((nodes at: 1) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem26: nodes [
	| result |
	result := RustImplementationNode new.
	result visibility: (nodes at: 1).
	result implToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result types.
	result leftBrace: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 2) at: 4) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 5).
	result addNodes: ((nodes at: 2) at: 6) to: result items.
	result where: ((nodes at: 2) at: 7).
	result lt: ((nodes at: 2) at: 8).
	result gt: ((nodes at: 2) at: 9).
	result addNodes: ((nodes at: 2) at: 10) to: result params.
	result addTokens: ((nodes at: 2) at: 11) to: result commas.
	result forToken: ((nodes at: 2) at: 12).
	result bang: ((nodes at: 2) at: 13).
	result constToken: ((nodes at: 2) at: 14).
	result unsafeToken: ((nodes at: 2) at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem27: nodes [
	| result |
	result := RustExternBlockNode new.
	result externToken: ((nodes at: 1) at: 1).
	result leftBrace: ((nodes at: 1) at: 2).
	result addNodes: ((nodes at: 1) at: 3) to: result attrs.
	result rightBrace: ((nodes at: 1) at: 4).
	result addNodes: ((nodes at: 1) at: 5) to: result items.
	result abi: ((nodes at: 1) at: 6).
	result unsafeToken: ((nodes at: 1) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem28: nodes [
	| result |
	result := RustExternBlockNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result leftBrace: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result items.
	result abi: ((nodes at: 2) at: 6).
	result unsafeToken: ((nodes at: 2) at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem2: nodes [
	| result |
	result := RustModuleNode new.
	result visibility: (nodes at: 1).
	result modToken: ((nodes at: 2) at: 1).
	result name: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	result leftBrace: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attrs.
	result rightBrace: ((nodes at: 2) at: 6).
	result addNodes: ((nodes at: 2) at: 7) to: result items.
	result unsafeToken: ((nodes at: 2) at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem3: nodes [
	| result |
	result := RustExternCrateNode new.
	result externToken: ((nodes at: 1) at: 1).
	result crateToken: ((nodes at: 1) at: 2).
	result crate: ((nodes at: 1) at: 3).
	result semicolon: ((nodes at: 1) at: 4).
	result asToken: ((nodes at: 1) at: 5).
	result name: ((nodes at: 1) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem4: nodes [
	| result |
	result := RustExternCrateNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result crateToken: ((nodes at: 2) at: 2).
	result crate: ((nodes at: 2) at: 3).
	result semicolon: ((nodes at: 2) at: 4).
	result asToken: ((nodes at: 2) at: 5).
	result name: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem5: nodes [
	| result |
	result := RustUseDeclarationNode new.
	result useToken: ((nodes at: 1) at: 1).
	result use: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem6: nodes [
	| result |
	result := RustUseDeclarationNode new.
	result visibility: (nodes at: 1).
	result useToken: ((nodes at: 2) at: 1).
	result use: ((nodes at: 2) at: 2).
	result semicolon: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem7: nodes [
	| result |
	result := RustFunctionNode new.
	result externToken: ((nodes at: 1) at: 1).
	result abi: ((nodes at: 1) at: 2).
	result unsafeToken: ((nodes at: 1) at: 3).
	result asyncToken: ((nodes at: 1) at: 4).
	result constToken: ((nodes at: 1) at: 5).
	result defaultToken: ((nodes at: 1) at: 6).
	result fnToken: ((nodes at: 1) at: 7).
	result name: ((nodes at: 1) at: 8).
	result leftParen: ((nodes at: 1) at: 9).
	result rightParen: ((nodes at: 1) at: 10).
	result block: ((nodes at: 1) at: 11).
	result semicolon: ((nodes at: 1) at: 12).
	result where: ((nodes at: 1) at: 13).
	result arrow: ((nodes at: 1) at: 14).
	result addNodes: ((nodes at: 1) at: 15) to: result types.
	result addNodes: ((nodes at: 1) at: 16) to: result attrs.
	result selfToken: ((nodes at: 1) at: 17).
	result mutToken: ((nodes at: 1) at: 18).
	result amp: ((nodes at: 1) at: 19).
	result lifetime: ((nodes at: 1) at: 20).
	result addTokens: ((nodes at: 1) at: 21) to: result colons.
	result addTokens: ((nodes at: 1) at: 22) to: result commas.
	result addNodes: ((nodes at: 1) at: 23) to: result patterns.
	result addTokens: ((nodes at: 1) at: 24) to: result bars.
	result addTokens: ((nodes at: 1) at: 25) to: result ellipsises.
	result lt: ((nodes at: 1) at: 26).
	result gt: ((nodes at: 1) at: 27).
	result addNodes: ((nodes at: 1) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem8: nodes [
	| result |
	result := RustFunctionNode new.
	result visibility: (nodes at: 1).
	result externToken: ((nodes at: 2) at: 1).
	result abi: ((nodes at: 2) at: 2).
	result unsafeToken: ((nodes at: 2) at: 3).
	result asyncToken: ((nodes at: 2) at: 4).
	result constToken: ((nodes at: 2) at: 5).
	result defaultToken: ((nodes at: 2) at: 6).
	result fnToken: ((nodes at: 2) at: 7).
	result name: ((nodes at: 2) at: 8).
	result leftParen: ((nodes at: 2) at: 9).
	result rightParen: ((nodes at: 2) at: 10).
	result block: ((nodes at: 2) at: 11).
	result semicolon: ((nodes at: 2) at: 12).
	result where: ((nodes at: 2) at: 13).
	result arrow: ((nodes at: 2) at: 14).
	result addNodes: ((nodes at: 2) at: 15) to: result types.
	result addNodes: ((nodes at: 2) at: 16) to: result attrs.
	result selfToken: ((nodes at: 2) at: 17).
	result mutToken: ((nodes at: 2) at: 18).
	result amp: ((nodes at: 2) at: 19).
	result lifetime: ((nodes at: 2) at: 20).
	result addTokens: ((nodes at: 2) at: 21) to: result colons.
	result addTokens: ((nodes at: 2) at: 22) to: result commas.
	result addNodes: ((nodes at: 2) at: 23) to: result patterns.
	result addTokens: ((nodes at: 2) at: 24) to: result bars.
	result addTokens: ((nodes at: 2) at: 25) to: result ellipsises.
	result lt: ((nodes at: 2) at: 26).
	result gt: ((nodes at: 2) at: 27).
	result addNodes: ((nodes at: 2) at: 28) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisItem9: nodes [
	| result |
	result := RustTypeAliasNode new.
	result typeToken: ((nodes at: 1) at: 1).
	result name: ((nodes at: 1) at: 2).
	result semicolon: ((nodes at: 1) at: 3).
	result equalsToken: ((nodes at: 1) at: 4).
	result type: ((nodes at: 1) at: 5).
	result where: ((nodes at: 1) at: 6).
	result colon: ((nodes at: 1) at: 7).
	result addNodes: ((nodes at: 1) at: 8) to: result typeBounds.
	result addTokens: ((nodes at: 1) at: 9) to: result pluses.
	result lt: ((nodes at: 1) at: 10).
	result gt: ((nodes at: 1) at: 11).
	result addNodes: ((nodes at: 1) at: 12) to: result params.
	result addTokens: ((nodes at: 1) at: 13) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility1: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility2: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result crateToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility3: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result selfToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility4: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result superToken: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility5: nodes [
	| result |
	result := RustVisibilityNode new.
	result pubToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result inToken: (nodes at: 3).
	result path: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForvisibility6: nodes [
	| result |
	result := RustVisibilityNode new.
	result crateToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwhereClause1: nodes [
	| result |
	result := RustWhereClauseNode new.
	result whereToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwhereClause2: nodes [
	| result |
	result := RustWhereClauseNode new.
	result whereToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNode: (nodes at: 3) to: result clauses.
	^ result
]

{ #category : #'generated-reduction actions' }
RustParser >> reduceActionForwildcardPattern1: nodes [
	| result |
	result := RustWildcardPatternNode new.
	result underscore: (nodes at: 1).
	^ result
]

{ #category : #testing }
RustParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
RustParser >> useAllTokenIds [
	^ false
]
