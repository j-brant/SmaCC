Class {
	#name : #PythonParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Python'
}

{ #category : #generated }
PythonParser class >> ambiguousTransitions [
^#(
#[ 0 58 2 145] 
#[ 0 202 3 129] 
#[ 0 206 3 133] 
#[ 0 210 3 137] 
#[ 0 214 3 141] 
#[ 0 214 3 145] 
#[ 0 218 3 149] 
#[ 0 218 3 153] 
#[ 0 222 3 157] 
#[ 0 222 3 161] 
#[ 0 222 3 165] 
#[ 0 222 3 169] 
#[ 0 230 3 173] 
#[ 0 234 3 177] 
#[ 0 234 3 181] 
#[ 0 234 3 185] 
#[ 1 74 3 177] 
#[ 1 74 3 181] 
#[ 1 74 3 185] 
#[ 1 130 2 145] 
#[ 2 22 5 5] 
#[ 2 122 2 145] 
#[ 2 126 2 145] 
#[ 2 145 3 254] 
#[ 3 33 3 254] 
#[ 4 2 7 177] 
#[ 2 145 4 90] 
#[ 3 33 4 90]
	).
]

{ #category : #'generated-accessing' }
PythonParser class >> cacheId [
	^'2024-08-28T10:29:44.019794-05:00'
]

{ #category : #generated }
PythonParser class >> definitionComment [
"# Python Grammar and Lexer extracted from Python2 documentation on 16/04/2014 (Python 2.7.6)
# As seen from this grammar, the python doc and the implemented python scanner/parser diverge in several places
# https://docs.python.org/2/reference/index.html

# added f string support from Python 3

#Identifiers
%glr;

<name> :  ( [a-zA-Z]  | _ ) ([a-zA-Z]  | [0-9] | _)*;

# String literals
<stringprefix> :  r | u | ur | R | U | UR | Ur | uR | b | B | br | Br | bR | BR;
<escapeseq>       :  \\.;
<shortstring>  : 
		\' ( [^\\\n\r\'] | <escapeseq> )* \'
		| \"" ( [^\\\n\r\""] | <escapeseq>)* \"";
<longstring> :
		\'\'\' ( [^\\\'] | <escapeseq> | \'[^\'] | \'\'[^\'] )* \'\'\'
		| \""\""\"" ( [^\\\""] | <escapeseq> | \""[^\""] | \""\""[^\""] )* \""\""\"" ;
<string> : <stringprefix>?(<shortstring> | <longstring>);
<fStringWhole> : f <stringprefix>? (\' ( [^\\\n\r\'\{] | <escapeseq> )* \'
		| \"" ( [^\\\n\r\""\{] | <escapeseq>)* \"" 
		| \'\'\' ( [^\\\'\{] | <escapeseq> | \'[^\'] | \'\'[^\'] )* \'\'\'
		| \""\""\"" ( [^\\\""\{] | <escapeseq> | \""[^\""] | \""\""[^\""] )* \""\""\"");
<fStringSingleStart> : [fF] <stringprefix>? \' ( [^\\\n\r\'\{] | (\{\{) | <escapeseq> )* \{ ;
<fStringFormat>
	: [\!\:\=] [^\}]*
	;
fStringSingle <fStringSingleMid> : <fStringFormat>? \} ( [^\\\n\r\'\{] | (\{\{) | <escapeseq> )* \{ ;
fStringSingle <fStringSingleEnd> : <fStringFormat>? \} ( [^\\\n\r\'\{] | (\{\{) | <escapeseq> )* \' ;
<fStringDoubleStart> : [fF] <stringprefix>? \"" ( [^\\\n\r\""\{] | (\{\{) | <escapeseq> )* \{ ;
fStringDouble <fStringDoubleMid> : <fStringFormat>? \} ( [^\\\n\r\""\{] | v(\{\{) | <escapeseq> )* \{ ;
fStringDouble <fStringDoubleEnd> : <fStringFormat>? \} ( [^\\\n\r\""\{] | (\{\{) | <escapeseq> )* \"" ;
<fLongStringSingleStart> : [fF] <stringprefix>? \'\'\' ( [^\\\'\{] | (\{\{) | <escapeseq> | \'[^\'] | \'\'[^\'] )* \{ ;
fLongStringSingle <fLongStringSingleMid> : <fStringFormat>? \} ( [^\\\'\{] | (\{\{) | <escapeseq> | \'[^\'] | \'\'[^\'] )* \{ ;
fLongStringSingle <fLongStringSingleEnd> : <fStringFormat>? \} ( [^\\\'\{] | (\{\{) | <escapeseq> | \'[^\'] | \'\'[^\'] )* \'\'\' ;
<fLongStringDoubleStart> : [fF] <stringprefix>? \""\""\"" ( [^\\\""\{] | (\{\{) | <escapeseq> | \""[^\""] | \""\""[^\""] )* \{ ;
fLongStringDouble <fLongStringDoubleMid> : <fStringFormat>? \} ( [^\\\""\{] | (\{\{) | <escapeseq> | \""[^\""] | \""\""[^\""] )* \{ ;
fLongStringDouble <fLongStringDoubleEnd> : <fStringFormat>? \} ( [^\\\""\{] | (\{\{) | <escapeseq> | \""[^\""] | \""\""[^\""] )* \""\""\"" ;

# Integer literals
<decimalinteger> :  [1-9] [0-9]* | 0 ; 
<octinteger> :  0 (o | O) [0-7]+ | 0 [0-7]+;
<hexinteger> :  0 (x | X) [0-9a-fA-F]+;
<bininteger> :  0 (b | B) [01]+;
<integer> :  <decimalinteger> | <octinteger> | <hexinteger> | <bininteger>;
<longinteger> : <integer> (l | L) ;

#Float literals
<pointfloat> :  ([0-9]+ \. [0-9]*) | (\. [0-9]+) ; #Is that true that one can write 0000. ? Yes. Oh, and .50 is accepted in Python, not in the doc of Python.
<exponentfloat> :  ([0-9]+ | <pointfloat>) (e | E) (\+|\-)? [0-9]+ ;
<floatnumber> :  <pointfloat> | <exponentfloat> ;

#Imaginary literals
<imagnumber> : (<floatnumber> | [0-9]+) j ; #Is that true that one can write 0000j ? Yes.

#All number literals
<number> : <longinteger> | <integer> | <floatnumber> | <imagnumber> ;

#Modes
<cr>	: \r | \n | \r\n ;
lineBegin <emptyLine> : <cr> ;
lineBegin <blankLine> : [ \t\f]* ((\# [^\r\n]*  <cr>?) | <cr>) ;
lineBegin <indent> : [ \t\f]+ ;
lineBegin <noindent>  : [^ \t\f\#] ;
<comment> : \#[^\r\n]* ;
<whitespace> : [ \t]+ | \\<cr>;

<NEWLINE> : <cr> ;


<lparen> : \( ;
<rparen> : \) ;
<lbrack>	 : \[ ;
<rbrack> : \] ;
<lcurly> : \{ ;
<rcurly>	: \} ;

%id <INDENT> <DEDENT> <NEWLINE> <lbrack> <lcurly> <lparen> <rbrack> <rcurly> <rparen> <Python2>;

# Grammar for Python

# Note:  Changing the grammar specified in this file will most likely
#        require corresponding changes in the parser module
#        (../Modules/parsermodule.c).  If you can""t make the changes to
#        that module yourself, please co-ordinate the required changes
#        with someone who can; ask around on python-dev for help.  Fred
#        Drake <fdrake@acm.org> will probably be listening there.

# NOTE WELL: You should also follow all the steps listed in PEP 306,
# ""How to Change Python""s Grammar""

# Start symbols for the grammar:
#       single_input is a single interactive statement;
#       file_input is a module or sequence of commands read from an input file;
#       eval_input is the input for the eval() and input() functions.
# NB: compound_stmt in single_input is followed by extra <NEWLINE>!

%start file_input single_input eval_input small_stmt test;

# Note: Grammar rewritten to eliminate () [] * ? + ThierryGoubier 5/5/2014 22:34

#%annotate_tokens;
%root Root;
%prefix Py;
%suffix Node;
%hierarchy VariableExpression (TypedVariableExpression);
%right "":="";
%hierarchy BinaryExpression (ComparisonExpression);
%hierarchy Name (AsName);
%hierarchy Statement (AssertStatement AssignmentStatement BreakStatement ClassDefinition ContinueStatement DelStatement ExecStatement ExpressionStatement ForStatement FunctionDefinition GlobalStatement IfStatement ImportStatement PassStatement PrintStatement RaiseStatement ReturnStatement TryStatement WhileStatement WithStatement YieldStatement);
%hierarchy Expression (AssignmentExpression AwaitExpression BacktickExpression BinaryExpression DictionaryExpression FieldAccessExpression FunctionCallExpression IfExpression LambdaExpression ListExpression Number SetExpression String SpreadExpression SubscriptExpression  TupleExpression UnaryExpression VariableExpression YieldExpression);
%hierarchy FunctionCallExpression (DecoratorExpression);
%hierarchy Parameter (ListParameter KeywordParameter);
<patternToken>
: 	\`\` [a-zA-Z_]+ [^\`]* \`
;

file_input: {{File}}
	| file_input <NEWLINE> {{File}}
	| file_input stmt 'statement' {{File}}
	;

single_input: 
	<NEWLINE> {{File}}
	| simple_stmt {{File}}
	| compound_stmt 'statement' <NEWLINE> {{File}}
	;

eval_input:
	testlist <NEWLINE>* {{Eval}}
	;

decorator:
	""@"" 'ampersandToken' dotted_name 'receiver' paren_arglist_opt <NEWLINE> {{DecoratorExpression}}
	;
paren_arglist_opt:
	| <lparen> 'lparenToken' arglist? <rparen> 'rparenToken' 
	;
decorators:
	decorators decorator 'decorator' 
	| decorator 'decorator' 
	;
funcdef:
	decorators? ""async"" 'asyncToken'? ""def"" 'defToken' <name> 'fname' parameters return_annotation_opt 'returnAnnotation' "":"" 'colonToken' suite {{FunctionDefinition}}
	;
return_annotation_opt
	:
	| ""->"" 'arrowToken' expr 'typeExpression' {{ReturnTypeAnnotation}}
	;
parameters:
	<lparen> 'lparenToken' varargslist_opt <rparen> 'rparenToken'
	;
varargslist_opt:
	| varargslist
	;
varargslist:
	parameter 'parameter' "","" 'commaToken' varargslist
	| list_parameter 'parameter' varArg* comma_opt
	| list_parameter 'parameter' varArg*  "","" 'commaToken' keyword_parameter 'parameter' comma_opt
	| keyword_parameter 'parameter' comma_opt
	| parameter 'parameter' comma_opt
	;
keyword_parameter
	: ""**"" 'starStarToken' Symbol 'name' type_annotation? {{}}
	;
list_parameter
	: ""*"" 'starToken' (Symbol 'name' type_annotation?)? {{}}
	;
varArg
	: "","" 'commaToken' parameter 'parameter'
	;
parameter
	: fpdef 'name' type_annotation? init 'initializer'? {{}}
	;
init
	: ""="" 'equalToken' test 'value' {{}}
	;

fpdef:
	Symbol
	| <lparen> 'lparenToken' fplist <rparen> 'rparenToken' {{ParameterList}}
	;

fplist:
	fpdef 'name' "","" 'commaToken' fplist
	| fpdef 'name' comma_opt
	;

stmt:
	simple_stmt 
	| compound_stmt 'statement'
	;

simple_stmt:
	statement_with_separator 'statement'
	;
statement_with_separator
	: small_stmt "";"" 'semicolonToken' <NEWLINE>? {{Statement}}
	| small_stmt <NEWLINE> {{Statement}}
	;
semicolon_opt:
	| "";"" 'semicolonToken'
	;
expr_stmt: 
	testlist_expression 'expression' {{ExpressionStatement}}
	| testlist_expression 'lhs' assign_after {{AssignmentStatement}}
	| testlist_expression 'lhs' augassign 'assign' yield_or_testlist 'to' {{AssignmentStatement}}
	;
assign_after:
	 type_annotation? ""="" 'assign' yield_or_testlist 'to' assign_after*
	;
yield_or_testlist:
	yield_expr
	| testlist_expression 
	;
testlist_expression
	: testlistItem
	| testlistItem 'expression' ("","" 'commaToken' testlistItem 'expression')+ comma_opt {{ListExpression}}
	| testlistItem 'expression' "","" 'commaToken' {{ListExpression}}
	;
augassign:
	""+=""
	| ""-=""
	| ""*=""
	| ""/=""
	| ""%=""
	| ""&=""
	| ""|=""
	| ""^=""
	| ""<<=""
	| "">>=""
	| ""**=""
	| ""//=""
	;
# For normal assignments, additional restrictions enforced by the interpreter
print_stmt:
	<Python2> ""print"" 'printToken' testlist_opt {{PrintStatement}}
	| <Python2> ""print"" 'printToken' "">>"" 'gtgtToken' testlist {{PrintStatement}}
	;
del_stmt:
	""del"" 'delToken' exprlist {{DelStatement}}
	;
pass_stmt:
	""pass"" 'passToken' {{PassStatement}}
	;
flow_stmt:
	break_stmt
	| continue_stmt
	| return_stmt
	| raise_stmt
	| yield_stmt
	;
break_stmt:
	""break"" 'breakToken' {{BreakStatement}}
	;
continue_stmt:
	""continue"" 'continueToken' {{ContinueStatement}}
	;
return_stmt:
	""return"" 'returnToken' testlist_opt {{ReturnStatement}}
	;
yield_stmt:
	yield_expr 'yieldExpression' {{YieldStatement}}
	;
raise_stmt:
	""raise"" 'raiseToken' {{RaiseStatement}}
	| ""raise"" 'raiseToken' test 'arg' raise_from? {{RaiseStatement}}
	| ""raise"" 'raiseToken' test 'arg' "","" 'commaToken' test 'arg'  {{RaiseStatement}}
	| ""raise"" 'raiseToken' test 'arg' "","" 'commaToken' test 'arg' "","" 'commaToken' test 'arg' {{RaiseStatement}}
	;
raise_from
	: ""from"" 'fromToken'  test 'from'
	;
import_stmt:
	import_name
	| import_from
	;
import_name:
	""import"" 'importToken' dotted_as_names {{ImportStatement}}
	;
import_from:
	""from"" 'fromToken' dotopt_dotted_name 'from' ""import"" 'importToken' import_names_star {{ImportStatement}}
	;
dotopt_dotted_name:
	dotted_name
	| ""."" 'periodToken'+ dotted_name 'name'? {{RelativeName}}
	;
import_names_star:
	""*"" 'starToken'
	| <lparen> 'lparenToken' import_as_names <rparen> 'rparenToken'
	| import_as_names
	;
import_as_name:
	<name> 'nameToken' {{Name}}
	| <name> 'nameToken' ""as"" 'asToken' <name> 'rename' {{AsName}}
	;
dotted_as_name:
	dotted_name 'name'
	| dotted_name 'name' ""as"" 'asToken' <name> 'rename'
	;
import_as_names:
	import_as_names_in comma_opt
	;
import_as_names_in:
	import_as_names_in "","" 'commaToken' import_as_name 'name'
	| import_as_name 'name'
	;
dotted_as_names:
	dotted_as_names "","" 'commaToken' dotted_as_name
	| dotted_as_name
	;
dotted_name:
	dotted_name 'receiver' ""."" 'periodToken' <name> 'nameToken' {{FieldAccessExpression}}
	| Symbol
	;
global_stmt:
	""global"" 'globalToken' namelist {{GlobalStatement}}
	;
namelist:
	namelist "","" 'commaToken' <name> 'nameToken'
	| <name> 'nameToken'
	;
exec_stmt:
	""exec"" 'execToken' expr 'expr' {{ExecStatement}}
	| ""exec"" 'execToken' expr 'expr' ""in"" 'inToken' test_test_opt {{ExecStatement}}
	;

test_test_opt:
	test 'value'
	| test 'value' "","" 'commaToken' test 'value'
	;
assert_stmt:
	""assert"" 'assertToken' test_test_opt {{AssertStatement}}
	;
small_stmt:
	expr_stmt
	| print_stmt
	| del_stmt
	| pass_stmt
	| flow_stmt
	| import_stmt
	| global_stmt
	| exec_stmt
	| assert_stmt
	;
compound_stmt:
	if_stmt
	| while_stmt
	| for_stmt
	| try_stmt
	| with_stmt
	| funcdef 
	| classdef
	;
if_stmt:
	""if"" 'ifToken' test 'condition' "":"" 'colonToken' suite elif 'elsif'* else_opt 'else' {{IfStatement}}
	;
elif: ""elif"" 'elifToken' test 'condition' "":"" 'colonToken' suite {{Elif}}
	;
else_opt:
	| ""else"" 'elseToken' "":"" 'colonToken' suite {{Else}}
	;

while_stmt:
	""while"" 'whileToken' test 'condition' "":"" 'colonToken' suite else_opt 'else' {{WhileStatement}}
	;
for_stmt:
	""for"" 'forToken' exprlist ""in"" 'inToken' testlist_expression 'inExpression' "":"" 'colonToken' suite else_opt 'else' {{ForStatement}}
	;
try_stmt:
	""try"" 'tryToken' "":"" 'colonToken' suite except_list else_opt 'else' finally 'finally'? {{TryStatement}}
	| ""try"" 'tryToken' "":"" 'colonToken' suite finally 'finally' {{TryStatement}}
	;

finally
	: ""finally"" 'finallyToken' "":"" 'colonToken' suite {{}}
	;except_list:
	except_list except_clause 'clause' "":"" 'colonToken' suite
	| except_clause 'clause' "":"" 'colonToken' suite
	;
with_stmt:
	""with"" 'withToken' with_items "":"" 'colonToken' suite {{WithStatement}}
	;
with_items:
	with_items "","" 'commaToken' with_item 'withItem'
	| with_item 'withItem'
	;
with_item:
	test 'expression' {{WithItem}}
	| test 'expression' ""as"" 'asToken' expr 'name'  {{WithItem}}
	;
# NB compile.c makes sure that the default except clause is last
except_clause: 
	""except"" 'exceptToken' {{ExceptClause}}
	| ""except"" 'exceptToken' test 'exception' {{ExceptClause}}
	| ""except"" 'exceptToken' test 'exception' ""as"" 'asToken' test 'variable' {{ExceptClause}}
	| ""except"" 'exceptToken' test 'exception' "","" 'commaToken' test 'variable' {{ExceptClause}}
	;

suite:
	simple_stmt 
	| <NEWLINE> <INDENT> stmts  <DEDENT>
	;

stmts:
	stmts stmt 'statement'
	| stmt 'statement'
	;

# Backward compatibility cruft to support:
# [ x for x in lambda: True, lambda: False if x() ]
# even while also allowing:
# lambda x: 5 if x else 2
# (But not a mix of the two)
testlist_safe:
	old_test 'value'
	| old_test 'value' "","" 'commaToken' old_tests comma_opt
	;
old_tests:
	old_tests "","" 'commaToken' old_test 'value'
	| old_test 'value'
	;
old_test:
	or_test
	| old_lambdef
	;
old_lambdef:
	""lambda"" 'lambdaToken' varargslist_opt "":"" 'colonToken' old_test 'body' {{LambdaExpression}}
	;
or_test:
	and_test
	| and_test 'left' ""or"" 'opeator' or_test 'right' {{BinaryExpression}}
	;
and_test:
	not_test
	| not_test 'left' ""and"" 'operator' and_test 'right' {{BinaryExpression}}
	;
not_test:
	""not"" 'operator' not_test 'expression' {{UnaryExpression}}
	| comparison
	;
comparison:
	expr
	| expr 'left' comp_op comparison 'right' {{ComparisonExpression}}
	;
comp_op:
	""<"" 'operator' 
	| "">"" 'operator' 
	| ""=="" 'operator' 
	| "">="" 'operator' 
	| ""<="" 'operator' 
	| ""<>"" 'operator' 
	| ""!="" 'operator' 
	| ""not"" 'notToken'? ""in"" 'operator' 
	| ""is"" 'operator' ""not"" 'notToken'?
	;
expr:
	xor_expr 
	| xor_expr 'left' ""|"" 'operator' expr 'right' {{BinaryExpression}}
	;
xor_expr:
	and_expr
	| and_expr 'left' ""^"" 'operator' xor_expr  'right' {{BinaryExpression}}
	;
and_expr:
	shift_expr
	| shift_expr 'left' ""&"" 'operator' and_expr 'right'  {{BinaryExpression}}
	;
shift_expr:
	arith_expr
	| arith_expr 'left' ""<<"" 'operator' shift_expr 'right' {{BinaryExpression}}
	| arith_expr 'left' "">>"" 'operator' shift_expr 'right' {{BinaryExpression}}
	;
arith_expr:
	term
	| term 'left' ""+"" 'operator' arith_expr 'right'  {{BinaryExpression}}
	| term 'left' ""-"" 'operator' arith_expr 'right'  {{BinaryExpression}}
	;
term:
	factor
	| factor 'left' ""*"" 'operator' term 'right'  {{BinaryExpression}}
	| factor 'left' ""/"" 'operator' term 'right'  {{BinaryExpression}}
	| factor 'left' ""%"" 'operator' term 'right' {{BinaryExpression}}
	| factor 'left' ""//"" 'operator' term 'right' {{BinaryExpression}}
	;
factor:
	power
	| ""+"" 'operator' factor 'expression' {{UnaryExpression}}
	| ""-"" 'operator' factor 'expression' {{UnaryExpression}}
	| ""~"" 'operator' factor 'expression' {{UnaryExpression}}
	;

power:
    await
	| await 'left' ""**"" 'operator' factor 'right' {{BinaryExpression}}
	;
await
	: trailers
	| ""await"" 'awaitToken' trailers 'expression' {{AwaitExpression}}
	;
trailers
	: atom
	| trailers 'receiver' <lparen> 'lparenToken' arglist? <rparen> 'rparenToken' {{FunctionCallExpression}}
	| trailers 'receiver' <lbrack> 'lbrackToken' subscriptlist <rbrack> 'rbrackToken' {{SubscriptExpression}}
	| trailers 'receiver' ""."" 'periodToken' <name> 'nameToken' {{FieldAccessExpression}}
	;
atom: 
	<lparen> 'lparenToken' <rparen> 'rparenToken' {{TupleExpression}}
	| <lparen> 'lparenToken' yield_expr 'expression' <rparen> 'rparenToken' {{TupleExpression}}
	| <lparen> 'lparenToken' testlist_comp <rparen> 'rparenToken' {{TupleExpression}}
	| <lbrack> 'lbrackToken' <rbrack> 'rbrackToken' {{ListExpression}}
	| <lbrack> 'lbrackToken' listmaker <rbrack> 'rbrackToken' {{ListExpression}}
	| <lcurly> 'lcurlyToken' set_items  <rcurly> 'rcurlyToken' {{SetExpression}}
	| <lcurly> 'lcurlyToken' dictionary_items  <rcurly> 'rcurlyToken' {{DictionaryExpression}}
	| <lcurly> 'lcurlyToken'  <rcurly> 'rcurlyToken' {{DictionaryExpression}}
	| ""`"" 'backtickToken' testlist1 ""`"" 'backtickToken' {{BacktickExpression}}
	| Symbol
	| ""..."" 'nameToken' {{VariableExpression}}
	| <name> 'nameToken' type_annotation{{TypedVariableExpression}}
	| <number> 'numberToken' {{Number}}
	| strings
	;
type_annotation
	: "":"" 'colonToken' expr 'typeExpression' 
	;
strings:
	strings string {{String}}
	| string {{String}}
	;
string:
	<string> 'part'
	| <fStringWhole> 'part'
	| StartFStringSingle <fStringSingleStart> 'part' test 'expression' (<fStringSingleMid> 'part' test 'expression')* <fStringSingleEnd> 'part'
	| StartFStringDouble <fStringDoubleStart> 'part' test 'expression' (<fStringDoubleMid> 'part' test 'expression')* <fStringDoubleEnd> 'part'
	| StartFLongStringSingle <fLongStringSingleStart> 'part' test 'expression' (<fLongStringSingleMid> 'part' test 'expression')* <fLongStringSingleEnd> 'part'
	| StartFLongStringDouble <fLongStringDoubleStart> 'part' test 'expression' (<fLongStringDoubleMid> 'part' test 'expression')* <fLongStringDoubleEnd> 'part'
	;
StartFStringSingle: [{#fStringSingle. scanner lineJoiningStack copy}];
StartFStringDouble: [{#fStringDouble. scanner lineJoiningStack copy}];
StartFLongStringSingle: [{#fLongStringSingle. scanner lineJoiningStack copy}];
StartFLongStringDouble: [{#fLongStringDouble. scanner lineJoiningStack copy}];
listmaker:
	list_comprehension 'expression'
	| testlist
	;
list_comprehension
	: test 'object' list_for 'for' {{Comprehension}}
	;
testlist_comp:
	comprehension 'expression'
	| testlist
	;
lambdef:
	""lambda"" 'lambdaToken' varargslist_opt "":"" 'colonToken' test 'body' {{LambdaExpression}}
	;
subscriptlist:
	subscript 'subscript' "","" 'commaToken' subscriptlist
	| subscript 'subscript' comma_opt
	;
subscript:
	""."" 'periodToken' ""."" 'periodToken' ""."" 'periodToken' {{Ellipsis}}
	| test 
	| test 'from'? "":"" 'colonToken' test 'to'? sliceop {{Slice}}
	;
sliceop:
	| "":"" 'colonToken' test 'step'?
	;

exprlist:
	expr 'expr' "","" 'commaToken' exprlist
	| expr 'expr' comma_opt
	;
comma_opt:
	| "","" 'commaToken'
	;

test: or_test
	| or_test 'condition' ""if"" 'ifToken' or_test 'if' ""else"" 'elseToken' test 'else' {{IfExpression}}
	| lambdef
	| assignment_expression
	;
assignment_expression
	: Symbol 'variable' "":="" 'assign' test 'value' {{AssignmentExpression}}
	;
Symbol
	: <name> 'nameToken' {{VariableExpression}}
	;
testlist: 
	testlistItem 'expression' ("","" 'commaToken' testlistItem 'expression')+? comma_opt
	;
testlistItem
	: test
	| ""*"" 'operator' test 'expression' {{SpreadExpression}}
	;
testlist_opt:
	| testlist
	;
dictorsetmaker:
	dictionary_items 
	| set_items 
	;
set_items
	: comprehension 'expression'
	| testlist
	;
comprehension
	: test 'object' comp_for 'for' {{Comprehension}}
	;
dictionary_items
	: comprehension_dictionary_item 'expression'
	| dictionary_item 'expression' ("","" 'commaToken' dictionary_item 'expression')* comma_opt
	;
comprehension_dictionary_item
	: test 'object' "":"" 'colonToken' test 'value' comp_for 'comp' {{}}
	;
dictionary_item
	: test 'object' "":"" 'colonToken' test 'value' {{}}
	| dictSpread
	;
dictSpread
	: ""**"" 'operator' test 'expression' {{SpreadExpression}}
	;
classdef:
	decorators? ""class"" 'classToken' <name> 'cname' "":"" 'colonToken' suite {{ClassDefinition}}
	| decorators? ""class"" 'classToken' <name> 'cname' <lparen> 'lparenToken' superclasslist? <rparen> 'rparenToken' "":"" 'colonToken' suite {{ClassDefinition}}
	;
superclasslist
	: classListItem 'superClass' ("","" 'commaToken' classListItem 'superClass')* comma_opt
	;
classListItem
	: test
	| ""metaclass"" 'metaclassToken' ""="" 'equalToken' test 'superclass' {{Metaclass}}
	;

arglist: 
	argument 'argument' "","" 'commaToken' arglist
	| argument 'argument' comma_opt
	| ""*"" 'starToken' test 'argument' more_args comma_opt
	| ""**"" 'starStarToken' test 'argument' comma_opt
	;
more_args:
	| "","" 'commaToken' ""**"" 'starStarToken' test 'argument'
	| "","" 'commaToken' ""*"" 'starToken' test 'argument'
	| "","" 'commaToken' argument 'argument' more_args
	;
# The reason that keywords are test nodes instead of <name> is that using <name>
# results in an ambiguity. ast.c makes sure it""s a <name>.
argument:
	test
	| comprehension
	| test 'name' ""="" 'equalToken' test 'value' {{}}
	;

list_iter:
	list_for
	| list_if
	;
list_for:
	""for"" 'forToken' exprlist ""in"" 'inToken' testlist_safe {{ListFor}}
	| ""for"" 'forToken' exprlist ""in"" 'inToken' testlist_safe list_iter 'list' {{ListFor}}
	;
list_if:
	""if"" 'ifToken' old_test 'condition' {{ListIf}}
	| ""if"" 'ifToken' old_test 'condition' list_iter 'iter' {{ListIf}}
	;

comp_iter:
	comp_for
	| comp_if
	;

comp_for:
	""for"" 'forToken' exprlist ""in"" 'inToken' or_test 'inValue' {{ComprehensionFor}}
	| ""for"" 'forToken' exprlist ""in"" 'inToken' or_test 'inValue' comp_iter 'comprehension' {{ComprehensionFor}}
	;
comp_if:
	""if"" 'ifToken' old_test 'condition' {{ComprehensionIf}}
	| ""if"" 'ifToken' old_test 'condition' comp_iter 'iter' {{ComprehensionIf}}
	;

testlist1:
	(test 'expression' "","" 'commaToken')* test 'expression'
	;

# not used in grammar, but may appear in ""node"" passed from Parser to Compiler
#encoding_decl: <name> ;

yield_expr:
	""yield"" 'yieldToken' ""from"" 'fromToken'? testlist_opt {{YieldExpression}}
	;"
]

{ #category : #accessing }
PythonParser class >> eval: aString [
	^self parse: aString startingAt: self startingStateForeval_input
]

{ #category : #'file types' }
PythonParser class >> fileExtension [
	^ '.py'
]

{ #category : #generated }
PythonParser class >> reduceTable [
^#(
	#(108 0 #reduceActionForfile_input1: 5895169 false) 
	#(215 0 #reduceActionForStartFStringSingle1: 17617921 true) 
	#(216 0 #reduceActionForStartFStringDouble1: 17690625 true) 
	#(217 0 #reduceActionForStartFLongStringSingle1: 17763329 true) 
	#(218 0 #reduceActionForStartFLongStringDouble1: 17844225 true) 
	#(203 1 #reduceActionForatom11: 15920139 false) 
	#(259 0 #reduceActionFor_test__expression_______commaToken___1: 21620737 false) 
	#(144 1 #reduceActionForbreak_stmt1: 9068545 false) 
	#(145 1 #reduceActionForcontinue_stmt1: 9125889 false) 
	#(118 0 #reduceActionFor_test__expression_______commaToken___1: 6790145 false) 
	#(142 1 #reduceActionForpass_stmt1: 8927233 false) 
	#(148 1 #reduceActionForraise_stmt1: 9335809 false) 
	#(233 0 #reduceActionFor_test__expression_______commaToken___1: 19146753 false) 
	#(230 1 #reduceActionForatom11: 18907137 false) 
	#(206 1 #reduceActionForstring1: 16953345 false) 
	#(206 1 #reduceActionForstring1: 16953346 false) 
	#(203 1 #reduceActionForatom13: 15920141 false) 
	#(109 1 #reduceActionForfile_input1: 5995521 false) 
	#(114 1 #reduceActionFordecorators2: 6352898 false) 
	#(168 1 #liftFirstValue: 11353094 false) 
	#(109 1 #reduceActionForsingle_input2: 5995522 false) 
	#(129 1 #liftFirstValue: 7685121 false) 
	#(167 1 #liftFirstValue: 11213825 false) 
	#(132 1 #reduceActionForexpr_stmt1: 7912449 false) 
	#(167 1 #liftFirstValue: 11213826 false) 
	#(167 1 #liftFirstValue: 11213827 false) 
	#(167 1 #liftFirstValue: 11213828 false) 
	#(167 1 #liftFirstValue: 11213829 false) 
	#(143 1 #liftFirstValue: 8980481 false) 
	#(143 1 #liftFirstValue: 8980482 false) 
	#(143 1 #liftFirstValue: 8980483 false) 
	#(143 1 #liftFirstValue: 8980485 false) 
	#(143 1 #liftFirstValue: 8980484 false) 
	#(167 1 #liftFirstValue: 11213830 false) 
	#(150 1 #liftFirstValue: 9708545 false) 
	#(150 1 #liftFirstValue: 9708546 false) 
	#(167 1 #liftFirstValue: 11213831 false) 
	#(167 1 #liftFirstValue: 11213832 false) 
	#(167 1 #liftFirstValue: 11213833 false) 
	#(168 1 #liftFirstValue: 11353089 false) 
	#(168 1 #liftFirstValue: 11353090 false) 
	#(168 1 #liftFirstValue: 11353091 false) 
	#(168 1 #liftFirstValue: 11353092 false) 
	#(168 1 #liftFirstValue: 11353093 false) 
	#(228 1 #liftFirstValue: 18651137 false) 
	#(188 1 #liftFirstValue: 13681665 false) 
	#(189 1 #liftFirstValue: 13776897 false) 
	#(190 1 #liftFirstValue: 13876226 false) 
	#(191 1 #liftFirstValue: 13965313 false) 
	#(193 1 #liftFirstValue: 14283777 false) 
	#(194 1 #liftFirstValue: 14373889 false) 
	#(195 1 #liftFirstValue: 14472193 false) 
	#(196 1 #liftFirstValue: 14574593 false) 
	#(197 1 #liftFirstValue: 14759937 false) 
	#(198 1 #liftFirstValue: 14926849 false) 
	#(199 1 #liftFirstValue: 15217665 false) 
	#(200 1 #liftFirstValue: 15415297 false) 
	#(201 1 #liftFirstValue: 15505409 false) 
	#(202 1 #liftFirstValue: 15594497 false) 
	#(203 1 #liftFirstValue: 15920142 false) 
	#(205 1 #reduceActionForstrings2: 16891906 false) 
	#(228 1 #liftFirstValue: 18651139 false) 
	#(232 1 #liftFirstValue: 19063809 false) 
	#(228 1 #liftFirstValue: 18651140 false) 
	#(203 1 #liftFirstValue: 15920138 false) 
	#(136 1 #liftFirstValue: 8299521 false) 
	#(168 1 #liftFirstValue: 11353095 false) 
	#(147 1 #reduceActionForyield_stmt1: 9270273 false) 
	#(111 0 #nil 6131713 false) 
	#(227 0 #nil 18615297 false) 
	#(108 2 #reduceActionForfile_input2: 5895170 false) 
	#(108 2 #reduceActionForfile_input3: 5895171 false) 
	#(128 1 #liftFirstValue: 7630849 false) 
	#(128 1 #liftFirstValue: 7630850 false) 
	#(232 2 #reduceActionFortestlistItem2: 19063810 false) 
	#(199 2 #reduceActionForfactor2: 15217666 false) 
	#(199 2 #reduceActionForfactor2: 15217667 false) 
	#(113 0 #reduceActionForparen_arglist_opt1: 6269953 false) 
	#(161 1 #liftFirstValue: 10639362 false) 
	#(166 2 #reduceActionForassert_stmt1: 11138049 false) 
	#(165 1 #reduceActionFortest_test_opt1: 11058177 false) 
	#(201 2 #reduceActionForawait2: 15505410 false) 
	#(141 2 #reduceActionFordel_stmt1: 8868865 false) 
	#(164 2 #reduceActionForexec_stmt1: 10908673 false) 
	#(154 1 #reduceActionFordecorators2: 9994241 false) 
	#(153 1 #reduceActionFordotopt_dotted_name2: 9957378 false) 
	#(153 1 #liftFirstValue: 9957377 false) 
	#(163 1 #reduceActionFornamelist2: 10825730 false) 
	#(162 2 #reduceActionForglobal_stmt1: 10755073 false) 
	#(160 1 #reduceActionFordotted_as_names2: 10550274 false) 
	#(151 2 #reduceActionForimport_name1: 9753601 false) 
	#(157 1 #reduceActionFordotted_as_name1: 10295297 false) 
	#(122 1 #reduceActionForlist_parameter1: 7205889 false) 
	#(118 1 #reduceActionForfile_input2: 6790146 false) 
	#(120 0 #reduceActionFor_test__expression_______commaToken___1: 6923265 false) 
	#(124 1 #reduceActionForparameter1: 7336961 false) 
	#(126 1 #liftFirstValue: 7457793 false) 
	#(190 2 #reduceActionForfactor2: 13876225 false) 
	#(148 2 #reduceActionForraise_stmt2: 9335810 false) 
	#(233 1 #reduceActionForfile_input2: 19146754 false) 
	#(146 2 #reduceActionForreturn_stmt1: 9195521 false) 
	#(179 1 #reduceActionFornamelist2: 12471298 false) 
	#(180 1 #reduceActionForwith_item1: 12562433 false) 
	#(260 2 #reduceActionForyield_expr1: 21789697 false) 
	#(199 2 #reduceActionForfactor2: 15217668 false) 
	#(203 2 #reduceActionForatom12: 15920140 false) 
	#(203 2 #reduceActionForatom1: 15920129 false) 
	#(221 1 #reduceActionForfile_input2: 18059266 false) 
	#(221 1 #reduceActionForstring1: 18059265 false) 
	#(203 2 #reduceActionForatom4: 15920132 false) 
	#(219 1 #reduceActionForstring1: 17925121 false) 
	#(219 1 #reduceActionForfile_input2: 17925122 false) 
	#(203 2 #reduceActionForatom8: 15920136 false) 
	#(235 1 #reduceActionForfile_input2: 19229698 false) 
	#(235 1 #reduceActionForstring1: 19229697 false) 
	#(237 1 #reduceActionForstring1: 19354625 false) 
	#(239 0 #reduceActionFor_test__expression_______commaToken___1: 19451905 false) 
	#(241 1 #liftFirstValue: 19618818 false) 
	#(114 2 #reduceActionFordecorators1: 6352897 false) 
	#(139 1 #liftFirstValue: 8512517 false) 
	#(139 1 #liftFirstValue: 8512518 false) 
	#(139 1 #liftFirstValue: 8512523 false) 
	#(139 1 #liftFirstValue: 8512515 false) 
	#(139 1 #liftFirstValue: 8512513 false) 
	#(139 1 #liftFirstValue: 8512514 false) 
	#(139 1 #liftFirstValue: 8512524 false) 
	#(139 1 #liftFirstValue: 8512516 false) 
	#(139 1 #liftFirstValue: 8512521 false) 
	#(139 1 #liftFirstValue: 8512522 false) 
	#(139 1 #liftFirstValue: 8512520 false) 
	#(139 1 #liftFirstValue: 8512519 false) 
	#(132 2 #reduceActionForexpr_stmt2: 7912450 false) 
	#(130 2 #reduceActionForstatement_with_separator1: 7740417 false) 
	#(130 2 #reduceActionForfile_input2: 7740419 false) 
	#(109 2 #reduceActionForsingle_input2: 5995523 false) 
	#(192 1 #reduceActionForcomp_op7: 14055431 false) 
	#(192 1 #reduceActionForcomp_op7: 14055425 false) 
	#(192 1 #reduceActionForcomp_op7: 14055429 false) 
	#(192 1 #reduceActionForcomp_op7: 14055430 false) 
	#(192 1 #reduceActionForcomp_op7: 14055427 false) 
	#(192 1 #reduceActionForcomp_op7: 14055426 false) 
	#(192 1 #reduceActionForcomp_op7: 14055428 false) 
	#(192 1 #reduceActionForcomp_op7: 14055432 false) 
	#(192 1 #reduceActionForcomp_op7: 14055434 false) 
	#(205 2 #reduceActionForstrings1: 16891905 false) 
	#(136 2 #reduceActionFortestlist_expression3: 8299523 false) 
	#(138 1 #reduceActionFor______commaToken__testlistItem__expression___1: 8366081 false) 
	#(110 2 #reduceActionForeval_input1: 6109185 false) 
	#(227 1 #liftFirstValue: 18615298 false) 
	#(231 2 #reduceActionFortestlist1: 18963457 false) 
	#(203 3 #reduceActionForatom9: 15920137 false) 
	#(257 2 #reduceActionFortestlist11: 21608449 false) 
	#(259 2 #reduceActionFor_test__expression_______commaToken___2: 21620738 false) 
	#(116 0 #nil 6611969 false) 
	#(226 2 #reduceActionFortestlist1: 18536450 false) 
	#(154 2 #reduceActionFordecorators1: 9994242 false) 
	#(153 2 #reduceActionFordotopt_dotted_name3: 9957379 false) 
	#(122 2 #reduceActionForlist_parameter2: 7205890 false) 
	#(121 2 #reduceActionForkeyword_parameter1: 7122945 false) 
	#(119 2 #reduceActionFortestlist1: 6825988 false) 
	#(119 2 #reduceActionFortestlist1: 6825989 false) 
	#(124 2 #reduceActionForparameter2: 7336962 false) 
	#(124 2 #reduceActionForparameter3: 7336963 false) 
	#(148 3 #reduceActionForraise_stmt3: 9335811 false) 
	#(182 1 #reduceActionFordecorators2: 13051905 false) 
	#(260 3 #reduceActionForyield_expr2: 21789698 false) 
	#(204 2 #reduceActionFortype_annotation1: 16828417 false) 
	#(203 3 #reduceActionForatom3: 15920131 false) 
	#(236 2 #reduceActionForcomprehension1: 19286017 false) 
	#(203 3 #reduceActionForatom2: 15920130 false) 
	#(203 3 #reduceActionForatom5: 15920133 false) 
	#(220 2 #reduceActionForcomprehension1: 17985537 false) 
	#(242 2 #reduceActionFortestlistItem2: 19705857 false) 
	#(203 3 #reduceActionForatom6: 15920134 false) 
	#(203 3 #reduceActionForatom7: 15920135 false) 
	#(134 0 #reduceActionForassign_after_1: 8222721 false) 
	#(135 1 #liftFirstValue: 8240130 false) 
	#(135 1 #liftFirstValue: 8240129 false) 
	#(132 3 #reduceActionForexpr_stmt3: 7912451 false) 
	#(130 3 #reduceActionForstatement_with_separator1: 7740418 false) 
	#(188 3 #reduceActionForor_test2: 13681666 false) 
	#(189 3 #reduceActionForand_test2: 13776898 false) 
	#(192 2 #reduceActionFortype_annotation1: 14055435 false) 
	#(192 2 #reduceActionForcomp_op9: 14055433 false) 
	#(191 3 #reduceActionForcomparison2: 13965314 false) 
	#(193 3 #reduceActionForand_test2: 14283778 false) 
	#(194 3 #reduceActionForand_test2: 14373890 false) 
	#(195 3 #reduceActionForand_test2: 14472194 false) 
	#(196 3 #reduceActionForand_test2: 14574594 false) 
	#(196 3 #reduceActionForand_test2: 14574595 false) 
	#(197 3 #reduceActionForand_test2: 14759938 false) 
	#(197 3 #reduceActionForand_test2: 14759939 false) 
	#(198 3 #reduceActionForand_test2: 14926852 false) 
	#(198 3 #reduceActionForand_test2: 14926850 false) 
	#(198 3 #reduceActionForand_test2: 14926851 false) 
	#(198 3 #reduceActionForand_test2: 14926853 false) 
	#(200 3 #reduceActionForand_test2: 15415298 false) 
	#(202 3 #reduceActionFortrailers5: 15594501 false) 
	#(202 3 #reduceActionFortrailers2: 15594498 false) 
	#(250 1 #liftFirstValue: 20786177 false) 
	#(250 1 #liftFirstValue: 20786178 false) 
	#(225 0 #reduceActionForsliceop1: 18489345 false) 
	#(224 1 #liftFirstValue: 18332674 false) 
	#(208 0 #reduceActionFor_test__expression_______commaToken___1: 17074177 false) 
	#(210 0 #reduceActionFor_test__expression_______commaToken___1: 17218561 false) 
	#(212 0 #reduceActionFor_test__expression_______commaToken___1: 17371137 false) 
	#(214 0 #reduceActionFor_test__expression_______commaToken___1: 17531905 false) 
	#(229 3 #reduceActionForassignment_expression1: 18806785 false) 
	#(137 2 #reduceActionFortype_annotation1: 8366081 false) 
	#(138 2 #reduceActionFor_test__expression_______commaToken___2: 8366082 false) 
	#(136 3 #reduceActionFortestlist_expression2: 8299522 false) 
	#(140 3 #reduceActionForprint_stmt1: 8707073 false) 
	#(111 2 #liftFirstValue: 6131714 false) 
	#(231 3 #reduceActionFortestlist2: 18963458 false) 
	#(161 3 #reduceActionFortrailers5: 10639361 false) 
	#(113 2 #reduceActionForparen_arglist_opt2: 6269954 false) 
	#(112 4 #reduceActionFordecorator1: 6156289 false) 
	#(258 2 #reduceActionFortype_annotation1: 21620737 false) 
	#(165 3 #reduceActionFortest_test_opt2: 11058178 false) 
	#(243 4 #reduceActionForclassdef1: 19779585 false) 
	#(247 1 #liftFirstValue: 20154369 false) 
	#(246 0 #reduceActionFor_test__expression_______commaToken___1: 20092929 false) 
	#(226 3 #reduceActionForexprlist1: 18536449 false) 
	#(164 4 #reduceActionForexec_stmt2: 10908674 false) 
	#(155 1 #reduceActionForimport_names_star1: 10054657 false) 
	#(156 1 #reduceActionForimport_as_name1: 10180609 false) 
	#(152 4 #reduceActionForimport_from1: 9831425 false) 
	#(159 1 #reduceActionFornamelist2: 10440706 false) 
	#(155 1 #reduceActionForimport_names_star3: 10054659 false) 
	#(163 3 #reduceActionFornamelist1: 10825729 false) 
	#(170 0 #reduceActionForelif__elsif__1: 11524097 false) 
	#(160 3 #reduceActionFordotted_as_names1: 10550273 false) 
	#(157 3 #reduceActionFordotted_as_name2: 10295298 false) 
	#(122 3 #reduceActionForlist_parameter3: 7205891 false) 
	#(121 3 #reduceActionForkeyword_parameter2: 7122946 false) 
	#(127 2 #reduceActionFortestlist1: 7553026 false) 
	#(126 3 #reduceActionForfpdef2: 7457794 false) 
	#(222 4 #reduceActionForlambdef1: 18118657 false) 
	#(120 2 #reduceActionFor_test__expression_______commaToken___2: 6923266 false) 
	#(119 3 #reduceActionFortestlist2: 6825986 false) 
	#(119 3 #reduceActionForexprlist1: 6825985 false) 
	#(125 2 #reduceActionForinit1: 7409665 false) 
	#(124 3 #reduceActionForparameter4: 7336964 false) 
	#(148 4 #reduceActionForraise_stmt4: 9335812 false) 
	#(149 2 #reduceActionFortype_annotation1: 9658369 false) 
	#(181 1 #reduceActionForexcept_clause1: 12739585 false) 
	#(175 4 #reduceActionFortry_stmt3: 11986947 false) 
	#(172 0 #nil 11653121 false) 
	#(179 3 #reduceActionFornamelist1: 12471297 false) 
	#(178 4 #reduceActionForwith_stmt1: 12383233 false) 
	#(180 3 #reduceActionForwith_item2: 12562434 false) 
	#(241 3 #reduceActionFordictionary_item1: 19618817 false) 
	#(237 3 #reduceActionFortestlist2: 19354626 false) 
	#(239 2 #reduceActionFor_test__expression_______commaToken___2: 19451906 false) 
	#(133 3 #reduceActionForexprlist1: 8152065 false) 
	#(249 0 #reduceActionFormore_args1: 20465665 false) 
	#(202 4 #reduceActionFortrailers3: 15594499 false) 
	#(248 2 #reduceActionForarglist2: 20263938 false) 
	#(225 1 #reduceActionForcomp_op7: 18489346 false) 
	#(224 2 #reduceActionForsubscript3: 18332675 false) 
	#(202 4 #reduceActionFortrailers4: 15594500 false) 
	#(223 2 #reduceActionFortestlist1: 18223106 false) 
	#(140 4 #reduceActionForprint_stmt2: 8707074 false) 
	#(113 3 #reduceActionForparen_arglist_opt3: 6269955 false) 
	#(117 3 #reduceActionForparameters1: 6710273 false) 
	#(116 2 #reduceActionForreturn_annotation_opt2: 6611970 false) 
	#(158 2 #reduceActionFortestlist11: 10389505 false) 
	#(127 3 #reduceActionForexprlist1: 7553025 false) 
	#(123 2 #reduceActionFortype_annotation1: 7283713 false) 
	#(183 1 #reduceActionFordecorators2: 13116418 false) 
	#(181 2 #reduceActionForexcept_clause2: 12739586 false) 
	#(175 5 #reduceActionFortry_stmt1: 11986945 false) 
	#(173 5 #reduceActionForwhile_stmt1: 11722753 false) 
	#(240 4 #reduceActionForcomprehension_dictionary_item1: 19515393 false) 
	#(238 2 #reduceActionFortype_annotation1: 19451905 false) 
	#(243 5 #reduceActionForclassdef2: 19779586 false) 
	#(134 2 #reduceActionForassign_after_2: 8222722 false) 
	#(133 4 #reduceActionForassign_after2: 8152066 false) 
	#(228 5 #reduceActionFortest2: 18651138 false) 
	#(248 3 #reduceActionForarglist4: 20263940 false) 
	#(250 3 #reduceActionForargument3: 20786179 false) 
	#(248 3 #reduceActionForexprlist1: 20263937 false) 
	#(224 3 #reduceActionForsubscript1: 18332673 false) 
	#(225 2 #reduceActionFortype_annotation1: 18489347 false) 
	#(224 3 #reduceActionForsubscript4: 18332676 false) 
	#(223 3 #reduceActionForexprlist1: 18223105 false) 
	#(224 3 #reduceActionForsubscript5: 18332677 false) 
	#(206 5 #reduceActionForstring3: 16953347 false) 
	#(208 2 #reduceActionFor_test__expression_______commaToken___2: 17074178 false) 
	#(206 5 #reduceActionForstring3: 16953348 false) 
	#(210 2 #reduceActionFor_test__expression_______commaToken___2: 17218562 false) 
	#(206 5 #reduceActionForstring3: 16953349 false) 
	#(212 2 #reduceActionFor_test__expression_______commaToken___2: 17371138 false) 
	#(206 5 #reduceActionForstring3: 16953350 false) 
	#(214 2 #reduceActionFor_test__expression_______commaToken___2: 17531906 false) 
	#(247 3 #reduceActionForclassListItem2: 20154370 false) 
	#(243 6 #reduceActionForclassdef3: 19779587 false) 
	#(244 3 #reduceActionFortestlist2: 20046849 false) 
	#(246 2 #reduceActionFor_test__expression_______commaToken___2: 20092930 false) 
	#(115 6 #reduceActionForfuncdef1: 6430721 false) 
	#(156 3 #reduceActionForimport_as_name2: 10180610 false) 
	#(155 3 #reduceActionForimport_names_star2: 10054658 false) 
	#(159 3 #reduceActionFornamelist1: 10440705 false) 
	#(170 2 #reduceActionFordecorators1: 11524098 false) 
	#(169 6 #reduceActionForif_stmt1: 11457537 false) 
	#(119 5 #reduceActionForvarargslist3: 6825987 false) 
	#(148 6 #reduceActionForraise_stmt5: 9335813 false) 
	#(183 2 #reduceActionFordecorators1: 13116417 false) 
	#(182 4 #reduceActionForsuite2: 13051906 false) 
	#(176 3 #reduceActionForfinally1: 12188673 false) 
	#(175 6 #reduceActionFortry_stmt2: 11986946 false) 
	#(177 3 #reduceActionForexcept_list2: 12256258 false) 
	#(255 4 #reduceActionForcomp_for1: 21251073 false) 
	#(252 4 #reduceActionForlist_for1: 20911105 false) 
	#(184 1 #reduceActionForstring1: 13355009 false) 
	#(186 1 #liftFirstValue: 13531138 false) 
	#(186 1 #liftFirstValue: 13531137 false) 
	#(248 4 #reduceActionForarglist3: 20263939 false) 
	#(224 4 #reduceActionForsubscript6: 18332678 false) 
	#(207 2 #reduceActionFortype_annotation1: 17074177 false) 
	#(209 2 #reduceActionFortype_annotation1: 17218561 false) 
	#(211 2 #reduceActionFortype_annotation1: 17371137 false) 
	#(213 2 #reduceActionFortype_annotation1: 17531905 false) 
	#(115 7 #reduceActionForfuncdef2: 6430722 false) 
	#(243 7 #reduceActionForclassdef4: 19779588 false) 
	#(245 2 #reduceActionFortype_annotation1: 20092929 false) 
	#(174 7 #reduceActionForfor_stmt1: 11837441 false) 
	#(181 4 #reduceActionForexcept_clause4: 12739588 false) 
	#(181 4 #reduceActionForexcept_clause3: 12739587 false) 
	#(172 3 #reduceActionForelse_opt2: 11653122 false) 
	#(177 4 #reduceActionForexcept_list1: 12256257 false) 
	#(255 5 #reduceActionForcomp_for2: 21251074 false) 
	#(254 1 #liftFirstValue: 21214209 false) 
	#(254 1 #liftFirstValue: 21214210 false) 
	#(252 5 #reduceActionForlist_for2: 20911106 false) 
	#(251 1 #liftFirstValue: 20875265 false) 
	#(251 1 #liftFirstValue: 20875266 false) 
	#(243 7 #reduceActionForclassdef5: 19779589 false) 
	#(115 7 #reduceActionForfuncdef3: 6430723 false) 
	#(249 3 #reduceActionFormore_args3: 20465667 false) 
	#(249 3 #reduceActionFormore_args2: 20465666 false) 
	#(249 3 #reduceActionFormore_args4: 20465668 false) 
	#(256 2 #reduceActionForcomp_if1: 21458945 false) 
	#(253 2 #reduceActionForlist_if1: 21083137 false) 
	#(185 1 #reduceActionFornamelist2: 13450242 false) 
	#(115 8 #reduceActionForfuncdef4: 6430724 false) 
	#(243 8 #reduceActionForclassdef6: 19779590 false) 
	#(171 4 #reduceActionForelif1: 11574273 false) 
	#(256 3 #reduceActionForcomp_if2: 21458946 false) 
	#(187 4 #reduceActionForlambdef1: 13569025 false) 
	#(253 3 #reduceActionForlist_if2: 21083138 false) 
	#(184 4 #reduceActionFortestlist_safe2: 13355010 false) 
	#(185 3 #reduceActionFornamelist1: 13450241 false)
	).
]

{ #category : #'generated-accessing' }
PythonParser class >> scannerClass [
	^PythonScanner
]

{ #category : #generated }
PythonParser class >> startingStateForeval_input [
	^ 3
]

{ #category : #generated }
PythonParser class >> startingStateForfile_input [
	^ 1
]

{ #category : #generated }
PythonParser class >> startingStateForsingle_input [
	^ 2
]

{ #category : #generated }
PythonParser class >> startingStateForsmall_stmt [
	^ 4
]

{ #category : #generated }
PythonParser class >> startingStateFortest [
	^ 5
]

{ #category : #generated }
PythonParser class >> symbolNames [
	^ #('"!="' '"%"' '"%="' '"&"' '"&="' '"*"' '"**"' '"**="' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"->"' '"."' '"..."' '"/"' '"//"' '"//="' '"/="' '":"' '":="' '";"' '"<"' '"<<"' '"<<="' '"<="' '"<>"' '"="' '"=="' '">"' '">="' '">>"' '">>="' '"@"' '"^"' '"^="' '"`"' '"and"' '"as"' '"assert"' '"async"' '"await"' '"break"' '"class"' '"continue"' '"def"' '"del"' '"elif"' '"else"' '"except"' '"exec"' '"finally"' '"for"' '"from"' '"global"' '"if"' '"import"' '"in"' '"is"' '"lambda"' '"metaclass"' '"not"' '"or"' '"pass"' '"print"' '"raise"' '"return"' '"try"' '"while"' '"with"' '"yield"' '"|"' '"|="' '"~"' '<name>' '<string>' '<fStringWhole>' '<fStringSingleStart>' '<fStringSingleMid>' '<fStringSingleEnd>' '<fStringDoubleStart>' '<fStringDoubleMid>' '<fStringDoubleEnd>' '<fLongStringSingleStart>' '<fLongStringSingleMid>' '<fLongStringSingleEnd>' '<fLongStringDoubleStart>' '<fLongStringDoubleMid>' '<fLongStringDoubleEnd>' '<number>' '<emptyLine>' '<blankLine>' '<indent>' '<noindent>' '<comment>' '<whitespace>' '<NEWLINE>' '<lparen>' '<rparen>' '<lbrack>' '<rbrack>' '<lcurly>' '<rcurly>' '<patternToken>' 'B e g i n' 'file_input' 'single_input' 'eval_input' '<NEWLINE>*' 'decorator' 'paren_arglist_opt' 'decorators' 'funcdef' 'return_annotation_opt' 'parameters' 'varargslist_opt' 'varargslist' 'varArg*' 'keyword_parameter' 'list_parameter' 'varArg' 'parameter' 'init' 'fpdef' 'fplist' 'stmt' 'simple_stmt' 'statement_with_separator' 'semicolon_opt' 'expr_stmt' 'assign_after' 'assign_after*' 'yield_or_testlist' 'testlist_expression' '("," ''commaToken'' testlistItem ''expression'')' '("," ''commaToken'' testlistItem ''expression'')+' 'augassign' 'print_stmt' 'del_stmt' 'pass_stmt' 'flow_stmt' 'break_stmt' 'continue_stmt' 'return_stmt' 'yield_stmt' 'raise_stmt' 'raise_from' 'import_stmt' 'import_name' 'import_from' 'dotopt_dotted_name' '"." ''periodToken''+' 'import_names_star' 'import_as_name' 'dotted_as_name' 'import_as_names' 'import_as_names_in' 'dotted_as_names' 'dotted_name' 'global_stmt' 'namelist' 'exec_stmt' 'test_test_opt' 'assert_stmt' 'small_stmt' 'compound_stmt' 'if_stmt' 'elif ''elsif''*' 'elif' 'else_opt' 'while_stmt' 'for_stmt' 'try_stmt' 'finally' 'except_list' 'with_stmt' 'with_items' 'with_item' 'except_clause' 'suite' 'stmts' 'testlist_safe' 'old_tests' 'old_test' 'old_lambdef' 'or_test' 'and_test' 'not_test' 'comparison' 'comp_op' 'expr' 'xor_expr' 'and_expr' 'shift_expr' 'arith_expr' 'term' 'factor' 'power' 'await' 'trailers' 'atom' 'type_annotation' 'strings' 'string' '(<fStringSingleMid> ''part'' test ''expression'')' '(<fStringSingleMid> ''part'' test ''expression'')*' '(<fStringDoubleMid> ''part'' test ''expression'')' '(<fStringDoubleMid> ''part'' test ''expression'')*' '(<fLongStringSingleMid> ''part'' test ''expression'')' '(<fLongStringSingleMid> ''part'' test ''expression'')*' '(<fLongStringDoubleMid> ''part'' test ''expression'')' '(<fLongStringDoubleMid> ''part'' test ''expression'')*' 'StartFStringSingle' 'StartFStringDouble' 'StartFLongStringSingle' 'StartFLongStringDouble' 'listmaker' 'list_comprehension' 'testlist_comp' 'lambdef' 'subscriptlist' 'subscript' 'sliceop' 'exprlist' 'comma_opt' 'test' 'assignment_expression' 'Symbol' 'testlist' 'testlistItem' 'testlist_opt' 'dictorsetmaker' 'set_items' 'comprehension' 'dictionary_items' '("," ''commaToken'' dictionary_item ''expression'')' '("," ''commaToken'' dictionary_item ''expression'')*' 'comprehension_dictionary_item' 'dictionary_item' 'dictSpread' 'classdef' 'superclasslist' '("," ''commaToken'' classListItem ''superClass'')' '("," ''commaToken'' classListItem ''superClass'')*' 'classListItem' 'arglist' 'more_args' 'argument' 'list_iter' 'list_for' 'list_if' 'comp_iter' 'comp_for' 'comp_if' 'testlist1' '(test ''expression'' "," ''commaToken'')' '(test ''expression'' "," ''commaToken'')*' 'yield_expr' '<DEDENT>' '<INDENT>' '<Python2>' 'E O F' 'error')
]

{ #category : #generated }
PythonParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #PyFileNode #PyFileNode #PyFileNode #PyEvalNode nil #PyDecoratorExpressionNode #OrderedCollection #OrderedCollection #PyFunctionDefinitionNode #PyReturnTypeAnnotationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #PyKeywordParameterNode #PyListParameterNode #OrderedCollection #PyParameterNode #PyInitNode #PyRootNode #OrderedCollection #PyStatementNode #PyStatementNode #PyStatementNode #SmaCCToken #PyStatementNode #OrderedCollection #OrderedCollection #PyExpressionNode #PyExpressionNode #OrderedCollection #OrderedCollection #SmaCCToken #PyPrintStatementNode #PyDelStatementNode #PyPassStatementNode #PyStatementNode #PyBreakStatementNode #PyContinueStatementNode #PyReturnStatementNode #PyYieldStatementNode #PyRaiseStatementNode #OrderedCollection #PyImportStatementNode #PyImportStatementNode #PyImportStatementNode #PyRootNode #OrderedCollection #OrderedCollection #PyNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #PyExpressionNode #PyGlobalStatementNode #OrderedCollection #PyExecStatementNode #OrderedCollection #PyAssertStatementNode #PyStatementNode #PyStatementNode #PyIfStatementNode #OrderedCollection #PyElifNode #PyElseNode #PyWhileStatementNode #PyForStatementNode #PyTryStatementNode #PyFinallyNode #OrderedCollection #PyWithStatementNode #OrderedCollection #PyWithItemNode #PyExceptClauseNode #Object #OrderedCollection #OrderedCollection #OrderedCollection #PyExpressionNode #PyLambdaExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #OrderedCollection #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #PyExpressionNode #OrderedCollection #PyStringNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Array #Array #Array #Array #OrderedCollection #PyComprehensionNode #OrderedCollection #PyLambdaExpressionNode #OrderedCollection #PyRootNode #OrderedCollection #OrderedCollection #SmaCCToken #PyExpressionNode #PyAssignmentExpressionNode #PyVariableExpressionNode #OrderedCollection #PyExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #PyComprehensionNode #OrderedCollection #OrderedCollection #OrderedCollection #PyComprehensionDictionaryItemNode #PyRootNode #PySpreadExpressionNode #PyClassDefinitionNode #OrderedCollection #OrderedCollection #OrderedCollection #PyRootNode #OrderedCollection #OrderedCollection #PyRootNode #PyRootNode #PyListForNode #PyListIfNode #PyRootNode #PyComprehensionForNode #PyComprehensionIfNode #OrderedCollection #OrderedCollection #OrderedCollection #PyYieldExpressionNode #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
PythonParser class >> transitionTable [
^#(
#[1 0 6 0 6 0 6 0 10 0 6 0 13 0 6 0 17 0 6 0 36 0 6 0 39 0 6 0 42 0 6 0 43 0 6 0 44 0 6 0 45 0 6 0 46 0 6 0 47 0 6 0 48 0 6 0 49 0 6 0 53 0 6 0 55 0 6 0 56 0 6 0 57 0 6 0 58 0 6 0 59 0 6 0 62 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 78 0 6 0 79 0 6 0 80 0 6 0 83 0 6 0 86 0 6 0 89 0 6 0 92 0 6 0 99 0 6 0 100 0 6 0 102 0 6 0 104 0 25 0 108 0 6 1 7 0 6 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 45 0 36 0 49 0 39 0 53 0 42 0 57 0 43 0 61 0 44 0 65 0 45 0 69 0 46 0 73 0 47 0 77 0 48 0 81 0 49 0 85 0 53 0 89 0 55 0 93 0 56 0 97 0 57 0 101 0 58 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 129 0 70 0 133 0 71 0 137 0 72 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 165 0 99 0 169 0 100 0 173 0 102 0 177 0 104 0 181 0 109 0 185 0 112 0 189 0 114 1 21 0 115 0 197 0 129 0 197 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 1 21 0 168 1 21 0 169 1 21 0 173 1 21 0 174 1 21 0 175 1 21 0 178 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 21 0 243 1 153 1 4 1 157 1 7] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 161 0 110 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 1 165 0 231 1 169 0 232] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 173 0 132 0 209 0 136 1 173 0 140 1 173 0 141 1 173 0 142 1 173 0 143 1 173 0 144 1 173 0 145 1 173 0 146 1 173 0 147 1 173 0 148 1 173 0 150 1 173 0 151 1 173 0 152 1 173 0 162 1 173 0 164 1 173 0 166 1 173 0 167 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 177 0 222 1 177 0 228 1 177 0 229 1 141 0 230] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 45 0 36 0 49 0 39 0 53 0 42 0 57 0 43 0 61 0 44 0 65 0 45 0 69 0 46 0 73 0 47 0 77 0 48 0 81 0 49 0 85 0 53 0 89 0 55 0 93 0 56 0 97 0 57 0 101 0 58 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 129 0 70 0 133 0 71 0 137 0 72 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 1 181 0 99 0 169 0 100 0 173 0 102 0 177 0 104 0 185 0 112 0 189 0 114 1 185 0 115 1 185 0 128 1 185 0 129 1 185 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 1 185 0 168 1 185 0 169 1 185 0 173 1 185 0 174 1 185 0 175 1 185 0 178 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 185 0 243 1 153 1 4 1 157 1 7 0 0 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 197 0 222 1 197 0 228 1 197 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 201 0 199 1 201 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 209 0 199 1 209 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 0 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 1 213 0 77 1 217 0 161 1 217 0 230] 
#[1 0 30 0 10 0 30 0 13 0 30 0 17 0 30 0 39 0 30 0 44 0 30 0 62 0 30 0 64 0 30 0 76 0 30 0 77 0 30 0 78 0 30 0 79 0 30 0 80 0 30 0 83 0 30 0 86 0 30 0 89 0 30 0 92 0 30 0 100 0 30 0 102 0 30 0 104 1 225 1 1 1 229 1 3] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 233 0 165 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 237 0 222 1 237 0 228 1 237 0 229 1 141 0 230] 
#[0 1 241 0 48] 
#[1 0 41 0 17 0 49 0 39 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 245 0 202 1 245 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 245 0 230] 
#[0 0 34 0 24 0 99 1 8] 
#[0 1 249 0 77] 
#[0 0 38 0 24 0 99 1 8] 
#[0 1 253 0 77] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 1 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 5 0 226 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 9 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 1 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 13 0 226 1 97 0 230] 
#[1 2 17 0 16 1 213 0 77 2 21 0 153 2 25 0 154 2 29 0 161 2 29 0 230] 
#[1 2 33 0 77 2 37 0 163] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 41 0 222 2 41 0 228 2 41 0 229 1 141 0 230] 
#[1 1 213 0 77 2 45 0 157 2 49 0 160 2 53 0 161 2 53 0 230] 
#[1 2 57 0 6 2 61 0 7 0 42 0 22 1 213 0 77 2 65 0 100 2 69 0 118 2 73 0 119 2 77 0 121 2 81 0 122 2 85 0 124 2 89 0 126 2 89 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 97 0 190 2 97 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 0 46 0 24 0 99 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 50 0 24 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 50 0 99 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 101 0 222 2 101 0 228 2 101 0 229 1 141 0 230 0 50 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 54 0 24 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 54 0 99 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 2 105 0 231 1 169 0 232 2 109 0 233 0 54 1 8] 
#[0 2 113 0 22] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 117 0 222 2 117 0 228 2 117 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 121 0 179 2 125 0 180 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 129 0 222 2 129 0 228 2 129 0 229 1 141 0 230] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 54 0 22 0 54 0 24 0 54 0 30 0 49 0 39 0 61 0 44 2 133 0 56 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 54 0 99 0 169 0 100 0 54 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 2 105 0 231 1 169 0 232 2 137 0 233 0 54 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 141 0 199 2 141 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 58 0 1 0 58 0 2 0 58 0 3 0 58 0 4 0 58 0 5 0 58 0 6 0 58 0 7 0 58 0 8 0 58 0 9 0 58 0 10 0 58 0 11 0 58 0 12 0 58 0 13 0 58 0 14 0 58 0 16 0 58 0 18 0 58 0 19 0 58 0 20 0 58 0 21 0 7 0 22 0 58 0 23 0 58 0 24 0 58 0 25 0 58 0 26 0 58 0 27 0 58 0 28 0 58 0 29 0 58 0 30 0 58 0 31 0 58 0 32 0 58 0 33 0 58 0 34 0 58 0 35 0 58 0 37 0 58 0 38 0 58 0 39 0 58 0 40 0 58 0 41 0 58 0 51 0 58 0 55 0 58 0 56 0 58 0 58 0 58 0 60 0 58 0 61 0 58 0 64 0 58 0 65 0 58 0 74 0 58 0 75 0 58 0 81 0 58 0 82 0 58 0 84 0 58 0 85 0 58 0 87 0 58 0 88 0 58 0 90 0 58 0 91 0 58 0 99 0 58 0 100 0 58 0 101 0 58 0 102 0 58 0 103 0 58 0 105 2 149 0 204 0 58 1 8] 
#[0 0 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 0 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 0 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 0 74 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 2 153 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 157 0 221 2 161 0 222 2 161 0 228 2 161 0 229 1 141 0 230 2 165 0 231 1 169 0 232 2 169 0 236 2 173 1 4] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 2 177 0 103 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 181 0 219 2 185 0 220 2 189 0 222 2 189 0 228 2 189 0 229 1 141 0 230 2 193 0 231 1 169 0 232] 
#[1 0 29 0 6 2 197 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 201 0 105 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 205 0 222 2 205 0 228 2 205 0 229 1 141 0 230 2 209 0 231 1 169 0 232 2 213 0 235 2 217 0 236 2 221 0 237 2 225 0 240 2 229 0 241 2 229 0 242] 
#[0 0 0 1 8] 
#[0 0 78 0 36 0 43 0 46 0 48] 
#[1 0 45 0 36 2 237 0 43 2 241 0 46 2 245 0 48 2 249 0 112] 
#[0 0 82 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 86 1 8] 
#[0 0 90 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 94 0 24 0 99 1 8] 
#[1 3 53 0 3 3 53 0 5 3 53 0 8 3 53 0 9 3 53 0 11 3 53 0 14 3 53 0 20 3 53 0 21 2 145 0 22 0 98 0 24 3 53 0 27 3 33 0 30 3 53 0 35 3 53 0 38 3 53 0 75 0 98 0 99 3 49 0 133 3 53 0 139 3 57 0 204 0 98 1 8] 
#[0 0 102 0 24 0 99 1 8] 
#[0 0 106 0 24 0 99 1 8] 
#[0 0 110 0 24 0 99 1 8] 
#[0 0 114 0 24 0 99 1 8] 
#[0 0 118 0 24 0 99 1 8] 
#[0 0 122 0 24 0 99 1 8] 
#[0 0 126 0 24 0 99 1 8] 
#[0 0 130 0 24 0 99 1 8] 
#[0 0 134 0 24 0 99 1 8] 
#[0 0 138 0 24 0 99 1 8] 
#[0 0 142 0 24 0 99 1 8] 
#[0 0 146 0 24 0 99 1 8] 
#[0 0 150 0 24 0 99 1 8] 
#[0 0 154 0 24 0 99 1 8] 
#[0 0 158 0 24 0 99 1 8] 
#[1 3 61 0 24 3 65 0 99] 
#[0 3 69 0 99] 
#[0 0 162 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 166 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 170 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 174 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 0 178 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 182 0 3 0 182 0 5 0 182 0 8 0 182 0 9 0 182 0 11 0 182 0 12 0 182 0 14 0 182 0 20 0 182 0 21 0 182 0 22 0 182 0 24 0 182 0 27 0 182 0 30 0 182 0 35 0 182 0 38 0 182 0 39 0 182 0 41 0 182 0 55 0 182 0 56 3 73 0 58 0 182 0 75 0 182 0 81 0 182 0 82 0 182 0 84 0 182 0 85 0 182 0 87 0 182 0 88 0 182 0 90 0 182 0 91 0 182 0 99 0 182 0 101 0 182 0 103 0 182 0 105 0 182 1 8] 
#[1 0 186 0 3 0 186 0 5 0 186 0 8 0 186 0 9 0 186 0 11 0 186 0 12 0 186 0 14 0 186 0 20 0 186 0 21 0 186 0 22 0 186 0 24 0 186 0 27 0 186 0 30 0 186 0 35 0 186 0 38 0 186 0 39 0 186 0 41 0 186 0 51 0 186 0 55 0 186 0 56 0 186 0 58 3 77 0 65 0 186 0 75 0 186 0 81 0 186 0 82 0 186 0 84 0 186 0 85 0 186 0 87 0 186 0 88 0 186 0 90 0 186 0 91 0 186 0 99 0 186 0 101 0 186 0 103 0 186 0 105 0 186 1 8] 
#[1 0 190 0 3 0 190 0 5 0 190 0 8 0 190 0 9 0 190 0 11 0 190 0 12 0 190 0 14 0 190 0 20 0 190 0 21 0 190 0 22 0 190 0 24 0 190 0 27 0 190 0 30 0 190 0 35 0 190 0 38 0 190 0 39 3 81 0 40 0 190 0 41 0 190 0 51 0 190 0 55 0 190 0 56 0 190 0 58 0 190 0 65 0 190 0 75 0 190 0 81 0 190 0 82 0 190 0 84 0 190 0 85 0 190 0 87 0 190 0 88 0 190 0 90 0 190 0 91 0 190 0 99 0 190 0 101 0 190 0 103 0 190 0 105 0 190 1 8] 
#[0 0 194 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 65 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[1 3 85 0 1 0 198 0 3 0 198 0 5 0 198 0 8 0 198 0 9 0 198 0 11 0 198 0 12 0 198 0 14 0 198 0 20 0 198 0 21 0 198 0 22 0 198 0 24 3 89 0 25 0 198 0 27 3 93 0 28 3 97 0 29 0 198 0 30 3 101 0 31 3 105 0 32 3 109 0 33 0 198 0 35 0 198 0 38 0 198 0 39 0 198 0 40 0 198 0 41 0 198 0 51 0 198 0 55 0 198 0 56 0 198 0 58 3 113 0 60 3 117 0 61 3 121 0 64 0 198 0 65 0 198 0 75 0 198 0 81 0 198 0 82 0 198 0 84 0 198 0 85 0 198 0 87 0 198 0 88 0 198 0 90 0 198 0 91 0 198 0 99 0 198 0 101 0 198 0 103 0 198 0 105 3 125 0 192 0 198 1 8] 
#[1 0 202 0 1 0 202 0 2 0 202 0 3 0 202 0 4 0 202 0 5 0 202 0 6 0 202 0 7 0 202 0 8 0 202 0 9 0 202 0 10 0 202 0 11 0 202 0 12 0 202 0 13 0 202 0 14 0 202 0 16 0 202 0 18 0 202 0 19 0 202 0 20 0 202 0 21 0 202 0 22 0 202 0 24 0 202 0 25 0 202 0 26 0 202 0 27 0 202 0 28 0 202 0 29 0 202 0 30 0 202 0 31 0 202 0 32 0 202 0 33 0 202 0 34 0 202 0 35 0 202 0 37 0 202 0 38 0 202 0 39 0 202 0 40 0 202 0 41 0 202 0 51 0 202 0 55 0 202 0 56 0 202 0 58 0 202 0 60 0 202 0 61 0 202 0 64 0 202 0 65 0 11 0 74 0 202 0 75 0 202 0 81 0 202 0 82 0 202 0 84 0 202 0 85 0 202 0 87 0 202 0 88 0 202 0 90 0 202 0 91 0 202 0 99 0 202 0 100 0 202 0 101 0 202 0 102 0 202 0 103 0 202 0 105 0 202 1 8] 
#[1 0 206 0 1 0 206 0 2 0 206 0 3 0 206 0 4 0 206 0 5 0 206 0 6 0 206 0 7 0 206 0 8 0 206 0 9 0 206 0 10 0 206 0 11 0 206 0 12 0 206 0 13 0 206 0 14 0 206 0 16 0 206 0 18 0 206 0 19 0 206 0 20 0 206 0 21 0 206 0 22 0 206 0 24 0 206 0 25 0 206 0 26 0 206 0 27 0 206 0 28 0 206 0 29 0 206 0 30 0 206 0 31 0 206 0 32 0 206 0 33 0 206 0 34 0 206 0 35 0 15 0 37 0 206 0 38 0 206 0 39 0 206 0 40 0 206 0 41 0 206 0 51 0 206 0 55 0 206 0 56 0 206 0 58 0 206 0 60 0 206 0 61 0 206 0 64 0 206 0 65 0 206 0 74 0 206 0 75 0 206 0 81 0 206 0 82 0 206 0 84 0 206 0 85 0 206 0 87 0 206 0 88 0 206 0 90 0 206 0 91 0 206 0 99 0 206 0 100 0 206 0 101 0 206 0 102 0 206 0 103 0 206 0 105 0 206 1 8] 
#[1 0 210 0 1 0 210 0 2 0 210 0 3 0 19 0 4 0 210 0 5 0 210 0 6 0 210 0 7 0 210 0 8 0 210 0 9 0 210 0 10 0 210 0 11 0 210 0 12 0 210 0 13 0 210 0 14 0 210 0 16 0 210 0 18 0 210 0 19 0 210 0 20 0 210 0 21 0 210 0 22 0 210 0 24 0 210 0 25 0 210 0 26 0 210 0 27 0 210 0 28 0 210 0 29 0 210 0 30 0 210 0 31 0 210 0 32 0 210 0 33 0 210 0 34 0 210 0 35 0 210 0 37 0 210 0 38 0 210 0 39 0 210 0 40 0 210 0 41 0 210 0 51 0 210 0 55 0 210 0 56 0 210 0 58 0 210 0 60 0 210 0 61 0 210 0 64 0 210 0 65 0 210 0 74 0 210 0 75 0 210 0 81 0 210 0 82 0 210 0 84 0 210 0 85 0 210 0 87 0 210 0 88 0 210 0 90 0 210 0 91 0 210 0 99 0 210 0 100 0 210 0 101 0 210 0 102 0 210 0 103 0 210 0 105 0 210 1 8] 
#[1 0 214 0 1 0 214 0 2 0 214 0 3 0 214 0 4 0 214 0 5 0 214 0 6 0 214 0 7 0 214 0 8 0 214 0 9 0 214 0 10 0 214 0 11 0 214 0 12 0 214 0 13 0 214 0 14 0 214 0 16 0 214 0 18 0 214 0 19 0 214 0 20 0 214 0 21 0 214 0 22 0 214 0 24 0 214 0 25 0 23 0 26 0 214 0 27 0 214 0 28 0 214 0 29 0 214 0 30 0 214 0 31 0 214 0 32 0 214 0 33 0 27 0 34 0 214 0 35 0 214 0 37 0 214 0 38 0 214 0 39 0 214 0 40 0 214 0 41 0 214 0 51 0 214 0 55 0 214 0 56 0 214 0 58 0 214 0 60 0 214 0 61 0 214 0 64 0 214 0 65 0 214 0 74 0 214 0 75 0 214 0 81 0 214 0 82 0 214 0 84 0 214 0 85 0 214 0 87 0 214 0 88 0 214 0 90 0 214 0 91 0 214 0 99 0 214 0 100 0 214 0 101 0 214 0 102 0 214 0 103 0 214 0 105 0 214 1 8] 
#[1 0 218 0 1 0 218 0 2 0 218 0 3 0 218 0 4 0 218 0 5 0 218 0 6 0 218 0 7 0 218 0 8 0 218 0 9 0 31 0 10 0 218 0 11 0 218 0 12 0 35 0 13 0 218 0 14 0 218 0 16 0 218 0 18 0 218 0 19 0 218 0 20 0 218 0 21 0 218 0 22 0 218 0 24 0 218 0 25 0 218 0 26 0 218 0 27 0 218 0 28 0 218 0 29 0 218 0 30 0 218 0 31 0 218 0 32 0 218 0 33 0 218 0 34 0 218 0 35 0 218 0 37 0 218 0 38 0 218 0 39 0 218 0 40 0 218 0 41 0 218 0 51 0 218 0 55 0 218 0 56 0 218 0 58 0 218 0 60 0 218 0 61 0 218 0 64 0 218 0 65 0 218 0 74 0 218 0 75 0 218 0 81 0 218 0 82 0 218 0 84 0 218 0 85 0 218 0 87 0 218 0 88 0 218 0 90 0 218 0 91 0 218 0 99 0 218 0 100 0 218 0 101 0 218 0 102 0 218 0 103 0 218 0 105 0 218 1 8] 
#[1 0 222 0 1 0 39 0 2 0 222 0 3 0 222 0 4 0 222 0 5 0 43 0 6 0 222 0 7 0 222 0 8 0 222 0 9 0 222 0 10 0 222 0 11 0 222 0 12 0 222 0 13 0 222 0 14 0 222 0 16 0 47 0 18 0 51 0 19 0 222 0 20 0 222 0 21 0 222 0 22 0 222 0 24 0 222 0 25 0 222 0 26 0 222 0 27 0 222 0 28 0 222 0 29 0 222 0 30 0 222 0 31 0 222 0 32 0 222 0 33 0 222 0 34 0 222 0 35 0 222 0 37 0 222 0 38 0 222 0 39 0 222 0 40 0 222 0 41 0 222 0 51 0 222 0 55 0 222 0 56 0 222 0 58 0 222 0 60 0 222 0 61 0 222 0 64 0 222 0 65 0 222 0 74 0 222 0 75 0 222 0 81 0 222 0 82 0 222 0 84 0 222 0 85 0 222 0 87 0 222 0 88 0 222 0 90 0 222 0 91 0 222 0 99 0 222 0 100 0 222 0 101 0 222 0 102 0 222 0 103 0 222 0 105 0 222 1 8] 
#[0 0 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 230 0 1 0 230 0 2 0 230 0 3 0 230 0 4 0 230 0 5 0 230 0 6 0 55 0 7 0 230 0 8 0 230 0 9 0 230 0 10 0 230 0 11 0 230 0 12 0 230 0 13 0 230 0 14 0 230 0 16 0 230 0 18 0 230 0 19 0 230 0 20 0 230 0 21 0 230 0 22 0 230 0 24 0 230 0 25 0 230 0 26 0 230 0 27 0 230 0 28 0 230 0 29 0 230 0 30 0 230 0 31 0 230 0 32 0 230 0 33 0 230 0 34 0 230 0 35 0 230 0 37 0 230 0 38 0 230 0 39 0 230 0 40 0 230 0 41 0 230 0 51 0 230 0 55 0 230 0 56 0 230 0 58 0 230 0 60 0 230 0 61 0 230 0 64 0 230 0 65 0 230 0 74 0 230 0 75 0 230 0 81 0 230 0 82 0 230 0 84 0 230 0 85 0 230 0 87 0 230 0 88 0 230 0 90 0 230 0 91 0 230 0 99 0 230 0 100 0 230 0 101 0 230 0 102 0 230 0 103 0 230 0 105 0 230 1 8] 
#[1 0 234 0 1 0 234 0 2 0 234 0 3 0 234 0 4 0 234 0 5 0 234 0 6 0 234 0 7 0 234 0 8 0 234 0 9 0 234 0 10 0 234 0 11 0 234 0 12 0 234 0 13 0 234 0 14 0 59 0 16 0 234 0 18 0 234 0 19 0 234 0 20 0 234 0 21 0 234 0 22 0 234 0 24 0 234 0 25 0 234 0 26 0 234 0 27 0 234 0 28 0 234 0 29 0 234 0 30 0 234 0 31 0 234 0 32 0 234 0 33 0 234 0 34 0 234 0 35 0 234 0 37 0 234 0 38 0 234 0 39 0 234 0 40 0 234 0 41 0 234 0 51 0 234 0 55 0 234 0 56 0 234 0 58 0 234 0 60 0 234 0 61 0 234 0 64 0 234 0 65 0 234 0 74 0 234 0 75 0 234 0 81 0 234 0 82 0 234 0 84 0 234 0 85 0 234 0 87 0 234 0 88 0 234 0 90 0 234 0 91 0 234 0 99 0 63 0 100 0 234 0 101 0 67 0 102 0 234 0 103 0 234 0 105 0 234 1 8] 
#[0 0 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 242 0 1 0 242 0 2 0 242 0 3 0 242 0 4 0 242 0 5 0 242 0 6 0 242 0 7 0 242 0 8 0 242 0 9 0 242 0 10 0 242 0 11 0 242 0 12 0 242 0 13 0 242 0 14 0 242 0 16 0 242 0 18 0 242 0 19 0 242 0 20 0 242 0 21 0 242 0 22 0 242 0 24 0 242 0 25 0 242 0 26 0 242 0 27 0 242 0 28 0 242 0 29 0 242 0 30 0 242 0 31 0 242 0 32 0 242 0 33 0 242 0 34 0 242 0 35 0 242 0 37 0 242 0 38 0 242 0 39 0 242 0 40 0 242 0 41 0 242 0 51 0 242 0 55 0 242 0 56 0 242 0 58 0 242 0 60 0 242 0 61 0 242 0 64 0 242 0 65 0 242 0 74 0 242 0 75 0 153 0 78 0 157 0 79 0 10 0 80 0 242 0 81 0 242 0 82 0 14 0 83 0 242 0 84 0 242 0 85 0 18 0 86 0 242 0 87 0 242 0 88 0 22 0 89 0 242 0 90 0 242 0 91 0 242 0 99 0 242 0 100 0 242 0 101 0 242 0 102 0 242 0 103 0 242 0 105 3 189 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 0 242 1 8] 
#[0 0 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 193 0 80] 
#[0 3 197 0 83] 
#[0 3 201 0 86] 
#[0 3 205 0 89] 
#[0 0 250 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 55 0 56 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[0 0 254 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 0 101 0 103 0 105 1 8] 
#[0 1 2 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 55 0 56 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[1 1 6 0 1 1 6 0 2 1 6 0 3 1 6 0 4 1 6 0 5 1 6 0 6 1 6 0 7 1 6 0 8 1 6 0 9 1 6 0 10 1 6 0 11 1 6 0 12 1 6 0 13 1 6 0 14 1 6 0 16 1 6 0 18 1 6 0 19 1 6 0 20 1 6 0 21 1 6 0 22 3 209 0 23 1 6 0 24 1 6 0 25 1 6 0 26 1 6 0 27 1 6 0 28 1 6 0 29 1 6 0 30 1 6 0 31 1 6 0 32 1 6 0 33 1 6 0 34 1 6 0 35 1 6 0 37 1 6 0 38 1 6 0 39 1 6 0 40 1 6 0 41 1 6 0 55 1 6 0 56 1 6 0 58 1 6 0 60 1 6 0 61 1 6 0 64 1 6 0 65 1 6 0 74 1 6 0 75 1 6 0 81 1 6 0 82 1 6 0 84 1 6 0 85 1 6 0 87 1 6 0 88 1 6 0 90 1 6 0 91 1 6 0 99 1 6 0 100 1 6 0 101 1 6 0 102 1 6 0 103 1 6 0 105 1 6 1 8] 
#[1 1 10 0 3 1 10 0 5 1 10 0 8 1 10 0 9 1 10 0 11 3 213 0 12 1 10 0 14 1 10 0 20 1 10 0 21 1 10 0 22 1 10 0 24 1 10 0 27 1 10 0 30 1 10 0 35 1 10 0 38 1 10 0 75 1 10 0 99 3 217 0 137 3 221 0 138 1 10 1 8] 
#[0 1 14 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 1 18 0 24 0 99 1 8] 
#[0 3 225 0 67] 
#[0 0 0 1 8] 
#[1 1 22 0 99 3 229 0 111 1 22 1 8] 
#[1 3 233 0 12 1 26 0 22 1 26 0 24 1 26 0 30 1 26 0 99 1 26 0 101 1 26 0 103 1 26 0 105 3 217 0 137 3 237 0 138 3 241 0 227 1 26 1 8] 
#[0 0 0 1 8] 
#[0 0 0 1 8] 
#[0 1 30 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 7 1 8] 
#[0 1 34 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 7 1 8] 
#[0 1 38 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 1 42 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 1 46 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 0 101 0 103 0 105 1 8] 
#[0 1 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 1 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 1 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 0 58 0 12 0 16 0 22 0 24 0 30 0 41 0 59 0 99 0 100 0 101 1 8] 
#[1 3 245 0 16 1 58 0 99 3 249 0 100 3 253 0 113] 
#[0 1 62 0 12 0 16 0 24 0 41 0 59 0 99 0 100 1 8] 
#[0 4 1 0 39] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 4 5 0 222 4 5 0 228 4 5 0 229 1 141 0 230 4 9 1 2] 
#[0 1 66 0 24 0 99 1 8] 
#[1 4 13 0 12 1 70 0 24 1 70 0 99 1 70 1 8] 
#[0 4 17 0 77] 
#[1 1 74 0 1 1 74 0 2 1 74 0 3 1 74 0 4 1 74 0 5 1 74 0 6 1 74 0 7 1 74 0 8 1 74 0 9 1 74 0 10 1 74 0 11 1 74 0 12 1 74 0 13 1 74 0 14 0 71 0 16 1 74 0 18 1 74 0 19 1 74 0 20 1 74 0 21 1 74 0 22 1 74 0 24 1 74 0 25 1 74 0 26 1 74 0 27 1 74 0 28 1 74 0 29 1 74 0 30 1 74 0 31 1 74 0 32 1 74 0 33 1 74 0 34 1 74 0 35 1 74 0 37 1 74 0 38 1 74 0 39 1 74 0 40 1 74 0 41 1 74 0 51 1 74 0 55 1 74 0 56 1 74 0 58 1 74 0 60 1 74 0 61 1 74 0 64 1 74 0 65 1 74 0 74 1 74 0 75 1 74 0 81 1 74 0 82 1 74 0 84 1 74 0 85 1 74 0 87 1 74 0 88 1 74 0 90 1 74 0 91 1 74 0 99 0 75 0 100 1 74 0 101 0 79 0 102 1 74 0 103 1 74 0 105 1 74 1 8] 
#[1 4 21 0 22 4 25 0 100] 
#[1 4 29 0 100 4 33 0 117] 
#[1 4 37 0 12 1 26 0 24 1 26 0 60 1 26 0 99 4 41 0 227 1 26 1 8] 
#[0 1 78 0 24 0 99 1 8] 
#[1 1 82 0 24 4 45 0 60 1 82 0 99 1 82 1 8] 
#[0 4 49 0 60] 
#[0 1 86 0 16 0 59 0 77] 
#[0 4 53 0 59] 
#[1 4 57 0 16 1 90 0 59 1 213 0 77 4 61 0 161 4 61 0 230] 
#[1 3 245 0 16 1 94 0 59] 
#[0 1 98 0 12 0 24 0 99 1 8] 
#[1 4 65 0 12 1 102 0 24 1 102 0 99 1 102 1 8] 
#[0 4 69 0 22] 
#[0 1 106 0 12 0 24 0 99 1 8] 
#[1 4 73 0 12 1 110 0 24 1 110 0 99 1 110 1 8] 
#[1 1 114 0 12 3 245 0 16 1 114 0 24 4 77 0 41 1 114 0 99 1 114 1 8] 
#[1 1 118 0 12 1 118 0 22 1 213 0 77 1 118 0 101 4 81 0 230] 
#[1 1 213 0 77 4 85 0 230] 
#[1 1 213 0 77 2 65 0 100 4 89 0 126 4 93 0 127 4 89 0 230] 
#[0 4 97 0 22] 
#[0 1 122 0 22 0 101] 
#[1 4 105 0 12 1 26 0 22 1 26 0 101 4 105 0 227] 
#[1 1 126 0 12 1 126 0 22 1 126 0 101 4 109 0 120] 
#[1 4 113 0 12 1 26 0 22 1 26 0 101 4 117 0 227] 
#[1 1 130 0 12 0 83 0 22 4 121 0 30 1 130 0 101 4 125 0 125 4 129 0 204] 
#[0 1 134 0 12 0 22 0 30 0 101] 
#[0 1 138 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 65 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[1 4 133 0 12 1 142 0 24 4 137 0 56 1 142 0 99 4 141 0 149 1 142 1 8] 
#[0 1 146 0 22 0 24 0 30 0 99 0 101 1 8] 
#[0 1 150 0 24 0 99 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 4 153 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 4 157 0 22] 
#[1 4 161 0 12 4 165 0 22] 
#[0 1 154 0 12 0 22] 
#[1 1 158 0 12 1 158 0 22 4 169 0 41] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 54 0 22 0 54 0 24 0 54 0 30 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 54 0 99 0 169 0 100 0 54 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 2 105 0 231 1 169 0 232 4 173 0 233 0 54 1 8] 
#[0 1 162 0 22 0 24 0 30 0 99 0 101 1 8] 
#[0 1 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 4 177 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 1 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 1 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 181 0 101] 
#[1 0 254 0 12 4 185 0 55 0 254 0 101 4 189 0 255] 
#[0 1 178 0 101] 
#[0 1 182 0 101] 
#[0 4 193 0 101] 
#[0 1 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 197 0 103] 
#[0 1 190 0 103] 
#[1 0 254 0 12 4 201 0 55 0 254 0 103 4 205 0 252] 
#[0 1 194 0 103] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 4 209 0 222 4 209 0 228 4 209 0 229 1 141 0 230] 
#[0 1 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 254 0 12 4 213 0 22 4 185 0 55 0 254 0 105 4 189 0 255] 
#[0 1 202 0 105] 
#[0 4 217 0 105] 
#[0 1 206 0 105] 
#[0 4 221 0 105] 
#[0 1 210 0 105] 
#[1 1 214 0 12 1 214 0 105 4 225 0 239] 
#[0 1 218 0 12 0 105] 
#[0 4 229 0 48] 
#[0 4 233 0 77] 
#[0 4 237 0 77] 
#[0 1 222 0 36 0 43 0 46 0 48] 
#[0 1 226 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 230 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 234 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 238 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 242 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 246 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 250 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 1 254 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 2 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 4 241 0 135 4 241 0 136 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 4 241 1 4] 
#[0 2 6 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 10 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 14 0 6 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 18 0 24 0 99 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 4 253 0 135 4 253 0 136 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 4 253 1 4] 
#[0 5 1 0 30] 
#[1 2 22 0 6 2 22 0 10 2 22 0 13 2 22 0 17 2 22 0 36 2 22 0 39 2 22 0 42 2 22 0 43 2 22 0 44 2 22 0 45 2 22 0 46 2 22 0 47 2 22 0 48 2 22 0 49 2 22 0 50 2 22 0 51 2 22 0 52 2 22 0 53 2 22 0 54 2 22 0 55 2 22 0 56 2 22 0 57 2 22 0 58 2 22 0 59 2 22 0 62 2 22 0 64 2 22 0 66 2 22 0 68 2 22 0 69 2 22 0 70 2 22 0 71 2 22 0 72 2 22 0 73 2 22 0 76 2 22 0 77 2 22 0 78 2 22 0 79 2 22 0 80 2 22 0 83 2 22 0 86 2 22 0 89 2 22 0 92 0 87 0 99 2 22 0 100 2 22 0 102 2 22 0 104 2 22 1 5 2 22 1 7 2 22 1 8] 
#[0 2 26 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 2 30 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 9 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 13 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 17 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 2 34 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 38 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 42 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 46 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 50 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 54 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 58 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 62 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[1 2 66 0 10 2 66 0 13 2 66 0 17 2 66 0 39 2 66 0 44 5 21 0 64 2 66 0 76 2 66 0 77 2 66 0 78 2 66 0 79 2 66 0 80 2 66 0 83 2 66 0 86 2 66 0 89 2 66 0 92 2 66 0 100 2 66 0 102 2 66 0 104] 
#[0 5 25 0 60] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 29 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 33 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 37 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 41 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 45 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 49 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 53 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 57 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 61 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 65 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 69 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 73 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 77 0 199 5 77 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 5 81 0 77] 
#[1 5 85 0 6 5 89 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 5 93 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 97 0 222 5 97 0 228 5 97 0 229 1 141 0 230 5 109 0 236 5 105 0 248 5 109 0 250] 
#[1 0 33 0 10 0 37 0 13 5 113 0 16 0 41 0 17 5 117 0 22 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 129 0 222 5 121 0 223 5 125 0 224 5 129 0 228 5 129 0 229 1 141 0 230] 
#[0 2 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 133 0 222 5 133 0 228 5 133 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 137 0 222 5 137 0 228 5 137 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 141 0 222 5 141 0 228 5 141 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 145 0 222 5 145 0 228 5 145 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 149 0 222 5 149 0 228 5 149 0 229 1 141 0 230] 
#[1 2 74 0 3 2 74 0 5 0 29 0 6 2 74 0 8 2 74 0 9 0 33 0 10 2 74 0 11 0 37 0 13 2 74 0 14 0 41 0 17 2 74 0 20 2 74 0 21 2 74 0 22 2 74 0 24 2 74 0 27 2 74 0 30 2 74 0 35 2 74 0 38 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 2 74 0 75 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 2 74 0 99 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 153 0 222 5 153 0 228 5 153 0 229 1 141 0 230 5 153 0 232 2 74 1 8] 
#[0 2 78 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 0 101 0 103 0 105 1 8] 
#[1 1 26 0 3 1 26 0 5 1 26 0 8 1 26 0 9 1 26 0 11 3 233 0 12 1 26 0 14 1 26 0 20 1 26 0 21 1 26 0 22 1 26 0 24 1 26 0 27 1 26 0 30 1 26 0 35 1 26 0 38 1 26 0 75 1 26 0 99 5 157 0 137 5 161 0 227 1 26 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 54 0 24 5 165 0 34 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 54 0 99 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 2 105 0 231 1 169 0 232 5 169 0 233 0 54 1 8] 
#[1 5 173 0 99 2 82 1 8] 
#[1 2 86 0 3 2 86 0 5 0 29 0 6 2 86 0 8 2 86 0 9 0 33 0 10 2 86 0 11 0 37 0 13 2 86 0 14 0 41 0 17 2 86 0 20 2 86 0 21 2 86 0 22 2 86 0 24 2 86 0 27 2 86 0 30 2 86 0 35 2 86 0 38 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 2 86 0 75 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 2 86 0 99 0 169 0 100 2 86 0 101 0 173 0 102 2 86 0 103 0 177 0 104 2 86 0 105 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 153 0 222 5 153 0 228 5 153 0 229 1 141 0 230 5 153 0 232 2 86 1 8] 
#[1 3 233 0 12 1 26 0 22 1 26 0 24 1 26 0 30 1 26 0 99 1 26 0 101 1 26 0 103 1 26 0 105 5 157 0 137 5 177 0 227 1 26 1 8] 
#[0 2 90 0 22 0 24 0 30 0 99 0 101 0 103 0 105 1 8] 
#[0 5 181 0 77] 
#[1 5 85 0 6 5 89 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 5 185 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 97 0 222 5 97 0 228 5 97 0 229 1 141 0 230 5 109 0 236 5 189 0 248 5 109 0 250] 
#[0 5 193 0 99] 
#[0 2 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 5 197 0 12 2 98 0 39] 
#[0 2 102 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 201 0 222 5 201 0 228 5 201 0 229 1 141 0 230] 
#[1 4 29 0 100 5 205 0 117] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 5 209 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 5 213 0 63 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 5 217 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 229 0 222 5 229 0 228 5 229 0 229 1 141 0 230 5 225 0 244 5 229 0 247] 
#[1 2 57 0 6 2 61 0 7 1 213 0 77 2 65 0 100 0 42 0 101 5 233 0 118 2 73 0 119 2 77 0 121 2 81 0 122 2 85 0 124 2 89 0 126 2 89 0 230] 
#[1 5 237 0 15 2 106 0 22 5 241 0 116] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 2 86 0 24 0 49 0 39 0 61 0 44 2 86 0 60 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 2 86 0 99 0 169 0 100 0 173 0 102 0 177 0 104 2 1 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 245 0 226 1 97 0 230 2 86 1 8] 
#[0 2 110 0 24 0 60 0 99 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 249 0 165 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 237 0 222 1 237 0 228 1 237 0 229 1 141 0 230] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 5 253 0 136 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232] 
#[1 6 1 0 6 6 5 0 77 6 9 0 100 6 13 0 155 6 17 0 156 6 21 0 158 6 25 0 159] 
#[0 2 114 0 16 0 59 0 77] 
#[1 3 245 0 16 2 118 0 59] 
#[0 6 29 0 77] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 6 33 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 1 213 0 77 6 37 0 157 2 53 0 161 2 53 0 230] 
#[0 6 41 0 77] 
#[1 2 122 0 12 0 91 0 22 2 122 0 101 6 45 0 204] 
#[1 2 126 0 12 0 95 0 22 2 126 0 101 6 49 0 204] 
#[1 6 53 0 12 1 26 0 101 6 57 0 227] 
#[0 6 61 0 101] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 65 0 222 6 65 0 228 6 65 0 229 1 141 0 230] 
#[0 2 86 0 22 0 101] 
#[0 2 130 0 22 0 101] 
#[1 6 69 0 12 1 26 0 22 1 26 0 101 6 73 0 123 6 77 0 227] 
#[1 2 57 0 6 2 61 0 7 2 86 0 22 1 213 0 77 2 65 0 100 2 86 0 101 6 81 0 119 2 77 0 121 2 81 0 122 2 85 0 124 2 89 0 126 2 89 0 230] 
#[0 2 134 0 22 0 101] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 85 0 222 6 85 0 228 6 85 0 229 1 141 0 230] 
#[0 2 138 0 12 0 22 0 101] 
#[1 2 142 0 12 2 142 0 22 4 121 0 30 2 142 0 101 6 89 0 125] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 93 0 222 6 93 0 228 6 93 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 97 0 222 6 97 0 228 6 97 0 229 1 141 0 230] 
#[0 2 146 0 24 0 99 1 8] 
#[0 6 101 1 6] 
#[0 2 150 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 6 105 0 52 6 109 0 54 6 113 0 176 6 117 0 177 6 121 0 181] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 6 125 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 6 129 0 180 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 2 129 0 222 2 129 0 228 2 129 0 229 1 141 0 230] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 6 133 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 6 137 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 2 154 0 22 0 24 0 30 0 99 0 101 1 8] 
#[0 2 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 1 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 141 0 226 1 97 0 230] 
#[0 2 166 0 12 0 101 0 105] 
#[0 2 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 1 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 145 0 226 1 97 0 230] 
#[0 2 178 0 103] 
#[0 2 182 0 12 0 105] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 149 0 222 6 149 0 228 6 149 0 229 1 141 0 230] 
#[0 2 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 6 153 0 12 1 26 0 105 6 157 0 227 6 161 0 238] 
#[0 6 165 0 77] 
#[1 6 169 0 22 6 173 0 100] 
#[1 4 29 0 100 6 177 0 117] 
#[1 2 194 0 22 2 194 0 24 2 194 0 30 2 194 0 99 6 181 0 134 2 194 1 8] 
#[0 2 198 0 22 0 24 0 30 0 99 1 8] 
#[0 2 202 0 22 0 24 0 30 0 99 1 8] 
#[0 2 206 0 24 0 99 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 6 185 0 135 6 185 0 136 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 6 185 1 4] 
#[0 2 210 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 6 189 0 51] 
#[0 2 214 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 51 0 55 0 56 0 58 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[0 2 218 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 51 0 55 0 56 0 58 0 65 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[0 2 222 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 226 0 10 0 13 0 17 0 39 0 44 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 2 230 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 65 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[0 2 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 2 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 3 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 193 0 222 6 193 0 228 6 193 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 197 0 222 6 197 0 228 6 197 0 229 1 141 0 230] 
#[0 3 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 3 34 0 12 6 201 0 30 4 185 0 55 3 34 0 101 4 189 0 255] 
#[0 3 38 0 12 0 101] 
#[0 6 205 0 101] 
#[1 6 209 0 12 1 26 0 101 6 213 0 227] 
#[0 6 217 0 16] 
#[1 0 33 0 10 3 42 0 12 0 37 0 13 0 41 0 17 6 221 0 22 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 3 42 0 103 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 6 229 0 222 6 225 0 225 6 229 0 228 6 229 0 229 1 141 0 230] 
#[0 6 233 0 103] 
#[1 6 237 0 12 1 26 0 103 6 241 0 227] 
#[1 3 46 0 12 6 245 0 22 3 46 0 103] 
#[1 3 50 0 81 3 50 0 82 6 249 0 208] 
#[1 3 54 0 84 3 54 0 85 6 253 0 210] 
#[1 3 58 0 87 3 58 0 88 7 1 0 212] 
#[1 3 62 0 90 3 62 0 91 7 5 0 214] 
#[0 3 66 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 55 0 56 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[0 3 70 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 0 101 0 103 0 105 1 8] 
#[0 3 74 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 0 101 0 103 0 105 1 8] 
#[0 3 78 0 3 0 5 0 8 0 9 0 11 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 75 0 99 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 169 0 222 1 169 0 228 1 169 0 229 1 141 0 230 7 9 0 231 1 169 0 232] 
#[0 3 82 0 24 0 99 1 8] 
#[0 3 86 0 99 1 8] 
#[0 3 90 0 22 0 24 0 30 0 99 0 101 0 103 0 105 1 8] 
#[0 3 94 0 12 0 16 0 24 0 41 0 59 0 99 0 100 1 8] 
#[0 3 98 0 99] 
#[0 7 13 0 101] 
#[0 3 102 0 36 0 43 0 46 0 48] 
#[0 3 106 0 10 0 13 0 17 0 39 0 44 0 62 0 64 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104] 
#[0 3 110 0 24 0 99 1 8] 
#[1 5 237 0 15 2 106 0 22 7 17 0 116] 
#[0 3 114 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 7 21 0 30] 
#[0 7 25 0 22] 
#[0 3 118 0 12 0 101] 
#[0 7 29 0 101] 
#[1 3 122 0 12 3 122 0 101 7 33 0 246] 
#[0 7 37 0 101] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 7 41 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 7 45 0 22] 
#[0 3 126 0 24 0 60 0 99 1 8] 
#[0 3 130 0 24 0 99 1 8] 
#[0 7 49 0 22] 
#[0 3 134 0 24 0 99 1 8] 
#[1 3 138 0 12 3 138 0 24 7 53 0 41 3 138 0 99 3 138 0 101 3 138 1 8] 
#[1 6 5 0 77 6 17 0 156 7 57 0 158 6 25 0 159] 
#[0 3 142 0 24 0 99 1 8] 
#[0 3 146 0 12 0 24 0 99 0 101 1 8] 
#[0 3 150 0 24 0 99 1 8] 
#[1 7 61 0 12 1 26 0 24 1 26 0 99 1 26 0 101 7 65 0 227 1 26 1 8] 
#[0 3 154 0 12 0 24 0 99 1 8] 
#[1 3 158 0 6 3 158 0 10 3 158 0 13 3 158 0 17 3 158 0 36 3 158 0 39 3 158 0 42 3 158 0 43 3 158 0 44 3 158 0 45 3 158 0 46 3 158 0 47 3 158 0 48 3 158 0 49 3 158 0 50 3 158 0 51 3 158 0 53 3 158 0 55 3 158 0 56 3 158 0 57 3 158 0 58 3 158 0 59 3 158 0 62 3 158 0 64 3 158 0 66 3 158 0 68 3 158 0 69 3 158 0 70 3 158 0 71 3 158 0 72 3 158 0 73 3 158 0 76 3 158 0 77 3 158 0 78 3 158 0 79 3 158 0 80 3 158 0 83 3 158 0 86 3 158 0 89 3 158 0 92 3 158 0 99 3 158 0 100 3 158 0 102 3 158 0 104 7 69 0 170 3 158 1 5 3 158 1 7 3 158 1 8] 
#[0 3 162 0 12 0 24 0 99 1 8] 
#[0 3 166 0 12 0 24 0 99 1 8] 
#[0 3 170 0 12 0 22 0 101] 
#[0 3 174 0 12 0 22 0 101] 
#[1 1 213 0 77 2 65 0 100 2 86 0 101 4 89 0 126 7 73 0 127 4 89 0 230] 
#[0 3 178 0 101] 
#[0 3 182 0 12 0 22 0 30 0 101] 
#[0 3 186 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 55 0 56 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[1 2 61 0 7 2 86 0 22 1 213 0 77 2 65 0 100 2 86 0 101 7 77 0 121 7 81 0 124 2 89 0 126 2 89 0 230] 
#[0 3 190 0 12 0 22 0 101] 
#[0 3 194 0 22 0 101] 
#[0 3 198 0 22 0 101] 
#[0 3 202 0 12 0 22 0 101] 
#[0 3 206 0 12 0 22 0 101] 
#[1 7 85 0 12 3 210 0 24 3 210 0 99 3 210 1 8] 
#[0 3 214 0 24 0 99 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 45 0 36 0 49 0 39 0 53 0 42 0 57 0 43 0 61 0 44 0 65 0 45 0 69 0 46 0 73 0 47 0 77 0 48 0 81 0 49 0 85 0 53 0 89 0 55 0 93 0 56 0 97 0 57 0 101 0 58 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 129 0 70 0 133 0 71 0 137 0 72 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 0 185 0 112 0 189 0 114 7 89 0 115 7 89 0 128 7 89 0 129 7 89 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 7 89 0 168 7 89 0 169 7 89 0 173 7 89 0 174 7 89 0 175 7 89 0 178 7 93 0 183 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 7 89 0 243 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 3 218 0 22 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 97 0 222 7 97 0 228 7 97 0 229 1 141 0 230] 
#[0 7 101 0 22] 
#[0 3 222 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 3 226 0 6 3 226 0 10 3 226 0 13 3 226 0 17 3 226 0 36 3 226 0 39 3 226 0 42 3 226 0 43 3 226 0 44 3 226 0 45 3 226 0 46 3 226 0 47 3 226 0 48 3 226 0 49 7 105 0 51 6 105 0 52 3 226 0 53 3 226 0 54 3 226 0 55 3 226 0 56 3 226 0 57 3 226 0 58 3 226 0 59 3 226 0 62 3 226 0 64 3 226 0 66 3 226 0 68 3 226 0 69 3 226 0 70 3 226 0 71 3 226 0 72 3 226 0 73 3 226 0 76 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 80 3 226 0 83 3 226 0 86 3 226 0 89 3 226 0 92 3 226 0 99 3 226 0 100 3 226 0 102 3 226 0 104 7 109 0 172 7 113 0 181 3 226 1 5 3 226 1 7 3 226 1 8] 
#[0 7 117 0 22] 
#[1 3 226 0 6 3 226 0 10 3 226 0 13 3 226 0 17 3 226 0 36 3 226 0 39 3 226 0 42 3 226 0 43 3 226 0 44 3 226 0 45 3 226 0 46 3 226 0 47 3 226 0 48 3 226 0 49 7 105 0 51 3 226 0 53 3 226 0 55 3 226 0 56 3 226 0 57 3 226 0 58 3 226 0 59 3 226 0 62 3 226 0 64 3 226 0 66 3 226 0 68 3 226 0 69 3 226 0 70 3 226 0 71 3 226 0 72 3 226 0 73 3 226 0 76 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 80 3 226 0 83 3 226 0 86 3 226 0 89 3 226 0 92 3 226 0 99 3 226 0 100 3 226 0 102 3 226 0 104 7 121 0 172 3 226 1 5 3 226 1 7 3 226 1 8] 
#[0 3 230 0 12 0 22] 
#[0 3 234 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 3 238 0 12 0 22] 
#[0 7 125 0 60] 
#[0 7 129 0 60] 
#[1 3 242 0 12 4 185 0 55 3 242 0 105 7 133 0 255] 
#[1 2 197 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 2 86 0 105 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 137 0 222 7 137 0 228 7 137 0 229 1 141 0 230 7 141 0 241 7 141 0 242] 
#[0 3 246 0 105] 
#[0 3 250 0 12 0 105] 
#[1 4 29 0 100 7 145 0 117] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 7 149 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 5 213 0 63 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 7 153 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 229 0 222 5 229 0 228 5 229 0 229 1 141 0 230 7 157 0 244 5 229 0 247] 
#[1 5 237 0 15 2 106 0 22 7 161 0 116] 
#[1 0 99 0 22 3 254 0 24 0 103 0 30 3 254 0 99 7 165 0 133 3 57 0 204 3 254 1 8] 
#[1 2 194 0 22 2 194 0 24 2 194 0 30 2 194 0 99 7 169 0 134 2 194 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 173 0 222 7 173 0 228 7 173 0 229 1 141 0 230] 
#[1 0 107 0 12 4 2 0 101 7 181 0 249] 
#[1 7 185 0 12 1 26 0 101 7 185 0 227] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 189 0 222 7 189 0 228 7 189 0 229 1 141 0 230] 
#[0 4 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 5 85 0 6 5 89 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 2 86 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 97 0 222 5 97 0 228 5 97 0 229 1 141 0 230 5 109 0 236 7 193 0 248 5 109 0 250] 
#[0 4 10 0 101] 
#[0 7 197 0 16] 
#[1 0 33 0 10 4 14 0 12 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 4 14 0 103 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 201 0 222 7 201 0 228 7 201 0 229 1 141 0 230] 
#[0 4 18 0 12 0 103] 
#[1 3 42 0 12 6 221 0 22 3 42 0 103 7 205 0 225] 
#[0 4 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[1 0 33 0 10 0 37 0 13 5 113 0 16 0 41 0 17 5 117 0 22 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 2 86 0 103 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 129 0 222 7 209 0 223 5 125 0 224 5 129 0 228 5 129 0 229 1 141 0 230] 
#[0 4 26 0 103] 
#[1 0 33 0 10 3 42 0 12 0 37 0 13 0 41 0 17 6 221 0 22 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 3 42 0 103 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 7 217 0 222 7 213 0 225 7 217 0 228 7 217 0 229 1 141 0 230] 
#[1 7 221 0 81 7 225 0 82 7 229 0 207] 
#[1 7 233 0 84 7 237 0 85 7 241 0 209] 
#[1 7 245 0 87 7 249 0 88 7 253 0 211] 
#[1 8 1 0 90 8 5 0 91 8 9 0 213] 
#[0 4 30 0 24 0 99 1 8] 
#[0 4 34 0 99] 
#[0 8 13 0 22] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 17 0 222 8 17 0 228 8 17 0 229 1 141 0 230] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 21 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 8 25 0 22] 
#[1 8 29 0 12 1 26 0 101 8 33 0 227 8 37 0 245] 
#[0 4 38 0 15 0 22] 
#[0 4 42 0 22] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 41 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 45 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 8 49 0 77] 
#[0 8 53 0 101] 
#[1 2 86 0 24 6 5 0 77 2 86 0 99 2 86 0 101 8 57 0 156 2 86 1 8] 
#[0 4 46 0 24 0 99 0 101 1 8] 
#[1 3 226 0 6 3 226 0 10 3 226 0 13 3 226 0 17 3 226 0 36 3 226 0 39 3 226 0 42 3 226 0 43 3 226 0 44 3 226 0 45 3 226 0 46 3 226 0 47 3 226 0 48 3 226 0 49 8 61 0 50 7 105 0 51 3 226 0 53 3 226 0 55 3 226 0 56 3 226 0 57 3 226 0 58 3 226 0 59 3 226 0 62 3 226 0 64 3 226 0 66 3 226 0 68 3 226 0 69 3 226 0 70 3 226 0 71 3 226 0 72 3 226 0 73 3 226 0 76 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 80 3 226 0 83 3 226 0 86 3 226 0 89 3 226 0 92 3 226 0 99 3 226 0 100 3 226 0 102 3 226 0 104 8 65 0 171 8 69 0 172 3 226 1 5 3 226 1 7 3 226 1 8] 
#[0 4 50 0 101] 
#[1 8 73 0 12 1 26 0 22 1 26 0 101 8 73 0 227] 
#[0 4 54 0 12 0 22 0 101] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 77 0 222 8 77 0 228 8 77 0 229 1 141 0 230] 
#[0 4 58 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104 1 5 1 7] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 45 0 36 0 49 0 39 0 53 0 42 0 57 0 43 0 61 0 44 0 65 0 45 0 69 0 46 0 73 0 47 0 77 0 48 0 81 0 49 0 85 0 53 0 89 0 55 0 93 0 56 0 97 0 57 0 101 0 58 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 129 0 70 0 133 0 71 0 137 0 72 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 0 185 0 112 0 189 0 114 8 81 0 115 8 81 0 128 8 81 0 129 8 81 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 81 0 168 8 81 0 169 8 81 0 173 8 81 0 174 8 81 0 175 8 81 0 178 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 8 81 0 243 1 153 1 4 8 85 1 5 1 157 1 7] 
#[1 8 89 0 12 4 62 0 22 8 93 0 41] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 97 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 8 101 0 22] 
#[1 4 66 0 6 4 66 0 10 4 66 0 13 4 66 0 17 4 66 0 36 4 66 0 39 4 66 0 42 4 66 0 43 4 66 0 44 4 66 0 45 4 66 0 46 4 66 0 47 4 66 0 48 4 66 0 49 4 66 0 53 6 109 0 54 4 66 0 55 4 66 0 56 4 66 0 57 4 66 0 58 4 66 0 59 4 66 0 62 4 66 0 64 4 66 0 66 4 66 0 68 4 66 0 69 4 66 0 70 4 66 0 71 4 66 0 72 4 66 0 73 4 66 0 76 4 66 0 77 4 66 0 78 4 66 0 79 4 66 0 80 4 66 0 83 4 66 0 86 4 66 0 89 4 66 0 92 4 66 0 99 4 66 0 100 4 66 0 102 4 66 0 104 8 105 0 176 4 66 1 5 4 66 1 7 4 66 1 8] 
#[0 8 109 0 22] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 113 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 4 70 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 8 117 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 8 125 0 184 8 129 0 186 8 129 0 187 8 129 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 4 74 0 105] 
#[0 8 141 0 22] 
#[0 4 78 0 12 0 105] 
#[1 5 237 0 15 2 106 0 22 8 145 0 116] 
#[0 4 82 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 8 149 0 22] 
#[0 8 153 0 101] 
#[0 8 157 0 22] 
#[0 4 86 0 22 0 24 0 30 0 99 1 8] 
#[1 0 111 0 22 4 90 0 24 0 115 0 30 4 90 0 99 7 165 0 133 3 57 0 204 4 90 1 8] 
#[0 4 94 0 3 0 5 0 8 0 9 0 11 0 12 0 14 0 20 0 21 0 22 0 24 0 27 0 30 0 35 0 38 0 39 0 41 0 55 0 56 0 75 0 81 0 82 0 84 0 85 0 87 0 88 0 90 0 91 0 99 0 101 0 103 0 105 1 8] 
#[1 8 161 0 6 8 165 0 7 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 5 97 0 222 5 97 0 228 5 97 0 229 1 141 0 230 8 169 0 236 8 169 0 250] 
#[1 8 173 0 12 1 26 0 101 8 173 0 227] 
#[0 4 98 0 101] 
#[0 4 102 0 12 0 101] 
#[0 4 106 0 101] 
#[0 4 110 0 12 0 103] 
#[0 4 114 0 12 0 103] 
#[0 4 118 0 12 0 103] 
#[0 4 122 0 103] 
#[0 4 126 0 12 0 103] 
#[1 3 42 0 12 6 221 0 22 3 42 0 103 8 177 0 225] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 181 0 222 8 181 0 228 8 181 0 229 1 141 0 230] 
#[0 4 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 134 0 81 0 82] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 185 0 222 8 185 0 228 8 185 0 229 1 141 0 230] 
#[0 4 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 142 0 84 0 85] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 189 0 222 8 189 0 228 8 189 0 229 1 141 0 230] 
#[0 4 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 150 0 87 0 88] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 193 0 222 8 193 0 228 8 193 0 229 1 141 0 230] 
#[0 4 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 16 0 18 0 19 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 37 0 38 0 39 0 40 0 41 0 51 0 55 0 56 0 58 0 60 0 61 0 64 0 65 0 74 0 75 0 78 0 79 0 80 0 81 0 82 0 83 0 84 0 85 0 86 0 87 0 88 0 89 0 90 0 91 0 99 0 100 0 101 0 102 0 103 0 105 1 8] 
#[0 4 158 0 90 0 91] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 197 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 4 162 0 12 0 101] 
#[0 4 166 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 201 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 5 213 0 63 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 2 86 0 101 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 205 0 222 8 205 0 228 8 205 0 229 1 141 0 230 8 205 0 247] 
#[0 4 170 0 101] 
#[0 4 174 0 12 0 101] 
#[0 4 178 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 3 226 0 6 3 226 0 10 3 226 0 13 3 226 0 17 3 226 0 36 3 226 0 39 3 226 0 42 3 226 0 43 3 226 0 44 3 226 0 45 3 226 0 46 3 226 0 47 3 226 0 48 3 226 0 49 7 105 0 51 3 226 0 53 3 226 0 55 3 226 0 56 3 226 0 57 3 226 0 58 3 226 0 59 3 226 0 62 3 226 0 64 3 226 0 66 3 226 0 68 3 226 0 69 3 226 0 70 3 226 0 71 3 226 0 72 3 226 0 73 3 226 0 76 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 80 3 226 0 83 3 226 0 86 3 226 0 89 3 226 0 92 3 226 0 99 3 226 0 100 3 226 0 102 3 226 0 104 8 209 0 172 3 226 1 5 3 226 1 7 3 226 1 8] 
#[0 4 182 0 12 0 24 0 99 0 101 1 8] 
#[0 4 186 0 24 0 99 1 8] 
#[0 4 190 0 12 0 24 0 99 0 101 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 213 0 222 8 213 0 228 8 213 0 229 1 141 0 230] 
#[0 4 194 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 4 198 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 4 202 0 22 0 101] 
#[0 4 206 0 24 0 99 1 8] 
#[0 4 210 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 100 0 102 0 104 1 5 1 7] 
#[0 4 214 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 217 0 222 8 217 0 228 8 217 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 8 221 0 222 8 221 0 228 8 221 0 229 1 141 0 230] 
#[0 4 218 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 225 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 4 222 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 8 229 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 4 226 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 4 230 0 12 4 185 0 55 8 233 0 58 4 230 0 101 4 230 0 105 8 237 0 254 8 237 0 255 8 237 1 0] 
#[1 2 57 0 6 2 61 0 7 0 42 0 22 1 213 0 77 2 65 0 100 8 249 0 118 2 73 0 119 2 77 0 121 2 81 0 122 2 85 0 124 2 89 0 126 2 89 0 230] 
#[1 4 201 0 55 8 253 0 58 4 234 0 103 9 1 0 251 9 1 0 252 9 1 0 253] 
#[1 9 13 0 12 4 238 0 55 4 238 0 58 4 238 0 103] 
#[0 4 242 0 12 0 55 0 58 0 101 0 103 0 105] 
#[0 4 246 0 12 0 55 0 58 0 101 0 103 0 105] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 9 17 0 222 9 17 0 228 9 17 0 229 1 141 0 230] 
#[0 9 21 0 22] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 9 25 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 9 29 0 22] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 9 33 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 9 37 0 222 9 37 0 228 9 37 0 229 1 141 0 230] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 0 109 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 9 41 0 222 9 41 0 228 9 41 0 229 1 141 0 230] 
#[1 0 107 0 12 4 2 0 101 9 45 0 249] 
#[0 4 250 0 101] 
#[0 4 254 0 12 0 103] 
#[0 5 2 0 81 0 82] 
#[0 5 6 0 84 0 85] 
#[0 5 10 0 87 0 88] 
#[0 5 14 0 90 0 91] 
#[0 5 18 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 22 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 26 0 12 0 101] 
#[0 5 30 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 9 49 0 22] 
#[0 5 34 0 22] 
#[0 5 38 0 22] 
#[0 5 42 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 46 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 9 53 0 186 9 53 0 187 9 53 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 5 50 0 12 0 101 0 105] 
#[0 5 54 0 12 0 101 0 105] 
#[0 5 58 0 12 0 101 0 105] 
#[0 9 57 0 22] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 9 61 0 186 9 61 0 187 9 61 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 5 62 0 103] 
#[0 5 66 0 103] 
#[0 5 70 0 103] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 9 65 0 185 9 69 0 186 9 69 0 187 9 69 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 3 242 0 12 0 105] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 9 73 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 5 74 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 9 77 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[0 5 78 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 82 0 12 0 101] 
#[0 5 86 0 12 0 101] 
#[0 5 90 0 12 0 101] 
#[1 0 29 0 6 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 53 0 42 0 61 0 44 0 65 0 45 0 73 0 47 0 81 0 49 0 85 0 53 0 93 0 56 0 97 0 57 0 105 0 59 0 109 0 62 0 113 0 64 0 117 0 66 0 121 0 68 0 125 0 69 0 141 0 73 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 4 145 0 99 0 169 0 100 0 173 0 102 0 177 0 104 4 149 0 129 4 149 0 130 1 17 0 132 0 209 0 136 1 17 0 140 1 17 0 141 1 17 0 142 1 17 0 143 1 17 0 144 1 17 0 145 1 17 0 146 1 17 0 147 1 17 0 148 1 17 0 150 1 17 0 151 1 17 0 152 1 17 0 162 1 17 0 164 1 17 0 166 1 17 0 167 9 81 0 182 1 45 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 145 0 222 1 145 0 228 1 145 0 229 1 141 0 230 1 145 0 232 1 153 1 4 1 157 1 7] 
#[1 5 94 0 12 4 185 0 55 8 233 0 58 5 94 0 101 5 94 0 105 9 85 0 254 9 85 0 255 9 85 1 0] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 0 177 0 104 9 89 0 186 9 89 0 187 9 89 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[1 4 201 0 55 8 253 0 58 5 98 0 103 9 93 0 251 9 93 0 252 9 93 0 253] 
#[1 9 97 0 12 1 26 0 55 1 26 0 58 1 26 0 103 9 101 0 227] 
#[0 5 102 0 12 0 55 0 58 0 103] 
#[0 5 106 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 110 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 114 0 6 0 10 0 13 0 17 0 36 0 39 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 53 0 55 0 56 0 57 0 58 0 59 0 62 0 64 0 66 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 77 0 78 0 79 0 80 0 83 0 86 0 89 0 92 0 99 0 100 0 102 0 104 1 5 1 7 1 8] 
#[0 5 118 0 12 0 101 0 105] 
#[0 5 122 0 12 0 55 0 58 0 101 0 103 0 105] 
#[0 5 126 0 103] 
#[1 0 33 0 10 0 37 0 13 0 41 0 17 0 49 0 39 0 61 0 44 2 86 0 55 2 86 0 58 8 121 0 62 0 113 0 64 0 145 0 76 0 149 0 77 0 153 0 78 0 157 0 79 0 10 0 80 0 14 0 83 0 18 0 86 0 22 0 89 0 161 0 92 0 169 0 100 0 173 0 102 2 86 0 103 0 177 0 104 9 105 0 186 9 105 0 187 9 105 0 188 1 49 0 189 1 53 0 190 1 53 0 191 1 61 0 193 1 65 0 194 1 69 0 195 1 73 0 196 1 77 0 197 1 81 0 198 1 85 0 199 1 85 0 200 1 93 0 201 1 97 0 202 1 97 0 203 1 105 0 205 1 109 0 206 1 113 0 215 1 117 0 216 1 121 0 217 1 125 0 218 1 97 0 230] 
#[0 5 130 0 55 0 58 0 103] 
#[0 5 134 0 12 0 55 0 58 0 103]
	).
]

{ #category : #private }
PythonParser >> actionsForCurrentToken [
	| actions originalToken originalPosition |
	originalToken := currentToken.
	originalPosition := self position.
	(#('!' ':' '=') includes: originalToken source)
		ifTrue: [ self findInterpolationState
				ifNotNil: [ :scannerState | 
					self scope: scannerState first.
					scanner lineJoiningStack: scannerState second.
					self position: currentToken startPosition - 1.
					currentToken := nil.
					self getNextToken.
					self scope: #default.
					currentToken source = originalToken source
						ifFalse: [ self actionsForCurrentToken do: [ :each | self splitWithAction: each ] ].
					currentToken := originalToken.
					self position: originalPosition ] ].
	actions := super actionsForCurrentToken.
	actions isEmpty
		ifTrue: [ currentToken source = '}'
				ifTrue: [ self findInterpolationState
						ifNotNil: [ :scannerState | 
							self scope: scannerState first.
							scanner lineJoiningStack: scannerState second.
							self position: currentToken startPosition - 1.
							currentToken := nil.
							self getNextToken.
							self scope: #default.
							currentToken source = '}' ifTrue: [ ^ actions ].
							^ self actionsForCurrentToken ] ].
			currentToken ids first = scanner emptySymbolTokenId
				ifTrue: [ self addActionsFor: scanner DEDENTId to: actions.
					actions notEmpty
						ifTrue: [ currentToken := SmaCCToken
									value: ''
									start: currentToken startPosition
									ids: {scanner DEDENTId}.
							^ actions ].
					self addActionsFor: scanner NEWLINEId to: actions.
					actions notEmpty
						ifTrue: [ currentToken := SmaCCToken
									value: ''
									start: currentToken startPosition
									ids: {scanner NEWLINEId}.
							^ actions ] ] ].
	^ actions
]

{ #category : #private }
PythonParser >> findInterpolationState [
	| i stackItem |
	i := nodeStack size.
	[ i > 0 ]
		whileTrue: [ stackItem := nodeStack at: i.
			(stackItem class = Array
				and: [ stackItem size = 2 and: [ stackItem first isSymbol ] ])
				ifTrue: [ ^ stackItem ].
			i := i - 1 ].
	^ nil
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForStartFLongStringDouble1: nodes [
	^ {#fLongStringDouble.
		scanner lineJoiningStack copy}
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForStartFLongStringSingle1: nodes [
	^ {#fLongStringSingle.
		scanner lineJoiningStack copy}
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForStartFStringDouble1: nodes [
	^ {#fStringDouble.
		scanner lineJoiningStack copy}
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForStartFStringSingle1: nodes [
	^ {#fStringSingle.
		scanner lineJoiningStack copy}
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFor______commaToken__testlistItem__expression___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFor_test__expression_______commaToken___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFor_test__expression_______commaToken___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForand_test2: nodes [
	| result |
	result := PyBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForarglist2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForarglist3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	result at: 4 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 1).
	self add: ((nodes at: 3) at: 4) to: (result at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForarglist4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForargument3: nodes [
	| result |
	result := PyArgumentNode new.
	result name: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForassert_stmt1: nodes [
	| result |
	result := PyAssertStatementNode new.
	result assertToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result commaToken: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForassign_after2: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: ((nodes at: 1) at: 1) to: (result at: 3).
	self addFirst: ((nodes at: 1) at: 2) to: (result at: 4).
	self addFirst: (nodes at: 2) to: (result at: 1).
	self addFirst: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForassign_after_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForassign_after_2: nodes [
	| result |
	result := nodes at: 2.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForassignment_expression1: nodes [
	| result |
	result := PyAssignmentExpressionNode new.
	result variable: (nodes at: 1).
	result assign: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom11: nodes [
	| result |
	result := PyVariableExpressionNode new.
	result nameToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom12: nodes [
	| result |
	result := PyTypedVariableExpressionNode new.
	result nameToken: (nodes at: 1).
	result colonToken: ((nodes at: 2) at: 1).
	result typeExpression: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom13: nodes [
	| result |
	result := PyNumberNode new.
	result numberToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom1: nodes [
	| result |
	result := PyTupleExpressionNode new.
	result lparenToken: (nodes at: 1).
	result rparenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom2: nodes [
	| result |
	result := PyTupleExpressionNode new.
	result lparenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result expressions.
	result rparenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom3: nodes [
	| result |
	result := PyTupleExpressionNode new.
	result lparenToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result rparenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom4: nodes [
	| result |
	result := PyListExpressionNode new.
	result lbrackToken: (nodes at: 1).
	result rbrackToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom5: nodes [
	| result |
	result := PyListExpressionNode new.
	result lbrackToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result rbrackToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom6: nodes [
	| result |
	result := PySetExpressionNode new.
	result lcurlyToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result rcurlyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom7: nodes [
	| result |
	result := PyDictionaryExpressionNode new.
	result lcurlyToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result rcurlyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom8: nodes [
	| result |
	result := PyDictionaryExpressionNode new.
	result lcurlyToken: (nodes at: 1).
	result rcurlyToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForatom9: nodes [
	| result |
	result := PyBacktickExpressionNode new.
	result addToken: (nodes at: 1) to: result backtickTokens.
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result addToken: (nodes at: 3) to: result backtickTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForawait2: nodes [
	| result |
	result := PyAwaitExpressionNode new.
	result awaitToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForbreak_stmt1: nodes [
	| result |
	result := PyBreakStatementNode new.
	result breakToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassListItem2: nodes [
	| result |
	result := PyMetaclassNode new.
	result metaclassToken: (nodes at: 1).
	result equalToken: (nodes at: 2).
	result superclass: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef1: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result classToken: (nodes at: 1).
	result cname: (nodes at: 2).
	result colonToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef2: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result addNodes: (nodes at: 1) to: result decorators.
	result classToken: (nodes at: 2).
	result cname: (nodes at: 3).
	result colonToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef3: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result classToken: (nodes at: 1).
	result cname: (nodes at: 2).
	result lparenToken: (nodes at: 3).
	result rparenToken: (nodes at: 4).
	result colonToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef4: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result classToken: (nodes at: 1).
	result cname: (nodes at: 2).
	result lparenToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result superClasses.
	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.
	result rparenToken: (nodes at: 5).
	result colonToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef5: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result addNodes: (nodes at: 1) to: result decorators.
	result classToken: (nodes at: 2).
	result cname: (nodes at: 3).
	result lparenToken: (nodes at: 4).
	result rparenToken: (nodes at: 5).
	result colonToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForclassdef6: nodes [
	| result |
	result := PyClassDefinitionNode new.
	result addNodes: (nodes at: 1) to: result decorators.
	result classToken: (nodes at: 2).
	result cname: (nodes at: 3).
	result lparenToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result superClasses.
	result addTokens: ((nodes at: 5) at: 2) to: result commaTokens.
	result rparenToken: (nodes at: 6).
	result colonToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_for1: nodes [
	| result |
	result := PyComprehensionForNode new.
	result forToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result inToken: (nodes at: 3).
	result inValue: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_for2: nodes [
	| result |
	result := PyComprehensionForNode new.
	result forToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result inToken: (nodes at: 3).
	result inValue: (nodes at: 4).
	result comprehension: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_if1: nodes [
	| result |
	result := PyComprehensionIfNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_if2: nodes [
	| result |
	result := PyComprehensionIfNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result iter: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_op7: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomp_op9: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomparison2: nodes [
	| result |
	result := PyComparisonExpressionNode new.
	result left: (nodes at: 1).
	result operator: ((nodes at: 2) at: 1).
	result notToken: ((nodes at: 2) at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomprehension1: nodes [
	| result |
	result := PyComprehensionNode new.
	result object: (nodes at: 1).
	result for: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcomprehension_dictionary_item1: nodes [
	| result |
	result := PyComprehensionDictionaryItemNode new.
	result object: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result value: (nodes at: 3).
	result comp: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForcontinue_stmt1: nodes [
	| result |
	result := PyContinueStatementNode new.
	result continueToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordecorator1: nodes [
	| result |
	result := PyDecoratorExpressionNode new.
	result ampersandToken: (nodes at: 1).
	result receiver: (nodes at: 2).
	result lparenToken: ((nodes at: 3) at: 1).
	result rparenToken: ((nodes at: 3) at: 2).
	result addNodes: ((nodes at: 3) at: 3) to: result arguments.
	result addTokens: ((nodes at: 3) at: 4) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result starTokens.
	result starStarToken: ((nodes at: 3) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordecorators1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordecorators2: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordel_stmt1: nodes [
	| result |
	result := PyDelStatementNode new.
	result delToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordictionary_item1: nodes [
	| result |
	result := PyDictionaryItemNode new.
	result object: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotopt_dotted_name2: nodes [
	| result |
	result := PyRelativeNameNode new.
	result addTokens: (nodes at: 1) to: result periodTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotopt_dotted_name3: nodes [
	| result |
	result := PyRelativeNameNode new.
	result addTokens: (nodes at: 1) to: result periodTokens.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotted_as_name1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotted_as_name2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotted_as_names1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFordotted_as_names2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 2).
	self add: ((nodes at: 1) at: 2) to: (result at: 3).
	self add: ((nodes at: 1) at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForelif1: nodes [
	| result |
	result := PyElifNode new.
	result elifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result colonToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForelif__elsif__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForelse_opt2: nodes [
	| result |
	result := PyElseNode new.
	result elseToken: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForeval_input1: nodes [
	| result |
	result := PyEvalNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result expressions.
	result addTokens: ((nodes at: 1) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_clause1: nodes [
	| result |
	result := PyExceptClauseNode new.
	result exceptToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_clause2: nodes [
	| result |
	result := PyExceptClauseNode new.
	result exceptToken: (nodes at: 1).
	result exception: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_clause3: nodes [
	| result |
	result := PyExceptClauseNode new.
	result exceptToken: (nodes at: 1).
	result exception: (nodes at: 2).
	result asToken: (nodes at: 3).
	result variable: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_clause4: nodes [
	| result |
	result := PyExceptClauseNode new.
	result exceptToken: (nodes at: 1).
	result exception: (nodes at: 2).
	result commaToken: (nodes at: 3).
	result variable: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_list1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self addAll: (nodes at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexcept_list2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexec_stmt1: nodes [
	| result |
	result := PyExecStatementNode new.
	result execToken: (nodes at: 1).
	result expr: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexec_stmt2: nodes [
	| result |
	result := PyExecStatementNode new.
	result execToken: (nodes at: 1).
	result expr: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result commaToken: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexpr_stmt1: nodes [
	| result |
	result := PyExpressionStatementNode new.
	result expression: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexpr_stmt2: nodes [
	| result |
	result := PyAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result assigns.
	result addNodes: ((nodes at: 2) at: 2) to: result tos.
	result addTokens: ((nodes at: 2) at: 3) to: result colonTokens.
	result addNodes: ((nodes at: 2) at: 4) to: result typeExpressions.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexpr_stmt3: nodes [
	| result |
	result := PyAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result addToken: (nodes at: 2) to: result assigns.
	result addNode: (nodes at: 3) to: result tos.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForexprlist1: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfactor2: nodes [
	| result |
	result := PyUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfile_input1: nodes [
	| result |
	result := PyFileNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfile_input2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfile_input3: nodes [
	| result |
	result := nodes at: 1.
	result addNode: (nodes at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfinally1: nodes [
	| result |
	result := PyFinallyNode new.
	result finallyToken: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfor_stmt1: nodes [
	| result |
	result := PyForStatementNode new.
	result forToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result inToken: (nodes at: 3).
	result inExpression: (nodes at: 4).
	result colonToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result statements.
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfpdef2: nodes [
	| result |
	result := PyParameterListNode new.
	result lparenToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result rparenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfuncdef1: nodes [
	| result |
	result := PyFunctionDefinitionNode new.
	result defToken: (nodes at: 1).
	result fname: (nodes at: 2).
	result lparenToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 3) to: result commaTokens.
	result rparenToken: ((nodes at: 3) at: 4).
	result returnAnnotation: (nodes at: 4).
	result colonToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfuncdef2: nodes [
	| result |
	result := PyFunctionDefinitionNode new.
	result asyncToken: (nodes at: 1).
	result defToken: (nodes at: 2).
	result fname: (nodes at: 3).
	result lparenToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commaTokens.
	result rparenToken: ((nodes at: 4) at: 4).
	result returnAnnotation: (nodes at: 5).
	result colonToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfuncdef3: nodes [
	| result |
	result := PyFunctionDefinitionNode new.
	result addNodes: (nodes at: 1) to: result decorators.
	result defToken: (nodes at: 2).
	result fname: (nodes at: 3).
	result lparenToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commaTokens.
	result rparenToken: ((nodes at: 4) at: 4).
	result returnAnnotation: (nodes at: 5).
	result colonToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForfuncdef4: nodes [
	| result |
	result := PyFunctionDefinitionNode new.
	result addNodes: (nodes at: 1) to: result decorators.
	result asyncToken: (nodes at: 2).
	result defToken: (nodes at: 3).
	result fname: (nodes at: 4).
	result lparenToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result parameters.
	result addTokens: ((nodes at: 5) at: 3) to: result commaTokens.
	result rparenToken: ((nodes at: 5) at: 4).
	result returnAnnotation: (nodes at: 6).
	result colonToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForglobal_stmt1: nodes [
	| result |
	result := PyGlobalStatementNode new.
	result globalToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result nameTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForif_stmt1: nodes [
	| result |
	result := PyIfStatementNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result colonToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elsifs.
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_as_name1: nodes [
	| result |
	result := PyNameNode new.
	result nameToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_as_name2: nodes [
	| result |
	result := PyAsNameNode new.
	result nameToken: (nodes at: 1).
	result asToken: (nodes at: 2).
	result rename: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_from1: nodes [
	| result |
	result := PyImportStatementNode new.
	result fromToken: (nodes at: 1).
	result from: (nodes at: 2).
	result importToken: (nodes at: 3).
	result starToken: ((nodes at: 4) at: 1).
	result lparenToken: ((nodes at: 4) at: 2).
	result addTokens: ((nodes at: 4) at: 3) to: result commaTokens.
	result addNodes: ((nodes at: 4) at: 4) to: result names.
	result rparenToken: ((nodes at: 4) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_name1: nodes [
	| result |
	result := PyImportStatementNode new.
	result importToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result asTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result renames.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_names_star1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_names_star2: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForimport_names_star3: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForinit1: nodes [
	| result |
	result := PyInitNode new.
	result equalToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForkeyword_parameter1: nodes [
	| result |
	result := PyKeywordParameterNode new.
	result starStarToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForkeyword_parameter2: nodes [
	| result |
	result := PyKeywordParameterNode new.
	result starStarToken: (nodes at: 1).
	result name: (nodes at: 2).
	result colonToken: ((nodes at: 3) at: 1).
	result typeExpression: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlambdef1: nodes [
	| result |
	result := PyLambdaExpressionNode new.
	result lambdaToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result parameters.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result colonToken: (nodes at: 3).
	result body: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_for1: nodes [
	| result |
	result := PyListForNode new.
	result forToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result inToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_for2: nodes [
	| result |
	result := PyListForNode new.
	result forToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result exprs.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	result inToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.
	result list: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_if1: nodes [
	| result |
	result := PyListIfNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_if2: nodes [
	| result |
	result := PyListIfNode new.
	result ifToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result iter: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_parameter1: nodes [
	| result |
	result := PyListParameterNode new.
	result starToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_parameter2: nodes [
	| result |
	result := PyListParameterNode new.
	result starToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForlist_parameter3: nodes [
	| result |
	result := PyListParameterNode new.
	result starToken: (nodes at: 1).
	result name: (nodes at: 2).
	result colonToken: ((nodes at: 3) at: 1).
	result typeExpression: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFormore_args1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFormore_args2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFormore_args3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFormore_args4: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFornamelist1: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFornamelist2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForor_test2: nodes [
	| result |
	result := PyBinaryExpressionNode new.
	result left: (nodes at: 1).
	result opeator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparameter1: nodes [
	| result |
	result := PyParameterNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparameter2: nodes [
	| result |
	result := PyParameterNode new.
	result name: (nodes at: 1).
	result initializer: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparameter3: nodes [
	| result |
	result := PyParameterNode new.
	result name: (nodes at: 1).
	result colonToken: ((nodes at: 2) at: 1).
	result typeExpression: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparameter4: nodes [
	| result |
	result := PyParameterNode new.
	result name: (nodes at: 1).
	result colonToken: ((nodes at: 2) at: 1).
	result typeExpression: ((nodes at: 2) at: 2).
	result initializer: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparameters1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparen_arglist_opt1: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparen_arglist_opt2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForparen_arglist_opt3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 5).
	result at: 6 put: ((nodes at: 2) at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForpass_stmt1: nodes [
	| result |
	result := PyPassStatementNode new.
	result passToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForprint_stmt1: nodes [
	| result |
	result := PyPrintStatementNode new.
	result printToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result expressions.
	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForprint_stmt2: nodes [
	| result |
	result := PyPrintStatementNode new.
	result printToken: (nodes at: 2).
	result gtgtToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result expressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForraise_stmt1: nodes [
	| result |
	result := PyRaiseStatementNode new.
	result raiseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForraise_stmt2: nodes [
	| result |
	result := PyRaiseStatementNode new.
	result raiseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result args.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForraise_stmt3: nodes [
	| result |
	result := PyRaiseStatementNode new.
	result raiseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result args.
	result fromToken: ((nodes at: 3) at: 1).
	result from: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForraise_stmt4: nodes [
	| result |
	result := PyRaiseStatementNode new.
	result raiseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result args.
	result addToken: (nodes at: 3) to: result commaTokens.
	result addNode: (nodes at: 4) to: result args.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForraise_stmt5: nodes [
	| result |
	result := PyRaiseStatementNode new.
	result raiseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result args.
	result addToken: (nodes at: 3) to: result commaTokens.
	result addNode: (nodes at: 4) to: result args.
	result addToken: (nodes at: 5) to: result commaTokens.
	result addNode: (nodes at: 6) to: result args.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForreturn_annotation_opt2: nodes [
	| result |
	result := PyReturnTypeAnnotationNode new.
	result arrowToken: (nodes at: 1).
	result typeExpression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForreturn_stmt1: nodes [
	| result |
	result := PyReturnStatementNode new.
	result returnToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsingle_input2: nodes [
	| result |
	result := PyFileNode new.
	result addNode: (nodes at: 1) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsliceop1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForstatement_with_separator1: nodes [
	| result |
	result := nodes at: 1.
	result semicolonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForstring1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForstring3: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 2) to: (result at: 1).
	self addFirst: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 5) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForstrings1: nodes [
	| result |
	result := nodes at: 1.
	result addTokens: ((nodes at: 2) at: 1) to: result parts.
	result addNodes: ((nodes at: 2) at: 2) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForstrings2: nodes [
	| result |
	result := PyStringNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result parts.
	result addNodes: ((nodes at: 1) at: 2) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsubscript1: nodes [
	| result |
	result := PyEllipsisNode new.
	result addToken: (nodes at: 1) to: result periodTokens.
	result addToken: (nodes at: 2) to: result periodTokens.
	result addToken: (nodes at: 3) to: result periodTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsubscript3: nodes [
	| result |
	result := PySliceNode new.
	result addToken: (nodes at: 1) to: result colonTokens.
	result addToken: ((nodes at: 2) at: 1) to: result colonTokens.
	result step: ((nodes at: 2) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsubscript4: nodes [
	| result |
	result := PySliceNode new.
	result addToken: (nodes at: 1) to: result colonTokens.
	result to: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result colonTokens.
	result step: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsubscript5: nodes [
	| result |
	result := PySliceNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result colonTokens.
	result addToken: ((nodes at: 3) at: 1) to: result colonTokens.
	result step: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsubscript6: nodes [
	| result |
	result := PySliceNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result colonTokens.
	result to: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result colonTokens.
	result step: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForsuite2: nodes [
	| result |
	result := nodes at: 3.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortest2: nodes [
	| result |
	result := PyIfExpressionNode new.
	result condition: (nodes at: 1).
	result ifToken: (nodes at: 2).
	result if: (nodes at: 3).
	result elseToken: (nodes at: 4).
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortest_test_opt1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortest_test_opt2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist11: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlistItem2: nodes [
	| result |
	result := PySpreadExpressionNode new.
	result operator: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist_expression2: nodes [
	| result |
	result := PyListExpressionNode new.
	result addNode: (nodes at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result expressions.
	result addToken: (nodes at: 3) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist_expression3: nodes [
	| result |
	result := PyListExpressionNode new.
	result addNode: (nodes at: 1) to: result expressions.
	result addToken: (nodes at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortestlist_safe2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortrailers2: nodes [
	| result |
	result := PyFunctionCallExpressionNode new.
	result receiver: (nodes at: 1).
	result lparenToken: (nodes at: 2).
	result rparenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortrailers3: nodes [
	| result |
	result := PyFunctionCallExpressionNode new.
	result receiver: (nodes at: 1).
	result lparenToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result arguments.
	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 3) to: result starTokens.
	result starStarToken: ((nodes at: 3) at: 4).
	result rparenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortrailers4: nodes [
	| result |
	result := PySubscriptExpressionNode new.
	result receiver: (nodes at: 1).
	result lbrackToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result subscripts.
	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.
	result rbrackToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortrailers5: nodes [
	| result |
	result := PyFieldAccessExpressionNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result nameToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortry_stmt1: nodes [
	| result |
	result := PyTryStatementNode new.
	result tryToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result colonTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: ((nodes at: 4) at: 1) to: result clauses.
	result addTokens: ((nodes at: 4) at: 2) to: result colonTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result statements.
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortry_stmt2: nodes [
	| result |
	result := PyTryStatementNode new.
	result tryToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result colonTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: ((nodes at: 4) at: 1) to: result clauses.
	result addTokens: ((nodes at: 4) at: 2) to: result colonTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result statements.
	result else: (nodes at: 5).
	result finally: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortry_stmt3: nodes [
	| result |
	result := PyTryStatementNode new.
	result tryToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result colonTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result finally: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionFortype_annotation1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForvarargslist3: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	self add: (nodes at: 5) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForwhile_stmt1: nodes [
	| result |
	result := PyWhileStatementNode new.
	result whileToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result colonToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForwith_item1: nodes [
	| result |
	result := PyWithItemNode new.
	result expression: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForwith_item2: nodes [
	| result |
	result := PyWithItemNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForwith_stmt1: nodes [
	| result |
	result := PyWithStatementNode new.
	result withToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result withItems.
	result colonToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForyield_expr1: nodes [
	| result |
	result := PyYieldExpressionNode new.
	result yieldToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result expressions.
	result addTokens: ((nodes at: 2) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForyield_expr2: nodes [
	| result |
	result := PyYieldExpressionNode new.
	result yieldToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result expressions.
	result addTokens: ((nodes at: 3) at: 2) to: result commaTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
PythonParser >> reduceActionForyield_stmt1: nodes [
	| result |
	result := PyYieldStatementNode new.
	result yieldExpression: (nodes at: 1).
	^ result
]

{ #category : #testing }
PythonParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
PythonParser >> useAllTokenIds [
	^ false
]
