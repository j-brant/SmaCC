"
SmaCCSourceReduceCode represents a reduce action that is specified in the grammar. In this case, it outputs the code directly into the parser.

Instance Variables
	source	<String>	the source to output


"
Class {
	#name : #SmaCCSourceReduceCode,
	#superclass : #SmaCCReduceCode,
	#instVars : [
		'source',
		'isImmediate'
	],
	#category : #'SmaCC_Development-Compilation Model'
}

{ #category : #'instance creation' }
SmaCCSourceReduceCode class >> onRHS: aSmaCCRHS source: aString [
	^ (self onRHS: aSmaCCRHS)
		source: aString;
		yourself
]

{ #category : #comparing }
SmaCCSourceReduceCode >> = anObject [
	^ super = anObject and: [ self source = anObject source ]
]

{ #category : #private }
SmaCCSourceReduceCode >> basicModelTypes: aSet [
	| index parseTree |
	index := self returnedNodeIndex.
	index notNil
		ifTrue: [ ^ self basicModelTypes: aSet forIndex: index ].
	parseTree := RBParser parseExpression: self source onError: [ :e :p | ^ Array with: (self model classFor: Object) ].
	^ self typesForTree: parseTree seen: aSet
]

{ #category : #'initialize-release' }
SmaCCSourceReduceCode >> initialize [
	super initialize.
	isImmediate := false
]

{ #category : #accessing }
SmaCCSourceReduceCode >> isImmediate [
	^ isImmediate
]

{ #category : #accessing }
SmaCCSourceReduceCode >> isImmediate: aBoolean [
	isImmediate := aBoolean
]

{ #category : #accessing }
SmaCCSourceReduceCode >> source [
	^ source
]

{ #category : #'initialize-release' }
SmaCCSourceReduceCode >> source: aString [
	source := aString
]

{ #category : #private }
SmaCCSourceReduceCode >> typesForTree: aRBProgramNode seen: aSet [
	aRBProgramNode isReturn
		ifTrue: [ ^ self typesForTree: aRBProgramNode value seen: aSet ].
	(aRBProgramNode isSequence and: [ aRBProgramNode statements notEmpty ])
		ifTrue: [ | types |
			types := Set
					withAll: (self typesForTree: aRBProgramNode statements last seen: aSet).
			aRBProgramNode
				nodesDo: [ :each | 
					each isReturn
						ifTrue: [ types addAll: (self typesForTree: each value seen: aSet) ] ].
			^ types asArray ].
	(aRBProgramNode isLiteralNode or: [ aRBProgramNode isVariable ])
		ifTrue: [ (self codeGenerator returnedNodeIndexForTree: aRBProgramNode in: self)
				ifNil: [ aRBProgramNode isLiteralNode
						ifTrue: [ ^ Array with: (self model classFor: aRBProgramNode value class) ] ]
				ifNotNil: [ :index | ^ self basicModelTypes: aSet forIndex: index ] ].
	aRBProgramNode isDynamicArray
		ifTrue: [ ^ Array with: (self model classFor: Array) ].
	aRBProgramNode isMessage
		ifTrue: [ aRBProgramNode selector = #yourself
				ifTrue: [ ^ self typesForTree: aRBProgramNode receiver seen: aSet ].
			(aRBProgramNode selector = #new and: [ aRBProgramNode receiver isVariable ])
				ifTrue: [ (self model classNamed: aRBProgramNode receiver name)
						ifNotNil: [ :cls | ^ {cls} ] ].
			(aRBProgramNode receiver isVariable
				and: [ aRBProgramNode receiver name = 'SmaCCToken' ])
				ifTrue: [ ^ Array with: (self model classFor: SmaCCToken) ] ].
	aRBProgramNode isCascade
		ifTrue: [ ^ self typesForTree: aRBProgramNode messages last seen: aSet ].
	^ Array with: (self model classFor: Object)
]
